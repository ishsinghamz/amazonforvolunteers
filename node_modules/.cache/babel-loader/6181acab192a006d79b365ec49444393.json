{"ast":null,"code":"import { __assign } from \"tslib\";\nimport React, { useEffect, useRef, useState, createContext, useContext } from 'react';\nimport { getColumnKey } from './utils';\nimport styles from './styles.css.js';\nimport { warnOnce } from '../internal/logging';\nexport var DEFAULT_WIDTH = 120;\nvar SELECTION_CELL_WIDTH = 54;\n\nfunction checkProperty(column, name) {\n  var value = column[name];\n\n  if (typeof value !== 'number' && typeof value !== 'undefined') {\n    warnOnce('Table', \"resizableColumns feature requires \" + name + \" property to be a number, got \" + value + \". The component may work incorrectly.\");\n  }\n}\n\nexport function checkColumnWidths(columnDefinitions) {\n  for (var _i = 0, columnDefinitions_1 = columnDefinitions; _i < columnDefinitions_1.length; _i++) {\n    var column = columnDefinitions_1[_i];\n    checkProperty(column, 'minWidth');\n    checkProperty(column, 'width');\n  }\n}\n\nfunction readWidths(headerEl, columnDefinitions, hasSelection) {\n  var result = {};\n\n  for (var index = 0; index < columnDefinitions.length; index++) {\n    var column = columnDefinitions[index];\n    var id = getColumnKey(columnDefinitions[index], index);\n    var width = column.width || 0;\n    var minWidth = column.minWidth || width || DEFAULT_WIDTH;\n\n    if (!width && index !== columnDefinitions.length - 1) {\n      var colIndex = hasSelection ? index + 2 : index + 1;\n      var colEl = headerEl.querySelector(\".\" + styles['header-cell'] + \":nth-child(\" + colIndex + \")\");\n      width = colEl.getBoundingClientRect().width;\n    }\n\n    result[id] = Math.max(width, minWidth);\n  }\n\n  return result;\n}\n\nfunction updateWidths(columnDefinitions, oldWidths, newWidth, colIndex) {\n  var _a;\n\n  var definition = columnDefinitions[colIndex];\n  var id = getColumnKey(definition, colIndex);\n  var minWidth = typeof definition.minWidth === 'number' ? definition.minWidth : DEFAULT_WIDTH;\n  newWidth = Math.max(newWidth, minWidth);\n\n  if (oldWidths[id] === newWidth) {\n    return oldWidths;\n  }\n\n  return __assign(__assign({}, oldWidths), (_a = {}, _a[id] = newWidth, _a));\n}\n\nvar WidthsContext = createContext({\n  totalWidth: 0,\n  columnWidths: {},\n  updateColumn: function () {}\n});\nexport function ColumnWidthsProvider(_a) {\n  var tableRef = _a.tableRef,\n      visibleColumnDefinitions = _a.visibleColumnDefinitions,\n      resizableColumns = _a.resizableColumns,\n      hasSelection = _a.hasSelection,\n      children = _a.children;\n  var visibleColumns = useRef(null);\n\n  var _b = useState({}),\n      columnWidths = _b[0],\n      setColumnWidths = _b[1];\n\n  useEffect(function () {\n    if (!resizableColumns) {\n      return;\n    }\n\n    var lastVisible = visibleColumns.current;\n\n    if (lastVisible) {\n      var _loop_1 = function (index) {\n        var column = visibleColumnDefinitions[index];\n        var id = getColumnKey(column, index);\n\n        if (!columnWidths[id] && lastVisible.indexOf(column.id) === -1) {\n          setColumnWidths(function (columnWidths) {\n            var _a;\n\n            return __assign(__assign({}, columnWidths), (_a = {}, _a[id] = column.width || DEFAULT_WIDTH, _a));\n          });\n        }\n      };\n\n      for (var index = 0; index < visibleColumnDefinitions.length; index++) {\n        _loop_1(index);\n      }\n    }\n\n    visibleColumns.current = visibleColumnDefinitions.map(function (column) {\n      return column.id;\n    });\n  }, [columnWidths, resizableColumns, visibleColumnDefinitions]);\n  useEffect(function () {\n    if (!resizableColumns) {\n      return;\n    }\n\n    setColumnWidths(function () {\n      return readWidths(tableRef.current, visibleColumnDefinitions, hasSelection);\n    });\n  }, []);\n\n  function updateColumn(colIndex, newWidth) {\n    setColumnWidths(function (columnWidths) {\n      return updateWidths(visibleColumnDefinitions, columnWidths, newWidth, colIndex);\n    });\n  }\n\n  var totalWidth = visibleColumnDefinitions.reduce(function (total, column, index) {\n    return total + (columnWidths[getColumnKey(column, index)] || DEFAULT_WIDTH);\n  }, 0);\n\n  if (hasSelection) {\n    totalWidth += SELECTION_CELL_WIDTH;\n  }\n\n  return React.createElement(WidthsContext.Provider, {\n    value: {\n      columnWidths: columnWidths,\n      totalWidth: totalWidth,\n      updateColumn: updateColumn\n    }\n  }, children);\n}\nexport function useColumnWidths() {\n  return useContext(WidthsContext);\n}","map":{"version":3,"sources":["/Users/isingheg/Desktop/projects/test-react-amplify/node_modules/@awsui/components-react/table/use-column-widths.js"],"names":["__assign","React","useEffect","useRef","useState","createContext","useContext","getColumnKey","styles","warnOnce","DEFAULT_WIDTH","SELECTION_CELL_WIDTH","checkProperty","column","name","value","checkColumnWidths","columnDefinitions","_i","columnDefinitions_1","length","readWidths","headerEl","hasSelection","result","index","id","width","minWidth","colIndex","colEl","querySelector","getBoundingClientRect","Math","max","updateWidths","oldWidths","newWidth","_a","definition","WidthsContext","totalWidth","columnWidths","updateColumn","ColumnWidthsProvider","tableRef","visibleColumnDefinitions","resizableColumns","children","visibleColumns","_b","setColumnWidths","lastVisible","current","_loop_1","indexOf","map","reduce","total","createElement","Provider","useColumnWidths"],"mappings":"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","sourcesContent":["import { __assign } from \"tslib\";\nimport React, { useEffect, useRef, useState, createContext, useContext } from 'react';\nimport { getColumnKey } from './utils';\nimport styles from './styles.css.js';\nimport { warnOnce } from '../internal/logging';\nexport var DEFAULT_WIDTH = 120;\nvar SELECTION_CELL_WIDTH = 54;\nfunction checkProperty(column, name) {\n    var value = column[name];\n    if (typeof value !== 'number' && typeof value !== 'undefined') {\n        warnOnce('Table', \"resizableColumns feature requires \" + name + \" property to be a number, got \" + value + \". The component may work incorrectly.\");\n    }\n}\nexport function checkColumnWidths(columnDefinitions) {\n    for (var _i = 0, columnDefinitions_1 = columnDefinitions; _i < columnDefinitions_1.length; _i++) {\n        var column = columnDefinitions_1[_i];\n        checkProperty(column, 'minWidth');\n        checkProperty(column, 'width');\n    }\n}\nfunction readWidths(headerEl, columnDefinitions, hasSelection) {\n    var result = {};\n    for (var index = 0; index < columnDefinitions.length; index++) {\n        var column = columnDefinitions[index];\n        var id = getColumnKey(columnDefinitions[index], index);\n        var width = column.width || 0;\n        var minWidth = column.minWidth || width || DEFAULT_WIDTH;\n        if (!width &&\n            index !== columnDefinitions.length - 1) {\n            var colIndex = hasSelection ? index + 2 : index + 1;\n            var colEl = headerEl.querySelector(\".\" + styles['header-cell'] + \":nth-child(\" + colIndex + \")\");\n            width = colEl.getBoundingClientRect().width;\n        }\n        result[id] = Math.max(width, minWidth);\n    }\n    return result;\n}\nfunction updateWidths(columnDefinitions, oldWidths, newWidth, colIndex) {\n    var _a;\n    var definition = columnDefinitions[colIndex];\n    var id = getColumnKey(definition, colIndex);\n    var minWidth = typeof definition.minWidth === 'number' ? definition.minWidth : DEFAULT_WIDTH;\n    newWidth = Math.max(newWidth, minWidth);\n    if (oldWidths[id] === newWidth) {\n        return oldWidths;\n    }\n    return __assign(__assign({}, oldWidths), (_a = {}, _a[id] = newWidth, _a));\n}\nvar WidthsContext = createContext({\n    totalWidth: 0,\n    columnWidths: {},\n    updateColumn: function () { }\n});\nexport function ColumnWidthsProvider(_a) {\n    var tableRef = _a.tableRef, visibleColumnDefinitions = _a.visibleColumnDefinitions, resizableColumns = _a.resizableColumns, hasSelection = _a.hasSelection, children = _a.children;\n    var visibleColumns = useRef(null);\n    var _b = useState({}), columnWidths = _b[0], setColumnWidths = _b[1];\n    useEffect(function () {\n        if (!resizableColumns) {\n            return;\n        }\n        var lastVisible = visibleColumns.current;\n        if (lastVisible) {\n            var _loop_1 = function (index) {\n                var column = visibleColumnDefinitions[index];\n                var id = getColumnKey(column, index);\n                if (!columnWidths[id] && lastVisible.indexOf(column.id) === -1) {\n                    setColumnWidths(function (columnWidths) {\n                        var _a;\n                        return (__assign(__assign({}, columnWidths), (_a = {}, _a[id] = column.width || DEFAULT_WIDTH, _a)));\n                    });\n                }\n            };\n            for (var index = 0; index < visibleColumnDefinitions.length; index++) {\n                _loop_1(index);\n            }\n        }\n        visibleColumns.current = visibleColumnDefinitions.map(function (column) { return column.id; });\n    }, [columnWidths, resizableColumns, visibleColumnDefinitions]);\n    useEffect(function () {\n        if (!resizableColumns) {\n            return;\n        }\n        setColumnWidths(function () { return readWidths(tableRef.current, visibleColumnDefinitions, hasSelection); });\n    }, []);\n    function updateColumn(colIndex, newWidth) {\n        setColumnWidths(function (columnWidths) { return updateWidths(visibleColumnDefinitions, columnWidths, newWidth, colIndex); });\n    }\n    var totalWidth = visibleColumnDefinitions.reduce(function (total, column, index) { return total + (columnWidths[getColumnKey(column, index)] || DEFAULT_WIDTH); }, 0);\n    if (hasSelection) {\n        totalWidth += SELECTION_CELL_WIDTH;\n    }\n    return React.createElement(WidthsContext.Provider, { value: { columnWidths: columnWidths, totalWidth: totalWidth, updateColumn: updateColumn } }, children);\n}\nexport function useColumnWidths() {\n    return useContext(WidthsContext);\n}\n"]},"metadata":{},"sourceType":"module"}