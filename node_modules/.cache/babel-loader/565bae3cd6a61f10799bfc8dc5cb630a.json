{"ast":null,"code":"import { __assign } from \"tslib\";\nimport clsx from 'clsx';\nimport React from 'react';\nimport { Transition } from '../internal/components/transition';\nimport { Drawer } from './drawer';\nimport { SplitPanelWrapper } from './split-panel-wrapper';\nimport { ToggleButtons } from './toggle-buttons';\nimport { CircularButton } from './toggles/circular-button';\nimport styles from './styles.css.js';\nimport testutilStyles from './test-utils/styles.css.js';\nexport function ToolsAndSplitPanel(_a) {\n  var ariaLabels = _a.ariaLabels,\n      closedDrawerWidth = _a.closedDrawerWidth,\n      contentHeightStyle = _a.contentHeightStyle,\n      _b = _a.disableContentPaddings,\n      disableContentPaddings = _b === void 0 ? false : _b,\n      drawerWidth = _a.drawerWidth,\n      footerHeight = _a.footerHeight,\n      headerHeight = _a.headerHeight,\n      isHidden = _a.isHidden,\n      isMobile = _a.isMobile,\n      isMotionEnabled = _a.isMotionEnabled,\n      isRefresh = _a.isRefresh,\n      onToolsToggle = _a.onToolsToggle,\n      panelHeightStyle = _a.panelHeightStyle,\n      setSplitPanelTransitionState = _a.setSplitPanelTransitionState,\n      setToolsPanelTransitionState = _a.setToolsPanelTransitionState,\n      splitPanel = _a.splitPanel,\n      splitPanelContext = _a.splitPanelContext,\n      splitPanelReportedSize = _a.splitPanelReportedSize,\n      splitPanelTransitionState = _a.splitPanelTransitionState,\n      toggleRefs = _a.toggleRefs,\n      tools = _a.tools,\n      toolsHide = _a.toolsHide,\n      toolsOpen = _a.toolsOpen,\n      toolsPanelTransitionState = _a.toolsPanelTransitionState,\n      toolsWidth = _a.toolsWidth,\n      splitPanelOpen = _a.splitPanelOpen;\n  var splitPanelVisible = (splitPanelOpen || splitPanelTransitionState === 'exiting' && isMotionEnabled) && Boolean(splitPanel);\n  var showSideButtonsBar = isRefresh && Boolean(splitPanel);\n  var toolsVisible = !toolsHide && toolsOpen;\n  var showToolsPanelExitState = isRefresh && isMotionEnabled && (!toolsOpen && toolsPanelTransitionState === 'exiting' || toolsOpen && (toolsPanelTransitionState === 'enter' || toolsPanelTransitionState === 'exited'));\n  var showSplitPanelExitState = isRefresh && isMotionEnabled && Boolean(splitPanel) && (!splitPanelOpen && splitPanelTransitionState === 'exiting' || splitPanelOpen && (splitPanelTransitionState === 'enter' || splitPanelTransitionState === 'exited'));\n  var additionalSplitPanelMovement = toolsOpen ? 0 : closedDrawerWidth;\n  var additionalToolsPanelMovement = splitPanelOpen ? 0 : closedDrawerWidth;\n  return React.createElement(Transition, {\n    \"in\": toolsOpen,\n    onStatusChange: setToolsPanelTransitionState,\n    disabled: !isRefresh\n  }, function (_, toolsPanelTransitionRef) {\n    var _a, _b;\n\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      style: {\n        width: drawerWidth\n      }\n    }, React.createElement(\"div\", {\n      ref: toolsPanelTransitionRef,\n      className: clsx(styles['panel-wrapper-outer'], (_a = {}, _a[styles.mobile] = isMobile, _a[styles.open] = toolsOpen, _a), isRefresh && (_b = {}, _b[styles['enable-motion']] = isMotionEnabled && toolsPanelTransitionState !== 'enter' && toolsPanelTransitionState !== 'entered' && toolsPanelTransitionState !== 'exit' && toolsPanelTransitionState !== 'exited', _b[styles.refresh] = true, _b[styles.hide] = showToolsPanelExitState && !splitPanelVisible && !disableContentPaddings, _b)),\n      style: __assign(__assign({\n        right: showSideButtonsBar && (!toolsHide || !splitPanelVisible) ? closedDrawerWidth : isRefresh ? 0 : undefined\n      }, isMobile ? {\n        top: headerHeight,\n        bottom: footerHeight\n      } : panelHeightStyle), showToolsPanelExitState ? {\n        transform: isMobile ? \"translateX(100%)\" : \"translateX(\" + (toolsWidth + additionalToolsPanelMovement) + \"px)\"\n      } : {})\n    }, splitPanel && React.createElement(React.Fragment, null, !isRefresh && React.createElement(SplitPanelWrapper, {\n      context: splitPanelContext\n    }, splitPanel), isRefresh && React.createElement(Transition, {\n      \"in\": splitPanelOpen,\n      onStatusChange: setSplitPanelTransitionState\n    }, function (_, splitPanelTransitionRef) {\n      var _a;\n\n      return React.createElement(\"div\", {\n        ref: splitPanelTransitionRef,\n        className: clsx(styles['panel-wrapper-inner'], isRefresh && (_a = {}, _a[styles['enable-motion']] = isMotionEnabled && splitPanelTransitionState !== 'enter' && splitPanelTransitionState !== 'entered' && splitPanelTransitionState !== 'exit' && splitPanelTransitionState !== 'exited', _a[styles.refresh] = true, _a[styles.hide] = showSplitPanelExitState && !disableContentPaddings, _a)),\n        style: __assign(__assign({\n          transform: showSplitPanelExitState ? \"translateX(\" + (splitPanelReportedSize + additionalSplitPanelMovement) + \"px)\" : undefined\n        }, contentHeightStyle), {\n          marginRight: splitPanelVisible ? -closedDrawerWidth : 0,\n          paddingRight: splitPanelVisible ? closedDrawerWidth : 0\n        })\n      }, splitPanelVisible && React.createElement(\"div\", {\n        style: {\n          display: !splitPanelVisible ? 'none' : undefined,\n          height: '100%'\n        }\n      }, React.createElement(SplitPanelWrapper, {\n        context: splitPanelContext\n      }, splitPanel)));\n    })), !toolsHide && React.createElement(Drawer, {\n      visualRefresh: isRefresh,\n      type: \"tools\",\n      isMobile: isMobile,\n      width: toolsWidth,\n      isOpen: toolsOpen || toolsPanelTransitionState === 'exiting' && isMotionEnabled,\n      onToggle: onToolsToggle,\n      toggleRefs: toggleRefs,\n      isHidden: isHidden,\n      externalizedToggle: Boolean(splitPanel),\n      contentClassName: clsx(styles.tools, testutilStyles.tools),\n      closeClassName: clsx(styles['tools-close'], testutilStyles['tools-close']),\n      toggleClassName: clsx(styles['tools-toggle'], testutilStyles['tools-toggle']),\n      topOffset: isRefresh ? 0 : headerHeight,\n      bottomOffset: isRefresh ? 0 : footerHeight,\n      ariaLabels: ariaLabels,\n      extendRight: showSideButtonsBar && (!toolsHide || !splitPanelOpen) ? closedDrawerWidth : 0,\n      hasDividerWithSplitPanel: splitPanelVisible\n    }, tools))), showSideButtonsBar && (!toolsHide || !splitPanelOpen) && React.createElement(ToggleButtons, {\n      ariaLabels: ariaLabels,\n      anyPanelOpen: !!splitPanelVisible || toolsVisible,\n      opaqueBackground: splitPanelVisible && isMotionEnabled && (toolsPanelTransitionState === 'exiting' || toolsPanelTransitionState === 'entering'),\n      isHidden: disableContentPaddings\n    }, !toolsHide && React.createElement(CircularButton, {\n      ref: toggleRefs.toggle,\n      className: clsx(styles['tools-toggle'], testutilStyles['tools-toggle']),\n      selected: toolsOpen,\n      iconName: \"status-info\",\n      ariaLabel: ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.toolsToggle,\n      onClick: function () {\n        return onToolsToggle(!toolsOpen);\n      },\n      ariaExpanded: toolsOpen\n    }), React.createElement(SplitPanelWrapper, {\n      context: splitPanelContext,\n      isCopy: true\n    }, splitPanel)));\n  });\n}","map":{"version":3,"sources":["/Users/isingheg/Desktop/projects/test-react-amplify/node_modules/@awsui/components-react/app-layout/tools-and-split-panel.js"],"names":["__assign","clsx","React","Transition","Drawer","SplitPanelWrapper","ToggleButtons","CircularButton","styles","testutilStyles","ToolsAndSplitPanel","_a","ariaLabels","closedDrawerWidth","contentHeightStyle","_b","disableContentPaddings","drawerWidth","footerHeight","headerHeight","isHidden","isMobile","isMotionEnabled","isRefresh","onToolsToggle","panelHeightStyle","setSplitPanelTransitionState","setToolsPanelTransitionState","splitPanel","splitPanelContext","splitPanelReportedSize","splitPanelTransitionState","toggleRefs","tools","toolsHide","toolsOpen","toolsPanelTransitionState","toolsWidth","splitPanelOpen","splitPanelVisible","Boolean","showSideButtonsBar","toolsVisible","showToolsPanelExitState","showSplitPanelExitState","additionalSplitPanelMovement","additionalToolsPanelMovement","createElement","onStatusChange","disabled","_","toolsPanelTransitionRef","Fragment","style","width","ref","className","mobile","open","refresh","hide","right","undefined","top","bottom","transform","context","splitPanelTransitionRef","marginRight","paddingRight","display","height","visualRefresh","type","isOpen","onToggle","externalizedToggle","contentClassName","closeClassName","toggleClassName","topOffset","bottomOffset","extendRight","hasDividerWithSplitPanel","anyPanelOpen","opaqueBackground","toggle","selected","iconName","ariaLabel","toolsToggle","onClick","ariaExpanded","isCopy"],"mappings":"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","sourcesContent":["import { __assign } from \"tslib\";\nimport clsx from 'clsx';\nimport React from 'react';\nimport { Transition } from '../internal/components/transition';\nimport { Drawer } from './drawer';\nimport { SplitPanelWrapper } from './split-panel-wrapper';\nimport { ToggleButtons } from './toggle-buttons';\nimport { CircularButton } from './toggles/circular-button';\nimport styles from './styles.css.js';\nimport testutilStyles from './test-utils/styles.css.js';\nexport function ToolsAndSplitPanel(_a) {\n    var ariaLabels = _a.ariaLabels, closedDrawerWidth = _a.closedDrawerWidth, contentHeightStyle = _a.contentHeightStyle, _b = _a.disableContentPaddings, disableContentPaddings = _b === void 0 ? false : _b, drawerWidth = _a.drawerWidth, footerHeight = _a.footerHeight, headerHeight = _a.headerHeight, isHidden = _a.isHidden, isMobile = _a.isMobile, isMotionEnabled = _a.isMotionEnabled, isRefresh = _a.isRefresh, onToolsToggle = _a.onToolsToggle, panelHeightStyle = _a.panelHeightStyle, setSplitPanelTransitionState = _a.setSplitPanelTransitionState, setToolsPanelTransitionState = _a.setToolsPanelTransitionState, splitPanel = _a.splitPanel, splitPanelContext = _a.splitPanelContext, splitPanelReportedSize = _a.splitPanelReportedSize, splitPanelTransitionState = _a.splitPanelTransitionState, toggleRefs = _a.toggleRefs, tools = _a.tools, toolsHide = _a.toolsHide, toolsOpen = _a.toolsOpen, toolsPanelTransitionState = _a.toolsPanelTransitionState, toolsWidth = _a.toolsWidth, splitPanelOpen = _a.splitPanelOpen;\n    var splitPanelVisible = (splitPanelOpen || (splitPanelTransitionState === 'exiting' && isMotionEnabled)) && Boolean(splitPanel);\n    var showSideButtonsBar = isRefresh && Boolean(splitPanel);\n    var toolsVisible = !toolsHide && toolsOpen;\n    var showToolsPanelExitState = isRefresh &&\n        isMotionEnabled &&\n        ((!toolsOpen && toolsPanelTransitionState === 'exiting') ||\n            (toolsOpen && (toolsPanelTransitionState === 'enter' || toolsPanelTransitionState === 'exited')));\n    var showSplitPanelExitState = isRefresh &&\n        isMotionEnabled &&\n        Boolean(splitPanel) &&\n        ((!splitPanelOpen && splitPanelTransitionState === 'exiting') ||\n            (splitPanelOpen && (splitPanelTransitionState === 'enter' || splitPanelTransitionState === 'exited')));\n    var additionalSplitPanelMovement = toolsOpen ? 0 : closedDrawerWidth;\n    var additionalToolsPanelMovement = splitPanelOpen ? 0 : closedDrawerWidth;\n    return (React.createElement(Transition, { \"in\": toolsOpen, onStatusChange: setToolsPanelTransitionState, disabled: !isRefresh }, function (_, toolsPanelTransitionRef) {\n        var _a, _b;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { style: {\n                    width: drawerWidth\n                } },\n                React.createElement(\"div\", { ref: toolsPanelTransitionRef, className: clsx(styles['panel-wrapper-outer'], (_a = {},\n                        _a[styles.mobile] = isMobile,\n                        _a[styles.open] = toolsOpen,\n                        _a), isRefresh && (_b = {},\n                        _b[styles['enable-motion']] = isMotionEnabled &&\n                            toolsPanelTransitionState !== 'enter' &&\n                            toolsPanelTransitionState !== 'entered' &&\n                            toolsPanelTransitionState !== 'exit' &&\n                            toolsPanelTransitionState !== 'exited',\n                        _b[styles.refresh] = true,\n                        _b[styles.hide] = showToolsPanelExitState && !splitPanelVisible && !disableContentPaddings,\n                        _b)), style: __assign(__assign({ right: showSideButtonsBar && (!toolsHide || !splitPanelVisible)\n                            ? closedDrawerWidth\n                            : isRefresh\n                                ? 0\n                                : undefined }, (isMobile ? { top: headerHeight, bottom: footerHeight } : panelHeightStyle)), (showToolsPanelExitState\n                        ? {\n                            transform: isMobile\n                                ? \"translateX(100%)\"\n                                : \"translateX(\" + (toolsWidth + additionalToolsPanelMovement) + \"px)\"\n                        }\n                        : {})) },\n                    splitPanel && (React.createElement(React.Fragment, null,\n                        !isRefresh && React.createElement(SplitPanelWrapper, { context: splitPanelContext }, splitPanel),\n                        isRefresh && (React.createElement(Transition, { \"in\": splitPanelOpen, onStatusChange: setSplitPanelTransitionState }, function (_, splitPanelTransitionRef) {\n                            var _a;\n                            return (React.createElement(\"div\", { ref: splitPanelTransitionRef, className: clsx(styles['panel-wrapper-inner'], isRefresh && (_a = {},\n                                    _a[styles['enable-motion']] = isMotionEnabled &&\n                                        splitPanelTransitionState !== 'enter' &&\n                                        splitPanelTransitionState !== 'entered' &&\n                                        splitPanelTransitionState !== 'exit' &&\n                                        splitPanelTransitionState !== 'exited',\n                                    _a[styles.refresh] = true,\n                                    _a[styles.hide] = showSplitPanelExitState && !disableContentPaddings,\n                                    _a)), style: __assign(__assign({ transform: showSplitPanelExitState\n                                        ? \"translateX(\" + (splitPanelReportedSize + additionalSplitPanelMovement) + \"px)\"\n                                        : undefined }, contentHeightStyle), { marginRight: splitPanelVisible ? -closedDrawerWidth : 0, paddingRight: splitPanelVisible ? closedDrawerWidth : 0 }) }, splitPanelVisible && (React.createElement(\"div\", { style: {\n                                    display: !splitPanelVisible ? 'none' : undefined,\n                                    height: '100%'\n                                } },\n                                React.createElement(SplitPanelWrapper, { context: splitPanelContext }, splitPanel)))));\n                        })))),\n                    !toolsHide && (React.createElement(Drawer, { visualRefresh: isRefresh, type: \"tools\", isMobile: isMobile, width: toolsWidth, isOpen: toolsOpen || (toolsPanelTransitionState === 'exiting' && isMotionEnabled), onToggle: onToolsToggle, toggleRefs: toggleRefs, isHidden: isHidden, externalizedToggle: Boolean(splitPanel), contentClassName: clsx(styles.tools, testutilStyles.tools), closeClassName: clsx(styles['tools-close'], testutilStyles['tools-close']), toggleClassName: clsx(styles['tools-toggle'], testutilStyles['tools-toggle']), topOffset: isRefresh ? 0 : headerHeight, bottomOffset: isRefresh ? 0 : footerHeight, ariaLabels: ariaLabels, extendRight: showSideButtonsBar && (!toolsHide || !splitPanelOpen) ? closedDrawerWidth : 0, hasDividerWithSplitPanel: splitPanelVisible }, tools)))),\n            showSideButtonsBar && (!toolsHide || !splitPanelOpen) && (React.createElement(ToggleButtons, { ariaLabels: ariaLabels, anyPanelOpen: !!splitPanelVisible || toolsVisible, opaqueBackground: splitPanelVisible &&\n                    isMotionEnabled &&\n                    (toolsPanelTransitionState === 'exiting' || toolsPanelTransitionState === 'entering'), isHidden: disableContentPaddings },\n                !toolsHide && (React.createElement(CircularButton, { ref: toggleRefs.toggle, className: clsx(styles['tools-toggle'], testutilStyles['tools-toggle']), selected: toolsOpen, iconName: \"status-info\", ariaLabel: ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.toolsToggle, onClick: function () { return onToolsToggle(!toolsOpen); }, ariaExpanded: toolsOpen })),\n                React.createElement(SplitPanelWrapper, { context: splitPanelContext, isCopy: true }, splitPanel)))));\n    }));\n}\n"]},"metadata":{},"sourceType":"module"}