{"ast":null,"code":"import { __assign } from \"tslib\";\nimport React from 'react';\nimport styles from './styles.css.js';\nimport { getDaysInMonth, isAfter, isBefore, isLastDayOfMonth, isSameMonth, isToday as isTodayFn } from 'date-fns';\nimport { renderDayLabel } from '../../../../date-picker/calendar/utils/intl';\nimport clsx from 'clsx';\nimport { KeyCode } from '../../../../internal/keycode.js';\nimport { formatDate } from '../../../../date-picker/calendar/utils/date.js';\nimport useFocusVisible from '../../../../internal/hooks/focus-visible';\n\nfunction propsAreEqual(prevProps, nextProps) {\n  return prevProps.locale === nextProps.locale && prevProps.baseDate.getTime() === nextProps.baseDate.getTime() && prevProps.date.getTime() === nextProps.date.getTime() && prevProps.isDateInFirstRow === nextProps.isDateInFirstRow && prevProps.isDateInFirstColumn === nextProps.isDateInFirstColumn && prevProps.isDateInLastColumn === nextProps.isDateInLastColumn && prevProps.isDateInSelectionStartWeek === nextProps.isDateInSelectionStartWeek && prevProps.isDateInSelectionEndWeek === nextProps.isDateInSelectionEndWeek && prevProps.isFocusedDate === nextProps.isFocusedDate && prevProps.isDateEnabled === nextProps.isDateEnabled && prevProps.todayAriaLabel === nextProps.todayAriaLabel && prevProps.onSelectDate === nextProps.onSelectDate && prevProps.onFocusDate === nextProps.onFocusDate && prevProps.isInRange === nextProps.isInRange && prevProps.isSelected === nextProps.isSelected && prevProps.isStartDate === nextProps.isStartDate && prevProps.isEndDate === nextProps.isEndDate && prevProps.onlyOneSelected === nextProps.onlyOneSelected && prevProps.isRangeStartDate === nextProps.isRangeStartDate && prevProps.isRangeEndDate === nextProps.isRangeEndDate;\n}\n\nvar GridDay = React.memo(React.forwardRef(function (_a, ref) {\n  var _b, _c, _d;\n\n  var locale = _a.locale,\n      baseDate = _a.baseDate,\n      date = _a.date,\n      isSelected = _a.isSelected,\n      isStartDate = _a.isStartDate,\n      isEndDate = _a.isEndDate,\n      onlyOneSelected = _a.onlyOneSelected,\n      isRangeStartDate = _a.isRangeStartDate,\n      isRangeEndDate = _a.isRangeEndDate,\n      isFocusedDate = _a.isFocusedDate,\n      isDateEnabled = _a.isDateEnabled,\n      todayAriaLabel = _a.todayAriaLabel,\n      onSelectDate = _a.onSelectDate,\n      onFocusDate = _a.onFocusDate,\n      isDateInFirstRow = _a.isDateInFirstRow,\n      isDateInFirstColumn = _a.isDateInFirstColumn,\n      isDateInLastColumn = _a.isDateInLastColumn,\n      isDateInSelectionStartWeek = _a.isDateInSelectionStartWeek,\n      isDateInSelectionEndWeek = _a.isDateInSelectionEndWeek,\n      isInRange = _a.isInRange;\n  var dayLabel = renderDayLabel(locale, date);\n  var labels = [dayLabel];\n  var isEnabled = !isDateEnabled || isDateEnabled(date);\n  var isFocusable = isFocusedDate && isEnabled;\n  var isToday = isTodayFn(date);\n  var computedAttributes = {};\n  var focusVisible = useFocusVisible();\n  var baseClasses = (_b = {}, _b[styles['in-first-row']] = isDateInFirstRow, _b[styles['in-first-column']] = isDateInFirstColumn, _b);\n\n  if (!isSameMonth(date, baseDate)) {\n    var classNames_1 = clsx(styles.day, baseClasses, (_c = {}, _c[styles['in-previous-month']] = isBefore(date, baseDate), _c[styles['last-day-of-month']] = isLastDayOfMonth(date), _c[styles['in-next-month']] = isAfter(date, baseDate), _c));\n    return React.createElement(\"div\", {\n      className: classNames_1,\n      ref: ref\n    });\n  }\n\n  var classNames = clsx(styles.day, baseClasses, (_d = {}, _d[styles['in-current-month']] = isSameMonth(date, baseDate), _d[styles.enabled] = isEnabled, _d[styles.selected] = isSelected, _d[styles['start-date']] = isStartDate, _d[styles['end-date']] = isEndDate, _d[styles['range-start-date']] = isRangeStartDate, _d[styles['range-end-date']] = isRangeEndDate, _d[styles['no-range']] = isSelected && onlyOneSelected, _d[styles['in-range']] = isInRange, _d[styles['in-range-border-top']] = isDateInSelectionStartWeek || date.getDate() <= 7, _d[styles['in-range-border-bottom']] = isDateInSelectionEndWeek || date.getDate() > getDaysInMonth(date) - 7, _d[styles['in-range-border-left']] = isDateInFirstColumn || date.getDate() === 1 || isRangeStartDate, _d[styles['in-range-border-right']] = isDateInLastColumn || isLastDayOfMonth(date) || isRangeEndDate, _d[styles.today] = isToday, _d[styles.focusable] = isFocusable, _d));\n  computedAttributes['aria-pressed'] = isSelected || isInRange;\n\n  if (isToday) {\n    labels.push(todayAriaLabel);\n    computedAttributes['aria-current'] = 'date';\n  }\n\n  if (isEnabled) {\n    computedAttributes.onClick = function () {\n      return onSelectDate(date);\n    };\n\n    computedAttributes.onFocus = function () {\n      return onFocusDate(date);\n    };\n\n    computedAttributes.tabIndex = -1;\n  }\n\n  if (isFocusable) {\n    computedAttributes.tabIndex = 0;\n  }\n\n  var onKeyDown = function (event) {\n    if (event.keyCode === KeyCode.space) {\n      event.preventDefault();\n      onSelectDate(date);\n    }\n  };\n\n  return React.createElement(\"div\", __assign({\n    className: classNames,\n    \"aria-label\": labels.join('. '),\n    \"data-date\": formatDate(date),\n    role: \"button\"\n  }, computedAttributes, {\n    ref: ref,\n    onKeyDown: onKeyDown\n  }, focusVisible), React.createElement(\"span\", {\n    className: styles['day-inner']\n  }, date.getDate()));\n}), propsAreEqual);\nexport default GridDay;","map":{"version":3,"sources":["/Users/isingheg/Desktop/projects/test-react-amplify/node_modules/@awsui/components-react/date-range-picker/calendar/grids/day/index.js"],"names":["__assign","React","styles","getDaysInMonth","isAfter","isBefore","isLastDayOfMonth","isSameMonth","isToday","isTodayFn","renderDayLabel","clsx","KeyCode","formatDate","useFocusVisible","propsAreEqual","prevProps","nextProps","locale","baseDate","getTime","date","isDateInFirstRow","isDateInFirstColumn","isDateInLastColumn","isDateInSelectionStartWeek","isDateInSelectionEndWeek","isFocusedDate","isDateEnabled","todayAriaLabel","onSelectDate","onFocusDate","isInRange","isSelected","isStartDate","isEndDate","onlyOneSelected","isRangeStartDate","isRangeEndDate","GridDay","memo","forwardRef","_a","ref","_b","_c","_d","dayLabel","labels","isEnabled","isFocusable","computedAttributes","focusVisible","baseClasses","classNames_1","day","createElement","className","classNames","enabled","selected","getDate","today","focusable","push","onClick","onFocus","tabIndex","onKeyDown","event","keyCode","space","preventDefault","join","role"],"mappings":"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","sourcesContent":["import { __assign } from \"tslib\";\nimport React from 'react';\nimport styles from './styles.css.js';\nimport { getDaysInMonth, isAfter, isBefore, isLastDayOfMonth, isSameMonth, isToday as isTodayFn } from 'date-fns';\nimport { renderDayLabel } from '../../../../date-picker/calendar/utils/intl';\nimport clsx from 'clsx';\nimport { KeyCode } from '../../../../internal/keycode.js';\nimport { formatDate } from '../../../../date-picker/calendar/utils/date.js';\nimport useFocusVisible from '../../../../internal/hooks/focus-visible';\nfunction propsAreEqual(prevProps, nextProps) {\n    return (prevProps.locale === nextProps.locale &&\n        prevProps.baseDate.getTime() === nextProps.baseDate.getTime() &&\n        prevProps.date.getTime() === nextProps.date.getTime() &&\n        prevProps.isDateInFirstRow === nextProps.isDateInFirstRow &&\n        prevProps.isDateInFirstColumn === nextProps.isDateInFirstColumn &&\n        prevProps.isDateInLastColumn === nextProps.isDateInLastColumn &&\n        prevProps.isDateInSelectionStartWeek === nextProps.isDateInSelectionStartWeek &&\n        prevProps.isDateInSelectionEndWeek === nextProps.isDateInSelectionEndWeek &&\n        prevProps.isFocusedDate === nextProps.isFocusedDate &&\n        prevProps.isDateEnabled === nextProps.isDateEnabled &&\n        prevProps.todayAriaLabel === nextProps.todayAriaLabel &&\n        prevProps.onSelectDate === nextProps.onSelectDate &&\n        prevProps.onFocusDate === nextProps.onFocusDate &&\n        prevProps.isInRange === nextProps.isInRange &&\n        prevProps.isSelected === nextProps.isSelected &&\n        prevProps.isStartDate === nextProps.isStartDate &&\n        prevProps.isEndDate === nextProps.isEndDate &&\n        prevProps.onlyOneSelected === nextProps.onlyOneSelected &&\n        prevProps.isRangeStartDate === nextProps.isRangeStartDate &&\n        prevProps.isRangeEndDate === nextProps.isRangeEndDate);\n}\nvar GridDay = React.memo(React.forwardRef(function (_a, ref) {\n    var _b, _c, _d;\n    var locale = _a.locale, baseDate = _a.baseDate, date = _a.date, isSelected = _a.isSelected, isStartDate = _a.isStartDate, isEndDate = _a.isEndDate, onlyOneSelected = _a.onlyOneSelected, isRangeStartDate = _a.isRangeStartDate, isRangeEndDate = _a.isRangeEndDate, isFocusedDate = _a.isFocusedDate, isDateEnabled = _a.isDateEnabled, todayAriaLabel = _a.todayAriaLabel, onSelectDate = _a.onSelectDate, onFocusDate = _a.onFocusDate, isDateInFirstRow = _a.isDateInFirstRow, isDateInFirstColumn = _a.isDateInFirstColumn, isDateInLastColumn = _a.isDateInLastColumn, isDateInSelectionStartWeek = _a.isDateInSelectionStartWeek, isDateInSelectionEndWeek = _a.isDateInSelectionEndWeek, isInRange = _a.isInRange;\n    var dayLabel = renderDayLabel(locale, date);\n    var labels = [dayLabel];\n    var isEnabled = !isDateEnabled || isDateEnabled(date);\n    var isFocusable = isFocusedDate && isEnabled;\n    var isToday = isTodayFn(date);\n    var computedAttributes = {};\n    var focusVisible = useFocusVisible();\n    var baseClasses = (_b = {},\n        _b[styles['in-first-row']] = isDateInFirstRow,\n        _b[styles['in-first-column']] = isDateInFirstColumn,\n        _b);\n    if (!isSameMonth(date, baseDate)) {\n        var classNames_1 = clsx(styles.day, baseClasses, (_c = {},\n            _c[styles['in-previous-month']] = isBefore(date, baseDate),\n            _c[styles['last-day-of-month']] = isLastDayOfMonth(date),\n            _c[styles['in-next-month']] = isAfter(date, baseDate),\n            _c));\n        return React.createElement(\"div\", { className: classNames_1, ref: ref });\n    }\n    var classNames = clsx(styles.day, baseClasses, (_d = {},\n        _d[styles['in-current-month']] = isSameMonth(date, baseDate),\n        _d[styles.enabled] = isEnabled,\n        _d[styles.selected] = isSelected,\n        _d[styles['start-date']] = isStartDate,\n        _d[styles['end-date']] = isEndDate,\n        _d[styles['range-start-date']] = isRangeStartDate,\n        _d[styles['range-end-date']] = isRangeEndDate,\n        _d[styles['no-range']] = isSelected && onlyOneSelected,\n        _d[styles['in-range']] = isInRange,\n        _d[styles['in-range-border-top']] = isDateInSelectionStartWeek || date.getDate() <= 7,\n        _d[styles['in-range-border-bottom']] = isDateInSelectionEndWeek || date.getDate() > getDaysInMonth(date) - 7,\n        _d[styles['in-range-border-left']] = isDateInFirstColumn || date.getDate() === 1 || isRangeStartDate,\n        _d[styles['in-range-border-right']] = isDateInLastColumn || isLastDayOfMonth(date) || isRangeEndDate,\n        _d[styles.today] = isToday,\n        _d[styles.focusable] = isFocusable,\n        _d));\n    computedAttributes['aria-pressed'] = isSelected || isInRange;\n    if (isToday) {\n        labels.push(todayAriaLabel);\n        computedAttributes['aria-current'] = 'date';\n    }\n    if (isEnabled) {\n        computedAttributes.onClick = function () { return onSelectDate(date); };\n        computedAttributes.onFocus = function () { return onFocusDate(date); };\n        computedAttributes.tabIndex = -1;\n    }\n    if (isFocusable) {\n        computedAttributes.tabIndex = 0;\n    }\n    var onKeyDown = function (event) {\n        if (event.keyCode === KeyCode.space) {\n            event.preventDefault();\n            onSelectDate(date);\n        }\n    };\n    return (React.createElement(\"div\", __assign({ className: classNames, \"aria-label\": labels.join('. '), \"data-date\": formatDate(date), role: \"button\" }, computedAttributes, { ref: ref, onKeyDown: onKeyDown }, focusVisible),\n        React.createElement(\"span\", { className: styles['day-inner'] }, date.getDate())));\n}), propsAreEqual);\nexport default GridDay;\n"]},"metadata":{},"sourceType":"module"}