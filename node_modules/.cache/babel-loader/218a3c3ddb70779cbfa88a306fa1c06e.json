{"ast":null,"code":"import React, { useMemo } from 'react';\nimport clsx from 'clsx';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport LineSeries from './line-series';\nimport BarSeries from './bar-series';\nimport styles from './styles.css.js';\nimport { calculateOffsetMaps } from './utils';\nexport default function DataSeries(_a) {\n  var axis = _a.axis,\n      plotHeight = _a.plotHeight,\n      plotWidth = _a.plotWidth,\n      highlightedGroupIndex = _a.highlightedGroupIndex,\n      highlightedSeries = _a.highlightedSeries,\n      stackedBars = _a.stackedBars,\n      isGroupNavigation = _a.isGroupNavigation,\n      visibleSeries = _a.visibleSeries,\n      xScale = _a.xScale,\n      yScale = _a.yScale;\n  var chartAreaClipPath = useUniqueId('awsui-mixed-line-bar-chart__chart-area-');\n  var stackedBarOffsetMaps = useMemo(function () {\n    if (!stackedBars) {\n      return [];\n    }\n\n    var barData = [];\n    visibleSeries.forEach(function (_a) {\n      var series = _a.series;\n\n      if (series.type === 'bar') {\n        barData.push(series.data);\n      }\n    });\n    return calculateOffsetMaps(barData);\n  }, [visibleSeries, stackedBars]);\n  return React.createElement(React.Fragment, null, React.createElement(\"defs\", {\n    \"aria-hidden\": \"true\"\n  }, React.createElement(\"clipPath\", {\n    id: chartAreaClipPath\n  }, React.createElement(\"rect\", {\n    x: 0,\n    y: 0,\n    width: plotWidth,\n    height: plotHeight\n  }))), React.createElement(\"g\", {\n    \"aria-hidden\": isGroupNavigation ? true : undefined,\n    role: \"group\"\n  }, visibleSeries.map(function (_a, index) {\n    var _b;\n\n    var series = _a.series,\n        color = _a.color;\n    var isHighlighted = series === highlightedSeries;\n    var isDimmed = !!highlightedSeries && !isHighlighted;\n\n    switch (series.type) {\n      case 'line':\n      case 'threshold':\n        {\n          return React.createElement(\"g\", {\n            key: index,\n            role: \"group\",\n            \"aria-label\": series.title,\n            className: clsx(styles.series, styles[\"series--\" + series.type], (_b = {}, _b[styles['series--highlighted']] = isHighlighted, _b[styles['series--dimmed']] = isDimmed, _b))\n          }, React.createElement(LineSeries, {\n            axis: axis,\n            series: series,\n            color: color,\n            xScale: xScale,\n            yScale: yScale,\n            chartAreaClipPath: chartAreaClipPath\n          }));\n        }\n\n      case 'bar':\n        return React.createElement(BarSeries, {\n          key: index,\n          axis: axis,\n          series: series,\n          color: color,\n          totalSeriesCount: visibleSeries.filter(function (s) {\n            return s.series.type === 'bar';\n          }).length,\n          seriesIndex: index,\n          xScale: xScale,\n          yScale: yScale,\n          plotSize: axis === 'y' ? plotWidth : plotHeight,\n          highlighted: isHighlighted,\n          dimmed: isDimmed,\n          chartAreaClipPath: chartAreaClipPath,\n          stackedBarOffsets: stackedBarOffsetMaps[index],\n          highlightedGroupIndex: highlightedGroupIndex\n        });\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/isingheg/Desktop/projects/test-react-amplify/node_modules/@awsui/components-react/mixed-line-bar-chart/data-series.js"],"names":["React","useMemo","clsx","useUniqueId","LineSeries","BarSeries","styles","calculateOffsetMaps","DataSeries","_a","axis","plotHeight","plotWidth","highlightedGroupIndex","highlightedSeries","stackedBars","isGroupNavigation","visibleSeries","xScale","yScale","chartAreaClipPath","stackedBarOffsetMaps","barData","forEach","series","type","push","data","createElement","Fragment","id","x","y","width","height","undefined","role","map","index","_b","color","isHighlighted","isDimmed","key","title","className","totalSeriesCount","filter","s","length","seriesIndex","plotSize","highlighted","dimmed","stackedBarOffsets"],"mappings":"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","sourcesContent":["import React, { useMemo } from 'react';\nimport clsx from 'clsx';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport LineSeries from './line-series';\nimport BarSeries from './bar-series';\nimport styles from './styles.css.js';\nimport { calculateOffsetMaps } from './utils';\nexport default function DataSeries(_a) {\n    var axis = _a.axis, plotHeight = _a.plotHeight, plotWidth = _a.plotWidth, highlightedGroupIndex = _a.highlightedGroupIndex, highlightedSeries = _a.highlightedSeries, stackedBars = _a.stackedBars, isGroupNavigation = _a.isGroupNavigation, visibleSeries = _a.visibleSeries, xScale = _a.xScale, yScale = _a.yScale;\n    var chartAreaClipPath = useUniqueId('awsui-mixed-line-bar-chart__chart-area-');\n    var stackedBarOffsetMaps = useMemo(function () {\n        if (!stackedBars) {\n            return [];\n        }\n        var barData = [];\n        visibleSeries.forEach(function (_a) {\n            var series = _a.series;\n            if (series.type === 'bar') {\n                barData.push(series.data);\n            }\n        });\n        return calculateOffsetMaps(barData);\n    }, [visibleSeries, stackedBars]);\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"defs\", { \"aria-hidden\": \"true\" },\n            React.createElement(\"clipPath\", { id: chartAreaClipPath },\n                React.createElement(\"rect\", { x: 0, y: 0, width: plotWidth, height: plotHeight }))),\n        React.createElement(\"g\", { \"aria-hidden\": isGroupNavigation ? true : undefined, role: \"group\" }, visibleSeries.map(function (_a, index) {\n            var _b;\n            var series = _a.series, color = _a.color;\n            var isHighlighted = series === highlightedSeries;\n            var isDimmed = !!highlightedSeries && !isHighlighted;\n            switch (series.type) {\n                case 'line':\n                case 'threshold': {\n                    return (React.createElement(\"g\", { key: index, role: \"group\", \"aria-label\": series.title, className: clsx(styles.series, styles[\"series--\" + series.type], (_b = {},\n                            _b[styles['series--highlighted']] = isHighlighted,\n                            _b[styles['series--dimmed']] = isDimmed,\n                            _b)) },\n                        React.createElement(LineSeries, { axis: axis, series: series, color: color, xScale: xScale, yScale: yScale, chartAreaClipPath: chartAreaClipPath })));\n                }\n                case 'bar':\n                    return (React.createElement(BarSeries, { key: index, axis: axis, series: series, color: color, totalSeriesCount: visibleSeries.filter(function (s) { return s.series.type === 'bar'; }).length, seriesIndex: index, xScale: xScale, yScale: yScale, plotSize: axis === 'y' ? plotWidth : plotHeight, highlighted: isHighlighted, dimmed: isDimmed, chartAreaClipPath: chartAreaClipPath, stackedBarOffsets: stackedBarOffsetMaps[index], highlightedGroupIndex: highlightedGroupIndex }));\n            }\n        }))));\n}\n"]},"metadata":{},"sourceType":"module"}