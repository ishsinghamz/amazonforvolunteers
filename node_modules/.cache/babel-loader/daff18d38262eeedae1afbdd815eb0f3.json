{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport React, { createContext, createRef, useCallback, useEffect, useLayoutEffect, useImperativeHandle, useRef, useState } from 'react';\nimport { fireNonCancelableEvent } from '../../internal/events';\nimport { getSplitPanelDefaultSize, getSplitPanelPosition } from './split-panel';\nimport { useControllable } from '../../internal/hooks/use-controllable';\nimport { useMobile } from '../../internal/hooks/use-mobile';\nimport { useContainerQuery } from '../../internal/hooks/container-queries';\nimport styles from './styles.css.js';\nimport { isDevelopment } from '../../internal/is-development';\nimport { warnOnce } from '../../internal/logging';\nimport { applyDefaults } from '../defaults';\nvar defaults = {\n  breadcrumbs: null,\n  content: null,\n  contentHeader: null,\n  contentType: 'default',\n  disableBodyScroll: false,\n  disableContentHeaderOverlap: false,\n  disableContentPaddings: false,\n  footerSelector: '#b #f',\n  handleNavigationClick: function (value) {\n    return value;\n  },\n  handleSplitPanelClick: function () {},\n  handleSplitPanelPreferencesChange: function () {},\n  handleSplitPanelResize: function () {},\n  handleToolsClick: function (value) {\n    return value;\n  },\n  hasDefaultToolsWidth: true,\n  hasNotificationsContent: false,\n  headerSelector: '#b #h',\n  isAnyPanelOpen: false,\n  isMobile: false,\n  isNavigationOpen: false,\n  isSplitPanelForcedPosition: false,\n  isSplitPanelOpen: false,\n  isOverlapDisabled: false,\n  isToolsOpen: false,\n  layoutElement: createRef(),\n  layoutWidth: 0,\n  mainElement: createRef(),\n  mainOffsetLeft: 0,\n  maxContentWidth: 0,\n  minContentWidth: 280,\n  navigation: null,\n  navigationHide: false,\n  navigationOpen: false,\n  notifications: null,\n  notificationsElement: createRef(),\n  notificationsHeight: 0,\n  onNavigationChange: function () {},\n  onSplitPanelResize: function () {},\n  onSplitPanelToggle: function () {},\n  onSplitPanelPreferencesChange: function () {},\n  setIsNavigationOpen: function (value) {\n    return value;\n  },\n  setIsToolsOpen: function (value) {\n    return value;\n  },\n  setSplitPanelReportedSize: function (value) {\n    return void value;\n  },\n  splitPanelMaxWidth: 280,\n  splitPanelMinWidth: 280,\n  splitPanelOpen: false,\n  splitPanelPosition: 'bottom',\n  splitPanelPreferences: {\n    position: 'bottom'\n  },\n  splitPanelReportedSize: 0,\n  splitPanelSize: 0,\n  stickyNotifications: false,\n  tools: null\n};\nexport var AppLayoutContext = createContext(__assign({}, defaults));\nexport var AppLayoutProvider = React.forwardRef(function (_a, forwardRef) {\n  var _b, _c, _d;\n\n  var toolsHide = _a.toolsHide,\n      controlledToolsOpen = _a.toolsOpen,\n      navigationHide = _a.navigationHide,\n      controlledNavigationOpen = _a.navigationOpen,\n      _e = _a.contentType,\n      contentType = _e === void 0 ? 'default' : _e,\n      children = _a.children,\n      props = __rest(_a, [\"toolsHide\", \"toolsOpen\", \"navigationHide\", \"navigationOpen\", \"contentType\", \"children\"]);\n\n  var isMobile = useMobile();\n\n  if (isDevelopment) {\n    if (controlledToolsOpen && toolsHide) {\n      warnOnce('AppLayout', \"You have enabled both the `toolsOpen` prop and the `toolsHide` prop. This is not supported. Set `toolsOpen` to `false` when you set `toolsHide` to `true`.\");\n    }\n  }\n\n  var isOverlapDisabled = !props.contentHeader || props.disableContentHeaderOverlap === true;\n  var maxContentWidth = (_b = props.maxContentWidth) !== null && _b !== void 0 ? _b : 0;\n  var minContentWidth = (_c = props.minContentWidth) !== null && _c !== void 0 ? _c : 280;\n  var contentTypeDefaults = applyDefaults(contentType, {\n    maxContentWidth: maxContentWidth,\n    minContentWidth: minContentWidth\n  }, true);\n\n  var _f = useControllable(controlledNavigationOpen, props.onNavigationChange, isMobile ? false : contentTypeDefaults.navigationOpen, {\n    componentName: 'AppLayout',\n    controlledProp: 'navigationOpen',\n    changeHandler: 'onNavigationChange'\n  }),\n      _g = _f[0],\n      isNavigationOpen = _g === void 0 ? false : _g,\n      setIsNavigationOpen = _f[1];\n\n  var handleNavigationClick = useCallback(function handleNavigationChange(isOpen) {\n    setIsNavigationOpen(isOpen);\n    fireNonCancelableEvent(props.onNavigationChange, {\n      open: isOpen\n    });\n  }, [props.onNavigationChange, setIsNavigationOpen]);\n  var toolsWidth = (_d = props.toolsWidth) !== null && _d !== void 0 ? _d : 290;\n  var hasDefaultToolsWidth = props.toolsWidth === undefined;\n\n  var _h = useControllable(controlledToolsOpen, props.onToolsChange, isMobile ? false : contentTypeDefaults.toolsOpen, {\n    componentName: 'AppLayout',\n    controlledProp: 'toolsOpen',\n    changeHandler: 'onToolsChange'\n  }),\n      _j = _h[0],\n      isToolsOpen = _j === void 0 ? false : _j,\n      setIsToolsOpen = _h[1];\n\n  var handleToolsClick = useCallback(function handleToolsChange(isOpen) {\n    setIsToolsOpen(isOpen);\n    fireNonCancelableEvent(props.onToolsChange, {\n      open: isOpen\n    });\n  }, [props.onToolsChange, setIsToolsOpen]);\n  var navigationVisible = !navigationHide && isNavigationOpen;\n  var toolsVisible = !toolsHide && isToolsOpen;\n  var isAnyPanelOpen = navigationVisible || toolsVisible;\n  useEffect(function handleBodyScroll() {\n    if (isMobile && (isNavigationOpen || isToolsOpen)) {\n      document.body.classList.add(styles['block-body-scroll']);\n    } else {\n      document.body.classList.remove(styles['block-body-scroll']);\n    }\n\n    return function cleanup() {\n      document.body.classList.remove(styles['block-body-scroll']);\n    };\n  }, [isMobile, isNavigationOpen, isToolsOpen]);\n  useImperativeHandle(forwardRef, function createImperativeHandle() {\n    return {\n      closeNavigationIfNecessary: function () {\n        isMobile && handleNavigationClick(false);\n      },\n      openTools: function () {\n        handleToolsClick(true);\n      }\n    };\n  }, [isMobile, handleNavigationClick, handleToolsClick]);\n  var splitPanelMinWidth = 280;\n\n  var _k = useState(splitPanelMinWidth),\n      splitPanelMaxWidth = _k[0],\n      setSplitPanelMaxWidth = _k[1];\n\n  var _l = useControllable(props.splitPanelOpen, props.onSplitPanelToggle, false, {\n    componentName: 'AppLayout',\n    controlledProp: 'splitPanelOpen',\n    changeHandler: 'onSplitPanelToggle'\n  }),\n      isSplitPanelOpen = _l[0],\n      setIsSplitPanelOpen = _l[1];\n\n  var handleSplitPanelClick = useCallback(function handleSplitPanelChange() {\n    setIsSplitPanelOpen(!isSplitPanelOpen);\n    fireNonCancelableEvent(props.onSplitPanelToggle, {\n      open: !isSplitPanelOpen\n    });\n  }, [props.onSplitPanelToggle, isSplitPanelOpen, setIsSplitPanelOpen]);\n\n  var _m = useControllable(props.splitPanelPreferences, props.onSplitPanelPreferencesChange, undefined, {\n    componentName: 'AppLayout',\n    controlledProp: 'splitPanelPreferences',\n    changeHandler: 'onSplitPanelPreferencesChange'\n  }),\n      splitPanelPreferences = _m[0],\n      setSplitPanelPreferences = _m[1];\n\n  var _o = useState(false),\n      isSplitPanelForcedPosition = _o[0],\n      setSplitPanelForcedPosition = _o[1];\n\n  var splitPanelPosition = getSplitPanelPosition(isSplitPanelForcedPosition, splitPanelPreferences);\n  useLayoutEffect(function handleSplitPanelForcePosition() {\n    setSplitPanelForcedPosition(splitPanelMinWidth > splitPanelMaxWidth);\n  }, [splitPanelMaxWidth, splitPanelMinWidth]);\n\n  var _p = useState(0),\n      splitPanelReportedSize = _p[0],\n      setSplitPanelReportedSize = _p[1];\n\n  var _q = useControllable(props.splitPanelSize, props.onSplitPanelResize, getSplitPanelDefaultSize(splitPanelPosition), {\n    componentName: 'AppLayout',\n    controlledProp: 'splitPanelSize',\n    changeHandler: 'onSplitPanelResize'\n  }),\n      splitPanelSize = _q[0],\n      setSplitPanelSize = _q[1];\n\n  var handleSplitPanelResize = useCallback(function handleSplitPanelChange(detail) {\n    setSplitPanelSize(detail.size);\n    fireNonCancelableEvent(props.onSplitPanelResize, detail);\n  }, [props.onSplitPanelResize, setSplitPanelSize]);\n  var handleSplitPanelPreferencesChange = useCallback(function handleSplitPanelChange(detail) {\n    setSplitPanelPreferences(detail);\n    fireNonCancelableEvent(props.onSplitPanelPreferencesChange, detail);\n  }, [props.onSplitPanelPreferencesChange, setSplitPanelPreferences]);\n\n  var _r = useContainerQuery(function (rect) {\n    return rect.width;\n  }),\n      layoutContainerQuery = _r[0],\n      layoutElement = _r[1];\n\n  var layoutWidth = layoutContainerQuery !== null && layoutContainerQuery !== void 0 ? layoutContainerQuery : 0;\n  var mainElement = useRef(null);\n\n  var _s = useState(0),\n      mainOffsetLeft = _s[0],\n      setMainOffsetLeft = _s[1];\n\n  useLayoutEffect(function handleMainOffsetLeft() {\n    var _a, _b;\n\n    setMainOffsetLeft((_b = (_a = mainElement === null || mainElement === void 0 ? void 0 : mainElement.current) === null || _a === void 0 ? void 0 : _a.offsetLeft) !== null && _b !== void 0 ? _b : 0);\n  }, [layoutWidth, isNavigationOpen, isToolsOpen, splitPanelReportedSize]);\n  useLayoutEffect(function handleSplitPanelMaxWidth() {\n    var contentGapRight = 80;\n    var toolsFormOffsetWidth = 160;\n    var toolsOffsetWidth = isToolsOpen ? toolsWidth : 0;\n    setSplitPanelMaxWidth(layoutWidth - mainOffsetLeft - minContentWidth - contentGapRight - toolsOffsetWidth - toolsFormOffsetWidth);\n  }, [isNavigationOpen, isToolsOpen, layoutWidth, mainOffsetLeft, minContentWidth, toolsWidth]);\n\n  var _t = useContainerQuery(function (rect) {\n    return rect.height;\n  }),\n      notificationsContainerQuery = _t[0],\n      notificationsElement = _t[1];\n\n  var _u = useState(0),\n      notificationsHeight = _u[0],\n      setNotificationsHeight = _u[1];\n\n  var _v = useState(false),\n      hasNotificationsContent = _v[0],\n      setHasNotificationsContent = _v[1];\n\n  useEffect(function handleNotificationsContent() {\n    setNotificationsHeight(notificationsContainerQuery !== null && notificationsContainerQuery !== void 0 ? notificationsContainerQuery : 0);\n    setHasNotificationsContent(notificationsContainerQuery && notificationsContainerQuery > 0 ? true : false);\n  }, [notificationsContainerQuery]);\n  return React.createElement(AppLayoutContext.Provider, {\n    value: __assign(__assign(__assign({}, defaults), props), {\n      contentType: contentType,\n      hasDefaultToolsWidth: hasDefaultToolsWidth,\n      handleNavigationClick: handleNavigationClick,\n      handleSplitPanelClick: handleSplitPanelClick,\n      handleSplitPanelPreferencesChange: handleSplitPanelPreferencesChange,\n      handleSplitPanelResize: handleSplitPanelResize,\n      handleToolsClick: handleToolsClick,\n      hasNotificationsContent: hasNotificationsContent,\n      isAnyPanelOpen: isAnyPanelOpen,\n      isMobile: isMobile,\n      isNavigationOpen: isNavigationOpen !== null && isNavigationOpen !== void 0 ? isNavigationOpen : false,\n      isOverlapDisabled: isOverlapDisabled,\n      isSplitPanelForcedPosition: isSplitPanelForcedPosition,\n      isSplitPanelOpen: isSplitPanelOpen,\n      isToolsOpen: isToolsOpen,\n      layoutElement: layoutElement,\n      layoutWidth: layoutWidth,\n      mainElement: mainElement,\n      mainOffsetLeft: mainOffsetLeft,\n      maxContentWidth: maxContentWidth,\n      minContentWidth: minContentWidth,\n      navigationHide: navigationHide,\n      notificationsElement: notificationsElement,\n      notificationsHeight: notificationsHeight,\n      setSplitPanelReportedSize: setSplitPanelReportedSize,\n      splitPanelMaxWidth: splitPanelMaxWidth,\n      splitPanelMinWidth: splitPanelMinWidth,\n      splitPanelPosition: splitPanelPosition,\n      splitPanelPreferences: splitPanelPreferences,\n      splitPanelReportedSize: splitPanelReportedSize,\n      splitPanelSize: splitPanelSize,\n      toolsHide: toolsHide,\n      toolsOpen: isToolsOpen,\n      toolsWidth: toolsWidth\n    })\n  }, children);\n});","map":{"version":3,"sources":["/Users/isingheg/Desktop/projects/test-react-amplify/node_modules/@awsui/components-react/app-layout/visual-refresh/context.js"],"names":["__assign","__rest","React","createContext","createRef","useCallback","useEffect","useLayoutEffect","useImperativeHandle","useRef","useState","fireNonCancelableEvent","getSplitPanelDefaultSize","getSplitPanelPosition","useControllable","useMobile","useContainerQuery","styles","isDevelopment","warnOnce","applyDefaults","defaults","breadcrumbs","content","contentHeader","contentType","disableBodyScroll","disableContentHeaderOverlap","disableContentPaddings","footerSelector","handleNavigationClick","value","handleSplitPanelClick","handleSplitPanelPreferencesChange","handleSplitPanelResize","handleToolsClick","hasDefaultToolsWidth","hasNotificationsContent","headerSelector","isAnyPanelOpen","isMobile","isNavigationOpen","isSplitPanelForcedPosition","isSplitPanelOpen","isOverlapDisabled","isToolsOpen","layoutElement","layoutWidth","mainElement","mainOffsetLeft","maxContentWidth","minContentWidth","navigation","navigationHide","navigationOpen","notifications","notificationsElement","notificationsHeight","onNavigationChange","onSplitPanelResize","onSplitPanelToggle","onSplitPanelPreferencesChange","setIsNavigationOpen","setIsToolsOpen","setSplitPanelReportedSize","splitPanelMaxWidth","splitPanelMinWidth","splitPanelOpen","splitPanelPosition","splitPanelPreferences","position","splitPanelReportedSize","splitPanelSize","stickyNotifications","tools","AppLayoutContext","AppLayoutProvider","forwardRef","_a","_b","_c","_d","toolsHide","controlledToolsOpen","toolsOpen","controlledNavigationOpen","_e","children","props","contentTypeDefaults","_f","componentName","controlledProp","changeHandler","_g","handleNavigationChange","isOpen","open","toolsWidth","undefined","_h","onToolsChange","_j","handleToolsChange","navigationVisible","toolsVisible","handleBodyScroll","document","body","classList","add","remove","cleanup","createImperativeHandle","closeNavigationIfNecessary","openTools","_k","setSplitPanelMaxWidth","_l","setIsSplitPanelOpen","handleSplitPanelChange","_m","setSplitPanelPreferences","_o","setSplitPanelForcedPosition","handleSplitPanelForcePosition","_p","_q","setSplitPanelSize","detail","size","_r","rect","width","layoutContainerQuery","_s","setMainOffsetLeft","handleMainOffsetLeft","current","offsetLeft","handleSplitPanelMaxWidth","contentGapRight","toolsFormOffsetWidth","toolsOffsetWidth","_t","height","notificationsContainerQuery","_u","setNotificationsHeight","_v","setHasNotificationsContent","handleNotificationsContent","createElement","Provider"],"mappings":"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","sourcesContent":["import { __assign, __rest } from \"tslib\";\nimport React, { createContext, createRef, useCallback, useEffect, useLayoutEffect, useImperativeHandle, useRef, useState, } from 'react';\nimport { fireNonCancelableEvent } from '../../internal/events';\nimport { getSplitPanelDefaultSize, getSplitPanelPosition } from './split-panel';\nimport { useControllable } from '../../internal/hooks/use-controllable';\nimport { useMobile } from '../../internal/hooks/use-mobile';\nimport { useContainerQuery } from '../../internal/hooks/container-queries';\nimport styles from './styles.css.js';\nimport { isDevelopment } from '../../internal/is-development';\nimport { warnOnce } from '../../internal/logging';\nimport { applyDefaults } from '../defaults';\nvar defaults = {\n    breadcrumbs: null,\n    content: null,\n    contentHeader: null,\n    contentType: 'default',\n    disableBodyScroll: false,\n    disableContentHeaderOverlap: false,\n    disableContentPaddings: false,\n    footerSelector: '#b #f',\n    handleNavigationClick: function (value) { return value; },\n    handleSplitPanelClick: function () { },\n    handleSplitPanelPreferencesChange: function () { },\n    handleSplitPanelResize: function () { },\n    handleToolsClick: function (value) { return value; },\n    hasDefaultToolsWidth: true,\n    hasNotificationsContent: false,\n    headerSelector: '#b #h',\n    isAnyPanelOpen: false,\n    isMobile: false,\n    isNavigationOpen: false,\n    isSplitPanelForcedPosition: false,\n    isSplitPanelOpen: false,\n    isOverlapDisabled: false,\n    isToolsOpen: false,\n    layoutElement: createRef(),\n    layoutWidth: 0,\n    mainElement: createRef(),\n    mainOffsetLeft: 0,\n    maxContentWidth: 0,\n    minContentWidth: 280,\n    navigation: null,\n    navigationHide: false,\n    navigationOpen: false,\n    notifications: null,\n    notificationsElement: createRef(),\n    notificationsHeight: 0,\n    onNavigationChange: function () { },\n    onSplitPanelResize: function () { },\n    onSplitPanelToggle: function () { },\n    onSplitPanelPreferencesChange: function () { },\n    setIsNavigationOpen: function (value) { return value; },\n    setIsToolsOpen: function (value) { return value; },\n    setSplitPanelReportedSize: function (value) { return void value; },\n    splitPanelMaxWidth: 280,\n    splitPanelMinWidth: 280,\n    splitPanelOpen: false,\n    splitPanelPosition: 'bottom',\n    splitPanelPreferences: { position: 'bottom' },\n    splitPanelReportedSize: 0,\n    splitPanelSize: 0,\n    stickyNotifications: false,\n    tools: null\n};\nexport var AppLayoutContext = createContext(__assign({}, defaults));\nexport var AppLayoutProvider = React.forwardRef(function (_a, forwardRef) {\n    var _b, _c, _d;\n    var toolsHide = _a.toolsHide, controlledToolsOpen = _a.toolsOpen, navigationHide = _a.navigationHide, controlledNavigationOpen = _a.navigationOpen, _e = _a.contentType, contentType = _e === void 0 ? 'default' : _e, children = _a.children, props = __rest(_a, [\"toolsHide\", \"toolsOpen\", \"navigationHide\", \"navigationOpen\", \"contentType\", \"children\"]);\n    var isMobile = useMobile();\n    if (isDevelopment) {\n        if (controlledToolsOpen && toolsHide) {\n            warnOnce('AppLayout', \"You have enabled both the `toolsOpen` prop and the `toolsHide` prop. This is not supported. Set `toolsOpen` to `false` when you set `toolsHide` to `true`.\");\n        }\n    }\n    var isOverlapDisabled = !props.contentHeader || props.disableContentHeaderOverlap === true;\n    var maxContentWidth = (_b = props.maxContentWidth) !== null && _b !== void 0 ? _b : 0;\n    var minContentWidth = (_c = props.minContentWidth) !== null && _c !== void 0 ? _c : 280;\n    var contentTypeDefaults = applyDefaults(contentType, { maxContentWidth: maxContentWidth, minContentWidth: minContentWidth }, true);\n    var _f = useControllable(controlledNavigationOpen, props.onNavigationChange, isMobile ? false : contentTypeDefaults.navigationOpen, { componentName: 'AppLayout', controlledProp: 'navigationOpen', changeHandler: 'onNavigationChange' }), _g = _f[0], isNavigationOpen = _g === void 0 ? false : _g, setIsNavigationOpen = _f[1];\n    var handleNavigationClick = useCallback(function handleNavigationChange(isOpen) {\n        setIsNavigationOpen(isOpen);\n        fireNonCancelableEvent(props.onNavigationChange, { open: isOpen });\n    }, [props.onNavigationChange, setIsNavigationOpen]);\n    var toolsWidth = (_d = props.toolsWidth) !== null && _d !== void 0 ? _d : 290;\n    var hasDefaultToolsWidth = props.toolsWidth === undefined;\n    var _h = useControllable(controlledToolsOpen, props.onToolsChange, isMobile ? false : contentTypeDefaults.toolsOpen, { componentName: 'AppLayout', controlledProp: 'toolsOpen', changeHandler: 'onToolsChange' }), _j = _h[0], isToolsOpen = _j === void 0 ? false : _j, setIsToolsOpen = _h[1];\n    var handleToolsClick = useCallback(function handleToolsChange(isOpen) {\n        setIsToolsOpen(isOpen);\n        fireNonCancelableEvent(props.onToolsChange, { open: isOpen });\n    }, [props.onToolsChange, setIsToolsOpen]);\n    var navigationVisible = !navigationHide && isNavigationOpen;\n    var toolsVisible = !toolsHide && isToolsOpen;\n    var isAnyPanelOpen = navigationVisible || toolsVisible;\n    useEffect(function handleBodyScroll() {\n        if (isMobile && (isNavigationOpen || isToolsOpen)) {\n            document.body.classList.add(styles['block-body-scroll']);\n        }\n        else {\n            document.body.classList.remove(styles['block-body-scroll']);\n        }\n        return function cleanup() {\n            document.body.classList.remove(styles['block-body-scroll']);\n        };\n    }, [isMobile, isNavigationOpen, isToolsOpen]);\n    useImperativeHandle(forwardRef, function createImperativeHandle() {\n        return {\n            closeNavigationIfNecessary: function () {\n                isMobile && handleNavigationClick(false);\n            },\n            openTools: function () {\n                handleToolsClick(true);\n            }\n        };\n    }, [isMobile, handleNavigationClick, handleToolsClick]);\n    var splitPanelMinWidth = 280;\n    var _k = useState(splitPanelMinWidth), splitPanelMaxWidth = _k[0], setSplitPanelMaxWidth = _k[1];\n    var _l = useControllable(props.splitPanelOpen, props.onSplitPanelToggle, false, { componentName: 'AppLayout', controlledProp: 'splitPanelOpen', changeHandler: 'onSplitPanelToggle' }), isSplitPanelOpen = _l[0], setIsSplitPanelOpen = _l[1];\n    var handleSplitPanelClick = useCallback(function handleSplitPanelChange() {\n        setIsSplitPanelOpen(!isSplitPanelOpen);\n        fireNonCancelableEvent(props.onSplitPanelToggle, { open: !isSplitPanelOpen });\n    }, [props.onSplitPanelToggle, isSplitPanelOpen, setIsSplitPanelOpen]);\n    var _m = useControllable(props.splitPanelPreferences, props.onSplitPanelPreferencesChange, undefined, {\n        componentName: 'AppLayout',\n        controlledProp: 'splitPanelPreferences',\n        changeHandler: 'onSplitPanelPreferencesChange'\n    }), splitPanelPreferences = _m[0], setSplitPanelPreferences = _m[1];\n    var _o = useState(false), isSplitPanelForcedPosition = _o[0], setSplitPanelForcedPosition = _o[1];\n    var splitPanelPosition = getSplitPanelPosition(isSplitPanelForcedPosition, splitPanelPreferences);\n    useLayoutEffect(function handleSplitPanelForcePosition() {\n        setSplitPanelForcedPosition(splitPanelMinWidth > splitPanelMaxWidth);\n    }, [splitPanelMaxWidth, splitPanelMinWidth]);\n    var _p = useState(0), splitPanelReportedSize = _p[0], setSplitPanelReportedSize = _p[1];\n    var _q = useControllable(props.splitPanelSize, props.onSplitPanelResize, getSplitPanelDefaultSize(splitPanelPosition), { componentName: 'AppLayout', controlledProp: 'splitPanelSize', changeHandler: 'onSplitPanelResize' }), splitPanelSize = _q[0], setSplitPanelSize = _q[1];\n    var handleSplitPanelResize = useCallback(function handleSplitPanelChange(detail) {\n        setSplitPanelSize(detail.size);\n        fireNonCancelableEvent(props.onSplitPanelResize, detail);\n    }, [props.onSplitPanelResize, setSplitPanelSize]);\n    var handleSplitPanelPreferencesChange = useCallback(function handleSplitPanelChange(detail) {\n        setSplitPanelPreferences(detail);\n        fireNonCancelableEvent(props.onSplitPanelPreferencesChange, detail);\n    }, [props.onSplitPanelPreferencesChange, setSplitPanelPreferences]);\n    var _r = useContainerQuery(function (rect) { return rect.width; }), layoutContainerQuery = _r[0], layoutElement = _r[1];\n    var layoutWidth = layoutContainerQuery !== null && layoutContainerQuery !== void 0 ? layoutContainerQuery : 0;\n    var mainElement = useRef(null);\n    var _s = useState(0), mainOffsetLeft = _s[0], setMainOffsetLeft = _s[1];\n    useLayoutEffect(function handleMainOffsetLeft() {\n        var _a, _b;\n        setMainOffsetLeft((_b = (_a = mainElement === null || mainElement === void 0 ? void 0 : mainElement.current) === null || _a === void 0 ? void 0 : _a.offsetLeft) !== null && _b !== void 0 ? _b : 0);\n    }, [layoutWidth, isNavigationOpen, isToolsOpen, splitPanelReportedSize]);\n    useLayoutEffect(function handleSplitPanelMaxWidth() {\n        var contentGapRight = 80;\n        var toolsFormOffsetWidth = 160;\n        var toolsOffsetWidth = isToolsOpen ? toolsWidth : 0;\n        setSplitPanelMaxWidth(layoutWidth - mainOffsetLeft - minContentWidth - contentGapRight - toolsOffsetWidth - toolsFormOffsetWidth);\n    }, [isNavigationOpen, isToolsOpen, layoutWidth, mainOffsetLeft, minContentWidth, toolsWidth]);\n    var _t = useContainerQuery(function (rect) { return rect.height; }), notificationsContainerQuery = _t[0], notificationsElement = _t[1];\n    var _u = useState(0), notificationsHeight = _u[0], setNotificationsHeight = _u[1];\n    var _v = useState(false), hasNotificationsContent = _v[0], setHasNotificationsContent = _v[1];\n    useEffect(function handleNotificationsContent() {\n        setNotificationsHeight(notificationsContainerQuery !== null && notificationsContainerQuery !== void 0 ? notificationsContainerQuery : 0);\n        setHasNotificationsContent(notificationsContainerQuery && notificationsContainerQuery > 0 ? true : false);\n    }, [notificationsContainerQuery]);\n    return (React.createElement(AppLayoutContext.Provider, { value: __assign(__assign(__assign({}, defaults), props), { contentType: contentType, hasDefaultToolsWidth: hasDefaultToolsWidth, handleNavigationClick: handleNavigationClick, handleSplitPanelClick: handleSplitPanelClick, handleSplitPanelPreferencesChange: handleSplitPanelPreferencesChange, handleSplitPanelResize: handleSplitPanelResize, handleToolsClick: handleToolsClick, hasNotificationsContent: hasNotificationsContent, isAnyPanelOpen: isAnyPanelOpen, isMobile: isMobile, isNavigationOpen: isNavigationOpen !== null && isNavigationOpen !== void 0 ? isNavigationOpen : false, isOverlapDisabled: isOverlapDisabled, isSplitPanelForcedPosition: isSplitPanelForcedPosition, isSplitPanelOpen: isSplitPanelOpen, isToolsOpen: isToolsOpen, layoutElement: layoutElement, layoutWidth: layoutWidth, mainElement: mainElement, mainOffsetLeft: mainOffsetLeft, maxContentWidth: maxContentWidth, minContentWidth: minContentWidth, navigationHide: navigationHide, notificationsElement: notificationsElement, notificationsHeight: notificationsHeight, setSplitPanelReportedSize: setSplitPanelReportedSize, splitPanelMaxWidth: splitPanelMaxWidth, splitPanelMinWidth: splitPanelMinWidth, splitPanelPosition: splitPanelPosition, splitPanelPreferences: splitPanelPreferences, splitPanelReportedSize: splitPanelReportedSize, splitPanelSize: splitPanelSize, toolsHide: toolsHide, toolsOpen: isToolsOpen, toolsWidth: toolsWidth }) }, children));\n});\n"]},"metadata":{},"sourceType":"module"}