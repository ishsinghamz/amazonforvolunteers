{"ast":null,"code":"import { padLeftZeros } from '../internal/components/masked-input/utils/strings';\nimport { addMinutes } from 'date-fns';\nimport { formatTime, formatDate } from '../date-picker/calendar/utils/date';\nimport { warnOnce } from '../internal/logging';\nexport function getBrowserTimezoneOffset() {\n  return 0 - new Date().getTimezoneOffset();\n}\nexport function setTimeOffset(value, timeOffsetInMinutes) {\n  if (!((value === null || value === void 0 ? void 0 : value.type) === 'absolute')) {\n    return value;\n  }\n\n  var offsetSuffix = formatOffset(timeOffsetInMinutes);\n  var startDate = value.startDate,\n      endDate = value.endDate;\n  return {\n    type: 'absolute',\n    startDate: startDate + offsetSuffix,\n    endDate: endDate + offsetSuffix\n  };\n}\nexport function formatOffset(offsetInMinutes) {\n  var hoursOffset = padLeftZeros(Math.floor(Math.abs(offsetInMinutes) / 60).toFixed(0), 2);\n  var minuteOffset = padLeftZeros(Math.abs(offsetInMinutes % 60).toFixed(0), 2);\n  var sign = offsetInMinutes < 0 ? '-' : '+';\n  var offsetSuffix = \"\" + sign + hoursOffset + \":\" + minuteOffset;\n  return offsetSuffix;\n}\nexport function shiftTimeOffset(value, timeOffsetInMinutes) {\n  if (!value || value.type !== 'absolute') {\n    return value;\n  }\n\n  var dateTimeRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}(:\\d{2})?(\\.\\d{1,3})?(((\\+|-)\\d{2}(:\\d{2})?)|Z)?$/;\n\n  if (!dateTimeRegex.test(value.startDate) || !dateTimeRegex.test(value.endDate)) {\n    warnOnce('DateRangePicker', 'You have provided a misformatted start or end date. The component will fall back to an empty value. ' + 'Dates have to be ISO8601-formatted with an optional time zone offset.');\n    return null;\n  }\n\n  return {\n    type: 'absolute',\n    startDate: doShiftTimeOffset(value.startDate, timeOffsetInMinutes),\n    endDate: doShiftTimeOffset(value.endDate, timeOffsetInMinutes)\n  };\n}\n\nfunction doShiftTimeOffset(value, targetOffsetInMinutes) {\n  var _a = splitOffset(value),\n      valueWithoutOffset = _a[0],\n      offsetInMinutes = _a[1];\n\n  var differenceBetweenValueAndTarget = targetOffsetInMinutes - offsetInMinutes;\n  var date = new Date(valueWithoutOffset);\n  var adjustedDate = addMinutes(date, differenceBetweenValueAndTarget);\n  var formattedDate = formatDate(adjustedDate);\n  var formattedTime = formatTime(adjustedDate);\n  return formattedDate + \"T\" + formattedTime;\n}\n\nfunction splitOffset(value) {\n  var _a = value.split('T'),\n      datePart = _a[0],\n      timePart = _a[1];\n\n  var _b = timePart.split(/(-|\\+)/),\n      time = _b[0],\n      signCharacter = _b[1],\n      offsetPart = _b[2];\n\n  if (signCharacter && offsetPart) {\n    var _c = offsetPart.split(':'),\n        offsetHours = _c[0],\n        offsetMinutes = _c[1];\n\n    var offset = Number(offsetHours) * 60 + Number(offsetMinutes);\n    var sign = signCharacter === '-' ? -1 : 1;\n    return [datePart + \"T\" + time, offset * sign];\n  }\n\n  var utcTimezoneIndicator = value.indexOf('Z');\n\n  if (utcTimezoneIndicator !== -1) {\n    return [value.substring(0, utcTimezoneIndicator), 0];\n  }\n\n  return [value, getBrowserTimezoneOffset()];\n}","map":{"version":3,"sources":["/Users/isingheg/Desktop/projects/test-react-amplify/node_modules/@awsui/components-react/date-range-picker/time-offset.js"],"names":["padLeftZeros","addMinutes","formatTime","formatDate","warnOnce","getBrowserTimezoneOffset","Date","getTimezoneOffset","setTimeOffset","value","timeOffsetInMinutes","type","offsetSuffix","formatOffset","startDate","endDate","offsetInMinutes","hoursOffset","Math","floor","abs","toFixed","minuteOffset","sign","shiftTimeOffset","dateTimeRegex","test","doShiftTimeOffset","targetOffsetInMinutes","_a","splitOffset","valueWithoutOffset","differenceBetweenValueAndTarget","date","adjustedDate","formattedDate","formattedTime","split","datePart","timePart","_b","time","signCharacter","offsetPart","_c","offsetHours","offsetMinutes","offset","Number","utcTimezoneIndicator","indexOf","substring"],"mappings":"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","sourcesContent":["import { padLeftZeros } from '../internal/components/masked-input/utils/strings';\nimport { addMinutes } from 'date-fns';\nimport { formatTime, formatDate } from '../date-picker/calendar/utils/date';\nimport { warnOnce } from '../internal/logging';\nexport function getBrowserTimezoneOffset() {\n    return 0 - new Date().getTimezoneOffset();\n}\nexport function setTimeOffset(value, timeOffsetInMinutes) {\n    if (!((value === null || value === void 0 ? void 0 : value.type) === 'absolute')) {\n        return value;\n    }\n    var offsetSuffix = formatOffset(timeOffsetInMinutes);\n    var startDate = value.startDate, endDate = value.endDate;\n    return {\n        type: 'absolute',\n        startDate: startDate + offsetSuffix,\n        endDate: endDate + offsetSuffix\n    };\n}\nexport function formatOffset(offsetInMinutes) {\n    var hoursOffset = padLeftZeros(Math.floor(Math.abs(offsetInMinutes) / 60).toFixed(0), 2);\n    var minuteOffset = padLeftZeros(Math.abs(offsetInMinutes % 60).toFixed(0), 2);\n    var sign = offsetInMinutes < 0 ? '-' : '+';\n    var offsetSuffix = \"\" + sign + hoursOffset + \":\" + minuteOffset;\n    return offsetSuffix;\n}\nexport function shiftTimeOffset(value, timeOffsetInMinutes) {\n    if (!value || value.type !== 'absolute') {\n        return value;\n    }\n    var dateTimeRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}(:\\d{2})?(\\.\\d{1,3})?(((\\+|-)\\d{2}(:\\d{2})?)|Z)?$/;\n    if (!dateTimeRegex.test(value.startDate) || !dateTimeRegex.test(value.endDate)) {\n        warnOnce('DateRangePicker', 'You have provided a misformatted start or end date. The component will fall back to an empty value. ' +\n            'Dates have to be ISO8601-formatted with an optional time zone offset.');\n        return null;\n    }\n    return {\n        type: 'absolute',\n        startDate: doShiftTimeOffset(value.startDate, timeOffsetInMinutes),\n        endDate: doShiftTimeOffset(value.endDate, timeOffsetInMinutes)\n    };\n}\nfunction doShiftTimeOffset(value, targetOffsetInMinutes) {\n    var _a = splitOffset(value), valueWithoutOffset = _a[0], offsetInMinutes = _a[1];\n    var differenceBetweenValueAndTarget = targetOffsetInMinutes - offsetInMinutes;\n    var date = new Date(valueWithoutOffset);\n    var adjustedDate = addMinutes(date, differenceBetweenValueAndTarget);\n    var formattedDate = formatDate(adjustedDate);\n    var formattedTime = formatTime(adjustedDate);\n    return formattedDate + \"T\" + formattedTime;\n}\nfunction splitOffset(value) {\n    var _a = value.split('T'), datePart = _a[0], timePart = _a[1];\n    var _b = timePart.split(/(-|\\+)/), time = _b[0], signCharacter = _b[1], offsetPart = _b[2];\n    if (signCharacter && offsetPart) {\n        var _c = offsetPart.split(':'), offsetHours = _c[0], offsetMinutes = _c[1];\n        var offset = Number(offsetHours) * 60 + Number(offsetMinutes);\n        var sign = signCharacter === '-' ? -1 : 1;\n        return [datePart + \"T\" + time, offset * sign];\n    }\n    var utcTimezoneIndicator = value.indexOf('Z');\n    if (utcTimezoneIndicator !== -1) {\n        return [value.substring(0, utcTimezoneIndicator), 0];\n    }\n    return [value, getBrowserTimezoneOffset()];\n}\n"]},"metadata":{},"sourceType":"module"}