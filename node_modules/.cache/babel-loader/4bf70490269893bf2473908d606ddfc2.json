{"ast":null,"code":"import { KeyCode } from '../../keycode';\nimport * as logger from '../../logging';\nimport { isCommand, isDigit } from './utils/keys';\nimport { backspaceHandler, keyHandler, enterHandler } from './keyboard-handler';\n\nvar onAutoComplete = function (value, onChange, maskFormat) {\n  if (!value) {\n    return;\n  }\n\n  var autoCompletedValue = maskFormat.autoComplete(value);\n\n  if (autoCompletedValue !== value) {\n    onChange(autoCompletedValue);\n  }\n};\n\nvar preventDefault = function (event, result) {\n  return result && event.preventDefault();\n};\n\nvar useMask = function (_a) {\n  var _b = _a.value,\n      value = _b === void 0 ? '' : _b,\n      onBlur = _a.onBlur,\n      onChange = _a.onChange,\n      onKeyDown = _a.onKeyDown,\n      format = _a.format,\n      inputRef = _a.inputRef,\n      _c = _a.autofix,\n      autofix = _c === void 0 ? false : _c,\n      _d = _a.disableAutocompleteOnBlur,\n      disableAutocompleteOnBlur = _d === void 0 ? false : _d,\n      setPosition = _a.setPosition;\n\n  if (!format.isValid(value)) {\n    logger.warnOnce('useMask', \"Invalid string \\\"\" + value + \"\\\" provided\");\n  }\n\n  var onMaskChange = function (updatedValue) {\n    var autofixedUpdatedValue = autofix ? format.correctMinMaxValues(updatedValue) : updatedValue;\n\n    if (autofixedUpdatedValue === value || !format.isValid(autofixedUpdatedValue)) {\n      return;\n    }\n\n    onChange(autofixedUpdatedValue);\n  };\n\n  var initialValue = autofix ? format.correctMinMaxValues(value) : value;\n  var maskedValue = format.getValidValue(initialValue);\n  return {\n    value: maskedValue,\n    onKeyDown: function (event) {\n      var _a, _b;\n\n      var selectionStart = ((_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.selectionStart) || 0;\n      var selectionEnd = ((_b = inputRef.current) === null || _b === void 0 ? void 0 : _b.selectionEnd) || 0;\n      var result;\n      var _c = event.detail,\n          keyCode = _c.keyCode,\n          key = _c.key,\n          ctrlKey = _c.ctrlKey,\n          metaKey = _c.metaKey;\n\n      if (isDigit(key) || format.isSeparator(key)) {\n        result = keyHandler(maskedValue, key, format, selectionStart, selectionEnd);\n        preventDefault(event, result);\n      } else if (keyCode === KeyCode.backspace) {\n        result = backspaceHandler(maskedValue, format, selectionStart, selectionEnd);\n        preventDefault(event, result);\n      } else if (keyCode === KeyCode.enter) {\n        result = enterHandler(maskedValue, format);\n      } else if (!isCommand(keyCode, ctrlKey, metaKey)) {\n        event.preventDefault();\n      }\n\n      if (result) {\n        var value_1 = result.value,\n            position = result.position;\n        onMaskChange(value_1);\n        setPosition(position);\n      }\n\n      onKeyDown && onKeyDown(event);\n    },\n    onChange: function (_a) {\n      var detail = _a.detail;\n      return onMaskChange(detail.value);\n    },\n    onBlur: function () {\n      if (!disableAutocompleteOnBlur) {\n        onAutoComplete(maskedValue, onChange, format);\n      }\n\n      onBlur && onBlur();\n    },\n    onPaste: function (event) {\n      var _a, _b;\n\n      var text = (event.clipboardData || window.clipboardData).getData('text');\n      var selectionStart = ((_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.selectionStart) || 0;\n      var selectionEnd = ((_b = inputRef.current) === null || _b === void 0 ? void 0 : _b.selectionEnd) || 0;\n      var formattedText = format.formatPastedText(text, maskedValue, selectionStart, selectionEnd);\n      onMaskChange(formattedText);\n    }\n  };\n};\n\nexport default useMask;","map":{"version":3,"sources":["/Users/isingheg/Desktop/projects/amazonforvolunteers-ui/node_modules/@awsui/components-react/internal/components/masked-input/use-mask.js"],"names":["KeyCode","logger","isCommand","isDigit","backspaceHandler","keyHandler","enterHandler","onAutoComplete","value","onChange","maskFormat","autoCompletedValue","autoComplete","preventDefault","event","result","useMask","_a","_b","onBlur","onKeyDown","format","inputRef","_c","autofix","_d","disableAutocompleteOnBlur","setPosition","isValid","warnOnce","onMaskChange","updatedValue","autofixedUpdatedValue","correctMinMaxValues","initialValue","maskedValue","getValidValue","selectionStart","current","selectionEnd","detail","keyCode","key","ctrlKey","metaKey","isSeparator","backspace","enter","value_1","position","onPaste","text","clipboardData","window","getData","formattedText","formatPastedText"],"mappings":"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","sourcesContent":["import { KeyCode } from '../../keycode';\nimport * as logger from '../../logging';\nimport { isCommand, isDigit } from './utils/keys';\nimport { backspaceHandler, keyHandler, enterHandler } from './keyboard-handler';\nvar onAutoComplete = function (value, onChange, maskFormat) {\n    if (!value) {\n        return;\n    }\n    var autoCompletedValue = maskFormat.autoComplete(value);\n    if (autoCompletedValue !== value) {\n        onChange(autoCompletedValue);\n    }\n};\nvar preventDefault = function (event, result) { return result && event.preventDefault(); };\nvar useMask = function (_a) {\n    var _b = _a.value, value = _b === void 0 ? '' : _b, onBlur = _a.onBlur, onChange = _a.onChange, onKeyDown = _a.onKeyDown, format = _a.format, inputRef = _a.inputRef, _c = _a.autofix, autofix = _c === void 0 ? false : _c, _d = _a.disableAutocompleteOnBlur, disableAutocompleteOnBlur = _d === void 0 ? false : _d, setPosition = _a.setPosition;\n    if (!format.isValid(value)) {\n        logger.warnOnce('useMask', \"Invalid string \\\"\" + value + \"\\\" provided\");\n    }\n    var onMaskChange = function (updatedValue) {\n        var autofixedUpdatedValue = autofix ? format.correctMinMaxValues(updatedValue) : updatedValue;\n        if (autofixedUpdatedValue === value || !format.isValid(autofixedUpdatedValue)) {\n            return;\n        }\n        onChange(autofixedUpdatedValue);\n    };\n    var initialValue = autofix ? format.correctMinMaxValues(value) : value;\n    var maskedValue = format.getValidValue(initialValue);\n    return {\n        value: maskedValue,\n        onKeyDown: function (event) {\n            var _a, _b;\n            var selectionStart = ((_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.selectionStart) || 0;\n            var selectionEnd = ((_b = inputRef.current) === null || _b === void 0 ? void 0 : _b.selectionEnd) || 0;\n            var result;\n            var _c = event.detail, keyCode = _c.keyCode, key = _c.key, ctrlKey = _c.ctrlKey, metaKey = _c.metaKey;\n            if (isDigit(key) || format.isSeparator(key)) {\n                result = keyHandler(maskedValue, key, format, selectionStart, selectionEnd);\n                preventDefault(event, result);\n            }\n            else if (keyCode === KeyCode.backspace) {\n                result = backspaceHandler(maskedValue, format, selectionStart, selectionEnd);\n                preventDefault(event, result);\n            }\n            else if (keyCode === KeyCode.enter) {\n                result = enterHandler(maskedValue, format);\n            }\n            else if (!isCommand(keyCode, ctrlKey, metaKey)) {\n                event.preventDefault();\n            }\n            if (result) {\n                var value_1 = result.value, position = result.position;\n                onMaskChange(value_1);\n                setPosition(position);\n            }\n            onKeyDown && onKeyDown(event);\n        },\n        onChange: function (_a) {\n            var detail = _a.detail;\n            return onMaskChange(detail.value);\n        },\n        onBlur: function () {\n            if (!disableAutocompleteOnBlur) {\n                onAutoComplete(maskedValue, onChange, format);\n            }\n            onBlur && onBlur();\n        },\n        onPaste: function (event) {\n            var _a, _b;\n            var text = (event.clipboardData || window.clipboardData).getData('text');\n            var selectionStart = ((_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.selectionStart) || 0;\n            var selectionEnd = ((_b = inputRef.current) === null || _b === void 0 ? void 0 : _b.selectionEnd) || 0;\n            var formattedText = format.formatPastedText(text, maskedValue, selectionStart, selectionEnd);\n            onMaskChange(formattedText);\n        }\n    };\n};\nexport default useMask;\n"]},"metadata":{},"sourceType":"module"}