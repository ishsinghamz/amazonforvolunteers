{"ast":null,"code":"import React, { useMemo } from 'react';\nimport styles from '../../styles.css.js';\nimport GridDay from './day';\nimport { isSameMonth, isAfter, isBefore, isSameDay, addWeeks, addDays } from 'date-fns';\nimport { getCalendarMonth } from 'mnth';\nimport rotateDayIndexes from '../../../date-picker/calendar/utils/rotate-day-indexes';\nimport { renderDayName } from '../../../date-picker/calendar/utils/intl';\nimport clsx from 'clsx';\nexport function Grid(_a) {\n  var baseDate = _a.baseDate,\n      selectedStartDate = _a.selectedStartDate,\n      selectedEndDate = _a.selectedEndDate,\n      rangeStartDate = _a.rangeStartDate,\n      rangeEndDate = _a.rangeEndDate,\n      focusedDate = _a.focusedDate,\n      focusedDateRef = _a.focusedDateRef,\n      onSelectDate = _a.onSelectDate,\n      onGridKeyDownHandler = _a.onGridKeyDownHandler,\n      onFocusedDateChange = _a.onFocusedDateChange,\n      isDateEnabled = _a.isDateEnabled,\n      locale = _a.locale,\n      startOfWeek = _a.startOfWeek,\n      todayAriaLabel = _a.todayAriaLabel,\n      className = _a.className;\n  var baseDateTime = baseDate === null || baseDate === void 0 ? void 0 : baseDate.getTime();\n  var weeks = useMemo(function () {\n    return getCalendarMonth(baseDate, {\n      firstDayOfWeek: startOfWeek\n    });\n  }, [baseDateTime, startOfWeek]);\n  return React.createElement(\"div\", {\n    className: clsx(styles.grid, className)\n  }, React.createElement(\"div\", {\n    className: styles['calendar-day-names']\n  }, rotateDayIndexes(startOfWeek).map(function (i) {\n    return React.createElement(\"div\", {\n      key: \"day-name-\" + i,\n      className: styles['calendar-day-name']\n    }, renderDayName(locale, i));\n  })), React.createElement(\"div\", {\n    className: styles['calendar-dates'],\n    onKeyDown: onGridKeyDownHandler\n  }, weeks.map(function (week, weekIndex) {\n    return React.createElement(\"div\", {\n      key: \"week-\" + weekIndex,\n      className: styles['calendar-week']\n    }, week.map(function (date, dateIndex) {\n      var isStartDate = !!selectedStartDate && isSameDay(date, selectedStartDate);\n      var isEndDate = !!selectedEndDate && isSameDay(date, selectedEndDate);\n      var isSelected = isStartDate || isEndDate;\n      var isRangeStartDate = !!rangeStartDate && isSameDay(date, rangeStartDate);\n      var isRangeEndDate = !!rangeEndDate && isSameDay(date, rangeEndDate);\n      var isFocused = !!focusedDate && isSameDay(date, focusedDate) && isSameMonth(date, baseDate);\n      var dateIsInRange = isStartDate || isEndDate || isInRange(date, rangeStartDate, rangeEndDate);\n      var inRangeStartWeek = rangeStartDate && isInRange(date, rangeStartDate, addDays(addWeeks(rangeStartDate, 1), -1));\n      var inRangeEndWeek = rangeEndDate && isInRange(date, rangeEndDate, addDays(addWeeks(rangeEndDate, -1), 1));\n      var onlyOneSelected = !!rangeStartDate && !!rangeEndDate ? isSameDay(rangeStartDate, rangeEndDate) : !selectedStartDate || !selectedEndDate;\n      return React.createElement(GridDay, {\n        key: \"date-\" + weekIndex + \"-\" + dateIndex,\n        locale: locale,\n        baseDate: baseDate,\n        isSelected: isSelected,\n        isStartDate: isStartDate,\n        isEndDate: isEndDate,\n        onlyOneSelected: onlyOneSelected,\n        isRangeStartDate: isRangeStartDate,\n        isRangeEndDate: isRangeEndDate,\n        date: date,\n        isFocusedDate: isFocused,\n        ref: isFocused ? focusedDateRef : undefined,\n        todayAriaLabel: todayAriaLabel,\n        onSelectDate: onSelectDate,\n        onFocusDate: onFocusedDateChange,\n        isInRange: dateIsInRange,\n        isDateEnabled: isDateEnabled,\n        isDateInFirstRow: weekIndex === 0,\n        isDateInFirstColumn: dateIndex === 0,\n        isDateInLastColumn: dateIndex === week.length - 1,\n        isDateInSelectionStartWeek: !!inRangeStartWeek,\n        isDateInSelectionEndWeek: !!inRangeEndWeek\n      });\n    }));\n  })));\n}\n\nfunction isInRange(date, dateOne, dateTwo) {\n  if (!dateOne || !dateTwo || isSameDay(dateOne, dateTwo)) {\n    return false;\n  }\n\n  var inRange = isAfter(date, dateOne) && isBefore(date, dateTwo) || isAfter(date, dateTwo) && isBefore(date, dateOne);\n  return inRange || isSameDay(date, dateOne) || isSameDay(date, dateTwo);\n}","map":{"version":3,"sources":["/Users/isingheg/Desktop/projects/test-react-amplify/node_modules/@awsui/components-react/date-range-picker/calendar/grids/grid.js"],"names":["React","useMemo","styles","GridDay","isSameMonth","isAfter","isBefore","isSameDay","addWeeks","addDays","getCalendarMonth","rotateDayIndexes","renderDayName","clsx","Grid","_a","baseDate","selectedStartDate","selectedEndDate","rangeStartDate","rangeEndDate","focusedDate","focusedDateRef","onSelectDate","onGridKeyDownHandler","onFocusedDateChange","isDateEnabled","locale","startOfWeek","todayAriaLabel","className","baseDateTime","getTime","weeks","firstDayOfWeek","createElement","grid","map","i","key","onKeyDown","week","weekIndex","date","dateIndex","isStartDate","isEndDate","isSelected","isRangeStartDate","isRangeEndDate","isFocused","dateIsInRange","isInRange","inRangeStartWeek","inRangeEndWeek","onlyOneSelected","isFocusedDate","ref","undefined","onFocusDate","isDateInFirstRow","isDateInFirstColumn","isDateInLastColumn","length","isDateInSelectionStartWeek","isDateInSelectionEndWeek","dateOne","dateTwo","inRange"],"mappings":"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","sourcesContent":["import React, { useMemo } from 'react';\nimport styles from '../../styles.css.js';\nimport GridDay from './day';\nimport { isSameMonth, isAfter, isBefore, isSameDay, addWeeks, addDays } from 'date-fns';\nimport { getCalendarMonth } from 'mnth';\nimport rotateDayIndexes from '../../../date-picker/calendar/utils/rotate-day-indexes';\nimport { renderDayName } from '../../../date-picker/calendar/utils/intl';\nimport clsx from 'clsx';\nexport function Grid(_a) {\n    var baseDate = _a.baseDate, selectedStartDate = _a.selectedStartDate, selectedEndDate = _a.selectedEndDate, rangeStartDate = _a.rangeStartDate, rangeEndDate = _a.rangeEndDate, focusedDate = _a.focusedDate, focusedDateRef = _a.focusedDateRef, onSelectDate = _a.onSelectDate, onGridKeyDownHandler = _a.onGridKeyDownHandler, onFocusedDateChange = _a.onFocusedDateChange, isDateEnabled = _a.isDateEnabled, locale = _a.locale, startOfWeek = _a.startOfWeek, todayAriaLabel = _a.todayAriaLabel, className = _a.className;\n    var baseDateTime = baseDate === null || baseDate === void 0 ? void 0 : baseDate.getTime();\n    var weeks = useMemo(function () { return getCalendarMonth(baseDate, { firstDayOfWeek: startOfWeek }); }, [baseDateTime, startOfWeek]);\n    return (React.createElement(\"div\", { className: clsx(styles.grid, className) },\n        React.createElement(\"div\", { className: styles['calendar-day-names'] }, rotateDayIndexes(startOfWeek).map(function (i) { return (React.createElement(\"div\", { key: \"day-name-\" + i, className: styles['calendar-day-name'] }, renderDayName(locale, i))); })),\n        React.createElement(\"div\", { className: styles['calendar-dates'], onKeyDown: onGridKeyDownHandler }, weeks.map(function (week, weekIndex) {\n            return (React.createElement(\"div\", { key: \"week-\" + weekIndex, className: styles['calendar-week'] }, week.map(function (date, dateIndex) {\n                var isStartDate = !!selectedStartDate && isSameDay(date, selectedStartDate);\n                var isEndDate = !!selectedEndDate && isSameDay(date, selectedEndDate);\n                var isSelected = isStartDate || isEndDate;\n                var isRangeStartDate = !!rangeStartDate && isSameDay(date, rangeStartDate);\n                var isRangeEndDate = !!rangeEndDate && isSameDay(date, rangeEndDate);\n                var isFocused = !!focusedDate && isSameDay(date, focusedDate) && isSameMonth(date, baseDate);\n                var dateIsInRange = isStartDate || isEndDate || isInRange(date, rangeStartDate, rangeEndDate);\n                var inRangeStartWeek = rangeStartDate && isInRange(date, rangeStartDate, addDays(addWeeks(rangeStartDate, 1), -1));\n                var inRangeEndWeek = rangeEndDate && isInRange(date, rangeEndDate, addDays(addWeeks(rangeEndDate, -1), 1));\n                var onlyOneSelected = !!rangeStartDate && !!rangeEndDate\n                    ? isSameDay(rangeStartDate, rangeEndDate)\n                    : !selectedStartDate || !selectedEndDate;\n                return (React.createElement(GridDay, { key: \"date-\" + weekIndex + \"-\" + dateIndex, locale: locale, baseDate: baseDate, isSelected: isSelected, isStartDate: isStartDate, isEndDate: isEndDate, onlyOneSelected: onlyOneSelected, isRangeStartDate: isRangeStartDate, isRangeEndDate: isRangeEndDate, date: date, isFocusedDate: isFocused, ref: isFocused ? focusedDateRef : undefined, todayAriaLabel: todayAriaLabel, onSelectDate: onSelectDate, onFocusDate: onFocusedDateChange, isInRange: dateIsInRange, isDateEnabled: isDateEnabled, isDateInFirstRow: weekIndex === 0, isDateInFirstColumn: dateIndex === 0, isDateInLastColumn: dateIndex === week.length - 1, isDateInSelectionStartWeek: !!inRangeStartWeek, isDateInSelectionEndWeek: !!inRangeEndWeek }));\n            })));\n        }))));\n}\nfunction isInRange(date, dateOne, dateTwo) {\n    if (!dateOne || !dateTwo || isSameDay(dateOne, dateTwo)) {\n        return false;\n    }\n    var inRange = (isAfter(date, dateOne) && isBefore(date, dateTwo)) || (isAfter(date, dateTwo) && isBefore(date, dateOne));\n    return inRange || isSameDay(date, dateOne) || isSameDay(date, dateTwo);\n}\n"]},"metadata":{},"sourceType":"module"}