{"ast":null,"code":"import { __assign } from \"tslib\";\nimport React from 'react';\nimport styles from '../../../styles.css.js';\nimport { isSameDay, isSameMonth } from 'date-fns';\nimport { renderDayLabel } from '../../utils/intl';\nimport clsx from 'clsx';\n\nvar GridDay = function (_a) {\n  var _b;\n\n  var locale = _a.locale,\n      baseDate = _a.baseDate,\n      date = _a.date,\n      selectedDate = _a.selectedDate,\n      focusedDate = _a.focusedDate,\n      isDateEnabled = _a.isDateEnabled,\n      todayAriaLabel = _a.todayAriaLabel,\n      onSelectDate = _a.onSelectDate,\n      isDateInLastWeek = _a.isDateInLastWeek;\n  var labels = [renderDayLabel(locale, date)];\n  var isFocusable = !!focusedDate && isSameDay(date, focusedDate);\n  var isSelected = !!selectedDate && isSameDay(date, selectedDate);\n  var isEnabled = !isDateEnabled || isDateEnabled(date);\n  var isDateOnSameDay = isSameDay(date, new Date());\n  var computedAttributes = {};\n  var classNames = clsx(styles['calendar-day'], (_b = {}, _b[styles['calendar-day-in-last-week']] = isDateInLastWeek, _b[styles['calendar-day-current-month']] = isSameMonth(date, baseDate), _b[styles['calendar-day-enabled']] = isEnabled, _b[styles['calendar-day-selected']] = isSelected, _b[styles['calendar-day-today']] = isDateOnSameDay, _b[styles['calendar-day-focusable']] = isFocusable && isEnabled, _b));\n\n  if (isSelected) {\n    computedAttributes['aria-current'] = 'date';\n  }\n\n  if (isDateOnSameDay) {\n    labels.push(todayAriaLabel);\n  }\n\n  if (isEnabled) {\n    computedAttributes.onClick = function () {\n      return onSelectDate(date);\n    };\n\n    computedAttributes.tabIndex = -1;\n  } else {\n    computedAttributes['aria-disabled'] = true;\n  }\n\n  if (isFocusable && isEnabled) {\n    computedAttributes.tabIndex = 0;\n  }\n\n  return React.createElement(\"div\", __assign({\n    className: classNames,\n    \"aria-label\": labels.join('. '),\n    role: \"button\"\n  }, computedAttributes), React.createElement(\"span\", {\n    className: styles['day-inner']\n  }, date.getDate()));\n};\n\nexport default GridDay;","map":{"version":3,"sources":["/Users/isingheg/Desktop/projects/amazonforvolunteers-ui/node_modules/@awsui/components-react/date-picker/calendar/grid/day/index.js"],"names":["__assign","React","styles","isSameDay","isSameMonth","renderDayLabel","clsx","GridDay","_a","_b","locale","baseDate","date","selectedDate","focusedDate","isDateEnabled","todayAriaLabel","onSelectDate","isDateInLastWeek","labels","isFocusable","isSelected","isEnabled","isDateOnSameDay","Date","computedAttributes","classNames","push","onClick","tabIndex","createElement","className","join","role","getDate"],"mappings":"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","sourcesContent":["import { __assign } from \"tslib\";\nimport React from 'react';\nimport styles from '../../../styles.css.js';\nimport { isSameDay, isSameMonth } from 'date-fns';\nimport { renderDayLabel } from '../../utils/intl';\nimport clsx from 'clsx';\nvar GridDay = function (_a) {\n    var _b;\n    var locale = _a.locale, baseDate = _a.baseDate, date = _a.date, selectedDate = _a.selectedDate, focusedDate = _a.focusedDate, isDateEnabled = _a.isDateEnabled, todayAriaLabel = _a.todayAriaLabel, onSelectDate = _a.onSelectDate, isDateInLastWeek = _a.isDateInLastWeek;\n    var labels = [renderDayLabel(locale, date)];\n    var isFocusable = !!focusedDate && isSameDay(date, focusedDate);\n    var isSelected = !!selectedDate && isSameDay(date, selectedDate);\n    var isEnabled = !isDateEnabled || isDateEnabled(date);\n    var isDateOnSameDay = isSameDay(date, new Date());\n    var computedAttributes = {};\n    var classNames = clsx(styles['calendar-day'], (_b = {},\n        _b[styles['calendar-day-in-last-week']] = isDateInLastWeek,\n        _b[styles['calendar-day-current-month']] = isSameMonth(date, baseDate),\n        _b[styles['calendar-day-enabled']] = isEnabled,\n        _b[styles['calendar-day-selected']] = isSelected,\n        _b[styles['calendar-day-today']] = isDateOnSameDay,\n        _b[styles['calendar-day-focusable']] = isFocusable && isEnabled,\n        _b));\n    if (isSelected) {\n        computedAttributes['aria-current'] = 'date';\n    }\n    if (isDateOnSameDay) {\n        labels.push(todayAriaLabel);\n    }\n    if (isEnabled) {\n        computedAttributes.onClick = function () { return onSelectDate(date); };\n        computedAttributes.tabIndex = -1;\n    }\n    else {\n        computedAttributes['aria-disabled'] = true;\n    }\n    if (isFocusable && isEnabled) {\n        computedAttributes.tabIndex = 0;\n    }\n    return (React.createElement(\"div\", __assign({ className: classNames, \"aria-label\": labels.join('. '), role: \"button\" }, computedAttributes),\n        React.createElement(\"span\", { className: styles['day-inner'] }, date.getDate())));\n};\nexport default GridDay;\n"]},"metadata":{},"sourceType":"module"}