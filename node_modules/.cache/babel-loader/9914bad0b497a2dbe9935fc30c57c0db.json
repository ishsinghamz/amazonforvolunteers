{"ast":null,"code":"export var getOverflowParents = function (element) {\n  var parents = [];\n  var node = element;\n\n  while ((node = node.parentElement) && node !== document.body) {\n    getComputedStyle(node).overflow !== 'visible' && parents.push(node);\n  }\n\n  return parents;\n};\nexport var getOverflowParentDimensions = function (element, excludeClosestParent, expandToViewport) {\n  if (excludeClosestParent === void 0) {\n    excludeClosestParent = false;\n  }\n\n  if (expandToViewport === void 0) {\n    expandToViewport = false;\n  }\n\n  var parents = expandToViewport ? [] : getOverflowParents(element).map(function (el) {\n    var _a = el.getBoundingClientRect(),\n        height = _a.height,\n        width = _a.width,\n        top = _a.top,\n        left = _a.left;\n\n    return {\n      height: height,\n      width: width,\n      top: top,\n      left: left\n    };\n  });\n  parents.push({\n    height: window.innerHeight,\n    width: window.innerWidth,\n    top: 0,\n    left: 0\n  });\n\n  if (excludeClosestParent && !expandToViewport) {\n    parents.shift();\n  }\n\n  return parents;\n};\nexport function scrollUntilVisible(element) {\n  var _a;\n\n  var parent = (_a = element.offsetParent) !== null && _a !== void 0 ? _a : document.documentElement;\n\n  if (element.offsetTop < parent.scrollTop) {\n    parent.scrollTop = element.offsetTop;\n  }\n\n  if (element.offsetTop + element.clientHeight > parent.scrollTop + parent.clientHeight) {\n    parent.scrollTop = element.offsetTop + element.clientHeight - parent.clientHeight;\n  }\n}","map":{"version":3,"sources":["/Users/isingheg/Desktop/projects/amazonforvolunteers-ui/node_modules/@awsui/components-react/internal/utils/scrollable-containers.js"],"names":["getOverflowParents","element","parents","node","parentElement","document","body","getComputedStyle","overflow","push","getOverflowParentDimensions","excludeClosestParent","expandToViewport","map","el","_a","getBoundingClientRect","height","width","top","left","window","innerHeight","innerWidth","shift","scrollUntilVisible","parent","offsetParent","documentElement","offsetTop","scrollTop","clientHeight"],"mappings":"AAAA,OAAO,IAAIA,kBAAkB,GAAG,UAAUC,OAAV,EAAmB;AAC/C,MAAIC,OAAO,GAAG,EAAd;AACA,MAAIC,IAAI,GAAGF,OAAX;;AACA,SAAO,CAACE,IAAI,GAAGA,IAAI,CAACC,aAAb,KAA+BD,IAAI,KAAKE,QAAQ,CAACC,IAAxD,EAA8D;AAC1DC,IAAAA,gBAAgB,CAACJ,IAAD,CAAhB,CAAuBK,QAAvB,KAAoC,SAApC,IAAiDN,OAAO,CAACO,IAAR,CAAaN,IAAb,CAAjD;AACH;;AACD,SAAOD,OAAP;AACH,CAPM;AAQP,OAAO,IAAIQ,2BAA2B,GAAG,UAAUT,OAAV,EAAmBU,oBAAnB,EAAyCC,gBAAzC,EAA2D;AAChG,MAAID,oBAAoB,KAAK,KAAK,CAAlC,EAAqC;AAAEA,IAAAA,oBAAoB,GAAG,KAAvB;AAA+B;;AACtE,MAAIC,gBAAgB,KAAK,KAAK,CAA9B,EAAiC;AAAEA,IAAAA,gBAAgB,GAAG,KAAnB;AAA2B;;AAC9D,MAAIV,OAAO,GAAGU,gBAAgB,GACxB,EADwB,GAExBZ,kBAAkB,CAACC,OAAD,CAAlB,CAA4BY,GAA5B,CAAgC,UAAUC,EAAV,EAAc;AAC5C,QAAIC,EAAE,GAAGD,EAAE,CAACE,qBAAH,EAAT;AAAA,QAAqCC,MAAM,GAAGF,EAAE,CAACE,MAAjD;AAAA,QAAyDC,KAAK,GAAGH,EAAE,CAACG,KAApE;AAAA,QAA2EC,GAAG,GAAGJ,EAAE,CAACI,GAApF;AAAA,QAAyFC,IAAI,GAAGL,EAAE,CAACK,IAAnG;;AACA,WAAO;AACHH,MAAAA,MAAM,EAAEA,MADL;AAEHC,MAAAA,KAAK,EAAEA,KAFJ;AAGHC,MAAAA,GAAG,EAAEA,GAHF;AAIHC,MAAAA,IAAI,EAAEA;AAJH,KAAP;AAMH,GARC,CAFN;AAWAlB,EAAAA,OAAO,CAACO,IAAR,CAAa;AACTQ,IAAAA,MAAM,EAAEI,MAAM,CAACC,WADN;AAETJ,IAAAA,KAAK,EAAEG,MAAM,CAACE,UAFL;AAGTJ,IAAAA,GAAG,EAAE,CAHI;AAITC,IAAAA,IAAI,EAAE;AAJG,GAAb;;AAMA,MAAIT,oBAAoB,IAAI,CAACC,gBAA7B,EAA+C;AAC3CV,IAAAA,OAAO,CAACsB,KAAR;AACH;;AACD,SAAOtB,OAAP;AACH,CAxBM;AAyBP,OAAO,SAASuB,kBAAT,CAA4BxB,OAA5B,EAAqC;AACxC,MAAIc,EAAJ;;AACA,MAAIW,MAAM,GAAG,CAACX,EAAE,GAAGd,OAAO,CAAC0B,YAAd,MAAgC,IAAhC,IAAwCZ,EAAE,KAAK,KAAK,CAApD,GAAwDA,EAAxD,GAA6DV,QAAQ,CAACuB,eAAnF;;AACA,MAAI3B,OAAO,CAAC4B,SAAR,GAAoBH,MAAM,CAACI,SAA/B,EAA0C;AACtCJ,IAAAA,MAAM,CAACI,SAAP,GAAmB7B,OAAO,CAAC4B,SAA3B;AACH;;AACD,MAAI5B,OAAO,CAAC4B,SAAR,GAAoB5B,OAAO,CAAC8B,YAA5B,GAA2CL,MAAM,CAACI,SAAP,GAAmBJ,MAAM,CAACK,YAAzE,EAAuF;AACnFL,IAAAA,MAAM,CAACI,SAAP,GAAmB7B,OAAO,CAAC4B,SAAR,GAAoB5B,OAAO,CAAC8B,YAA5B,GAA2CL,MAAM,CAACK,YAArE;AACH;AACJ","sourcesContent":["export var getOverflowParents = function (element) {\n    var parents = [];\n    var node = element;\n    while ((node = node.parentElement) && node !== document.body) {\n        getComputedStyle(node).overflow !== 'visible' && parents.push(node);\n    }\n    return parents;\n};\nexport var getOverflowParentDimensions = function (element, excludeClosestParent, expandToViewport) {\n    if (excludeClosestParent === void 0) { excludeClosestParent = false; }\n    if (expandToViewport === void 0) { expandToViewport = false; }\n    var parents = expandToViewport\n        ? []\n        : getOverflowParents(element).map(function (el) {\n            var _a = el.getBoundingClientRect(), height = _a.height, width = _a.width, top = _a.top, left = _a.left;\n            return {\n                height: height,\n                width: width,\n                top: top,\n                left: left\n            };\n        });\n    parents.push({\n        height: window.innerHeight,\n        width: window.innerWidth,\n        top: 0,\n        left: 0\n    });\n    if (excludeClosestParent && !expandToViewport) {\n        parents.shift();\n    }\n    return parents;\n};\nexport function scrollUntilVisible(element) {\n    var _a;\n    var parent = (_a = element.offsetParent) !== null && _a !== void 0 ? _a : document.documentElement;\n    if (element.offsetTop < parent.scrollTop) {\n        parent.scrollTop = element.offsetTop;\n    }\n    if (element.offsetTop + element.clientHeight > parent.scrollTop + parent.clientHeight) {\n        parent.scrollTop = element.offsetTop + element.clientHeight - parent.clientHeight;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}