{"ast":null,"code":"export var backspaceHandler = function (initialValue, format, selectionStart, selectionEnd) {\n  var multiCharDelete = selectionStart !== selectionEnd;\n\n  if (multiCharDelete) {\n    var isCursorAtEnd = selectionEnd === initialValue.length;\n\n    if (!isCursorAtEnd) {\n      return format.replaceDigitsWithZeroes(initialValue, selectionStart, selectionEnd);\n    }\n\n    return {\n      value: initialValue.slice(0, selectionStart),\n      position: selectionStart\n    };\n  }\n\n  var isSeparator = format.isSegmentStart(selectionStart);\n  var atEnd = selectionStart === initialValue.length;\n\n  if (!atEnd) {\n    if (isSeparator) {\n      return format.deleteSeparator(initialValue, selectionStart);\n    } else {\n      return format.deleteDigit(initialValue, selectionStart);\n    }\n  }\n\n  if (isSeparator) {\n    return {\n      value: initialValue.slice(0, selectionStart - 2),\n      position: selectionStart - 2\n    };\n  }\n\n  return {\n    value: initialValue.slice(0, selectionStart - 1),\n    position: selectionStart - 1\n  };\n};\nexport var keyHandler = function (initialValue, key, format, selectionStart, selectionEnd) {\n  var value = initialValue;\n  var position = selectionStart;\n\n  if (selectionStart === value.length && value.length === format.getMaxLength()) {\n    return {\n      value: value,\n      position: position\n    };\n  }\n\n  if (selectionStart !== value.length && selectionEnd === value.length) {\n    var sliceEnd = format.isCursorAtSeparator(selectionStart) ? selectionStart + 1 : selectionStart;\n    value = initialValue.slice(0, sliceEnd);\n  }\n\n  if (format.isCursorAtSeparator(position)) {\n    return {\n      value: value,\n      position: position + 1\n    };\n  }\n\n  return format.processKey(value, key, position);\n};\nexport var enterHandler = function (value, format) {\n  var autoCompletedValue = format.autoComplete(value);\n  var position = autoCompletedValue.length;\n  return {\n    value: autoCompletedValue,\n    position: position\n  };\n};","map":{"version":3,"sources":["/Users/isingheg/Desktop/projects/test-react-amplify/node_modules/@awsui/components-react/internal/components/masked-input/keyboard-handler.js"],"names":["backspaceHandler","initialValue","format","selectionStart","selectionEnd","multiCharDelete","isCursorAtEnd","length","replaceDigitsWithZeroes","value","slice","position","isSeparator","isSegmentStart","atEnd","deleteSeparator","deleteDigit","keyHandler","key","getMaxLength","sliceEnd","isCursorAtSeparator","processKey","enterHandler","autoCompletedValue","autoComplete"],"mappings":"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","sourcesContent":["export var backspaceHandler = function (initialValue, format, selectionStart, selectionEnd) {\n    var multiCharDelete = selectionStart !== selectionEnd;\n    if (multiCharDelete) {\n        var isCursorAtEnd = selectionEnd === initialValue.length;\n        if (!isCursorAtEnd) {\n            return format.replaceDigitsWithZeroes(initialValue, selectionStart, selectionEnd);\n        }\n        return {\n            value: initialValue.slice(0, selectionStart),\n            position: selectionStart\n        };\n    }\n    var isSeparator = format.isSegmentStart(selectionStart);\n    var atEnd = selectionStart === initialValue.length;\n    if (!atEnd) {\n        if (isSeparator) {\n            return format.deleteSeparator(initialValue, selectionStart);\n        }\n        else {\n            return format.deleteDigit(initialValue, selectionStart);\n        }\n    }\n    if (isSeparator) {\n        return {\n            value: initialValue.slice(0, selectionStart - 2),\n            position: selectionStart - 2\n        };\n    }\n    return {\n        value: initialValue.slice(0, selectionStart - 1),\n        position: selectionStart - 1\n    };\n};\nexport var keyHandler = function (initialValue, key, format, selectionStart, selectionEnd) {\n    var value = initialValue;\n    var position = selectionStart;\n    if (selectionStart === value.length && value.length === format.getMaxLength()) {\n        return { value: value, position: position };\n    }\n    if (selectionStart !== value.length && selectionEnd === value.length) {\n        var sliceEnd = format.isCursorAtSeparator(selectionStart) ? selectionStart + 1 : selectionStart;\n        value = initialValue.slice(0, sliceEnd);\n    }\n    if (format.isCursorAtSeparator(position)) {\n        return { value: value, position: position + 1 };\n    }\n    return format.processKey(value, key, position);\n};\nexport var enterHandler = function (value, format) {\n    var autoCompletedValue = format.autoComplete(value);\n    var position = autoCompletedValue.length;\n    return { value: autoCompletedValue, position: position };\n};\n"]},"metadata":{},"sourceType":"module"}