{"ast":null,"code":"import { useRef, useCallback } from 'react';\nimport { useResizeObserver } from './use-resize-observer';\nexport function useContainerQuery(mapFn, deps) {\n  if (deps === void 0) {\n    deps = [];\n  }\n\n  var elementRef = useRef(null);\n  var refFn = useCallback(function () {\n    return elementRef.current;\n  }, [elementRef]);\n  var memoizedMapFn = useCallback(function (entry, prevState) {\n    var contentBox = entry.contentBoxSize[0];\n    return mapFn({\n      width: contentBox.inlineSize,\n      height: contentBox.blockSize\n    }, prevState);\n  }, deps);\n  var state = useResizeObserver(refFn, memoizedMapFn);\n  return [state, elementRef];\n}","map":{"version":3,"sources":["/Users/isingheg/Desktop/projects/test-react-amplify/node_modules/@awsui/components-react/internal/hooks/container-queries/use-container-query.js"],"names":["useRef","useCallback","useResizeObserver","useContainerQuery","mapFn","deps","elementRef","refFn","current","memoizedMapFn","entry","prevState","contentBox","contentBoxSize","width","inlineSize","height","blockSize","state"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,WAAjB,QAAoC,OAApC;AACA,SAASC,iBAAT,QAAkC,uBAAlC;AACA,OAAO,SAASC,iBAAT,CAA2BC,KAA3B,EAAkCC,IAAlC,EAAwC;AAC3C,MAAIA,IAAI,KAAK,KAAK,CAAlB,EAAqB;AAAEA,IAAAA,IAAI,GAAG,EAAP;AAAY;;AACnC,MAAIC,UAAU,GAAGN,MAAM,CAAC,IAAD,CAAvB;AACA,MAAIO,KAAK,GAAGN,WAAW,CAAC,YAAY;AAAE,WAAOK,UAAU,CAACE,OAAlB;AAA4B,GAA3C,EAA6C,CAACF,UAAD,CAA7C,CAAvB;AACA,MAAIG,aAAa,GAAGR,WAAW,CAAC,UAAUS,KAAV,EAAiBC,SAAjB,EAA4B;AACxD,QAAIC,UAAU,GAAGF,KAAK,CAACG,cAAN,CAAqB,CAArB,CAAjB;AACA,WAAOT,KAAK,CAAC;AAAEU,MAAAA,KAAK,EAAEF,UAAU,CAACG,UAApB;AAAgCC,MAAAA,MAAM,EAAEJ,UAAU,CAACK;AAAnD,KAAD,EAAiEN,SAAjE,CAAZ;AACH,GAH8B,EAG5BN,IAH4B,CAA/B;AAIA,MAAIa,KAAK,GAAGhB,iBAAiB,CAACK,KAAD,EAAQE,aAAR,CAA7B;AACA,SAAO,CAACS,KAAD,EAAQZ,UAAR,CAAP;AACH","sourcesContent":["import { useRef, useCallback } from 'react';\nimport { useResizeObserver } from './use-resize-observer';\nexport function useContainerQuery(mapFn, deps) {\n    if (deps === void 0) { deps = []; }\n    var elementRef = useRef(null);\n    var refFn = useCallback(function () { return elementRef.current; }, [elementRef]);\n    var memoizedMapFn = useCallback(function (entry, prevState) {\n        var contentBox = entry.contentBoxSize[0];\n        return mapFn({ width: contentBox.inlineSize, height: contentBox.blockSize }, prevState);\n    }, deps);\n    var state = useResizeObserver(refFn, memoizedMapFn);\n    return [state, elementRef];\n}\n"]},"metadata":{},"sourceType":"module"}