{"ast":null,"code":"import { containsOrEqual } from './utils/dom';\n\nvar FocusTracker = function () {\n  function FocusTracker(node, _a, viewportId) {\n    var _this = this;\n\n    var onFocusEnter = _a.onFocusEnter,\n        onFocusLeave = _a.onFocusLeave;\n\n    if (viewportId === void 0) {\n      viewportId = '';\n    }\n\n    this.node = node;\n    this.currentlyFocused = false;\n\n    this.focusInListener = function (event) {\n      var focusIsInside = containsOrEqual(_this.node, event.target);\n\n      if (!_this.currentlyFocused && focusIsInside) {\n        _this.triggerFocus();\n      }\n    };\n\n    this.focusOutListener = function (event) {\n      var nextFocused = event.relatedTarget;\n      var isNextFocusedInParent = !containsOrEqual(_this.node, nextFocused);\n\n      if (_this.viewportId) {\n        var viewport = document.getElementById(_this.viewportId);\n        isNextFocusedInParent = isNextFocusedInParent && !containsOrEqual(viewport, nextFocused);\n      }\n\n      if (_this.currentlyFocused && (nextFocused === null || isNextFocusedInParent)) {\n        _this.triggerBlur();\n      }\n    };\n\n    this.onFocusEnter = onFocusEnter;\n    this.onFocusLeave = onFocusLeave;\n    this.viewportId = viewportId;\n  }\n\n  FocusTracker.prototype.initialize = function () {\n    this.currentlyFocused = containsOrEqual(this.node, document.activeElement);\n    document.addEventListener('focusin', this.focusInListener);\n    document.addEventListener('focusout', this.focusOutListener);\n  };\n\n  FocusTracker.prototype.destroy = function () {\n    document.removeEventListener('focusin', this.focusInListener);\n    document.removeEventListener('focusout', this.focusOutListener);\n  };\n\n  FocusTracker.prototype.triggerBlur = function () {\n    this.currentlyFocused = false;\n    this.onFocusLeave();\n  };\n\n  FocusTracker.prototype.triggerFocus = function () {\n    this.currentlyFocused = true;\n    this.onFocusEnter();\n  };\n\n  return FocusTracker;\n}();\n\nexport default FocusTracker;","map":{"version":3,"sources":["/Users/isingheg/Desktop/projects/amazonforvolunteers-ui/node_modules/@awsui/components-react/internal/focus-tracker.js"],"names":["containsOrEqual","FocusTracker","node","_a","viewportId","_this","onFocusEnter","onFocusLeave","currentlyFocused","focusInListener","event","focusIsInside","target","triggerFocus","focusOutListener","nextFocused","relatedTarget","isNextFocusedInParent","viewport","document","getElementById","triggerBlur","prototype","initialize","activeElement","addEventListener","destroy","removeEventListener"],"mappings":"AAAA,SAASA,eAAT,QAAgC,aAAhC;;AACA,IAAIC,YAAY,GAAI,YAAY;AAC5B,WAASA,YAAT,CAAsBC,IAAtB,EAA4BC,EAA5B,EAAgCC,UAAhC,EAA4C;AACxC,QAAIC,KAAK,GAAG,IAAZ;;AACA,QAAIC,YAAY,GAAGH,EAAE,CAACG,YAAtB;AAAA,QAAoCC,YAAY,GAAGJ,EAAE,CAACI,YAAtD;;AACA,QAAIH,UAAU,KAAK,KAAK,CAAxB,EAA2B;AAAEA,MAAAA,UAAU,GAAG,EAAb;AAAkB;;AAC/C,SAAKF,IAAL,GAAYA,IAAZ;AACA,SAAKM,gBAAL,GAAwB,KAAxB;;AACA,SAAKC,eAAL,GAAuB,UAAUC,KAAV,EAAiB;AACpC,UAAIC,aAAa,GAAGX,eAAe,CAACK,KAAK,CAACH,IAAP,EAAaQ,KAAK,CAACE,MAAnB,CAAnC;;AACA,UAAI,CAACP,KAAK,CAACG,gBAAP,IAA2BG,aAA/B,EAA8C;AAC1CN,QAAAA,KAAK,CAACQ,YAAN;AACH;AACJ,KALD;;AAMA,SAAKC,gBAAL,GAAwB,UAAUJ,KAAV,EAAiB;AACrC,UAAIK,WAAW,GAAGL,KAAK,CAACM,aAAxB;AACA,UAAIC,qBAAqB,GAAG,CAACjB,eAAe,CAACK,KAAK,CAACH,IAAP,EAAaa,WAAb,CAA5C;;AACA,UAAIV,KAAK,CAACD,UAAV,EAAsB;AAClB,YAAIc,QAAQ,GAAGC,QAAQ,CAACC,cAAT,CAAwBf,KAAK,CAACD,UAA9B,CAAf;AACAa,QAAAA,qBAAqB,GAAGA,qBAAqB,IAAI,CAACjB,eAAe,CAACkB,QAAD,EAAWH,WAAX,CAAjE;AACH;;AACD,UAAIV,KAAK,CAACG,gBAAN,KAA2BO,WAAW,KAAK,IAAhB,IAAwBE,qBAAnD,CAAJ,EAA+E;AAC3EZ,QAAAA,KAAK,CAACgB,WAAN;AACH;AACJ,KAVD;;AAWA,SAAKf,YAAL,GAAoBA,YAApB;AACA,SAAKC,YAAL,GAAoBA,YAApB;AACA,SAAKH,UAAL,GAAkBA,UAAlB;AACH;;AACDH,EAAAA,YAAY,CAACqB,SAAb,CAAuBC,UAAvB,GAAoC,YAAY;AAC5C,SAAKf,gBAAL,GAAwBR,eAAe,CAAC,KAAKE,IAAN,EAAYiB,QAAQ,CAACK,aAArB,CAAvC;AACAL,IAAAA,QAAQ,CAACM,gBAAT,CAA0B,SAA1B,EAAqC,KAAKhB,eAA1C;AACAU,IAAAA,QAAQ,CAACM,gBAAT,CAA0B,UAA1B,EAAsC,KAAKX,gBAA3C;AACH,GAJD;;AAKAb,EAAAA,YAAY,CAACqB,SAAb,CAAuBI,OAAvB,GAAiC,YAAY;AACzCP,IAAAA,QAAQ,CAACQ,mBAAT,CAA6B,SAA7B,EAAwC,KAAKlB,eAA7C;AACAU,IAAAA,QAAQ,CAACQ,mBAAT,CAA6B,UAA7B,EAAyC,KAAKb,gBAA9C;AACH,GAHD;;AAIAb,EAAAA,YAAY,CAACqB,SAAb,CAAuBD,WAAvB,GAAqC,YAAY;AAC7C,SAAKb,gBAAL,GAAwB,KAAxB;AACA,SAAKD,YAAL;AACH,GAHD;;AAIAN,EAAAA,YAAY,CAACqB,SAAb,CAAuBT,YAAvB,GAAsC,YAAY;AAC9C,SAAKL,gBAAL,GAAwB,IAAxB;AACA,SAAKF,YAAL;AACH,GAHD;;AAIA,SAAOL,YAAP;AACH,CA9CmB,EAApB;;AA+CA,eAAeA,YAAf","sourcesContent":["import { containsOrEqual } from './utils/dom';\nvar FocusTracker = (function () {\n    function FocusTracker(node, _a, viewportId) {\n        var _this = this;\n        var onFocusEnter = _a.onFocusEnter, onFocusLeave = _a.onFocusLeave;\n        if (viewportId === void 0) { viewportId = ''; }\n        this.node = node;\n        this.currentlyFocused = false;\n        this.focusInListener = function (event) {\n            var focusIsInside = containsOrEqual(_this.node, event.target);\n            if (!_this.currentlyFocused && focusIsInside) {\n                _this.triggerFocus();\n            }\n        };\n        this.focusOutListener = function (event) {\n            var nextFocused = event.relatedTarget;\n            var isNextFocusedInParent = !containsOrEqual(_this.node, nextFocused);\n            if (_this.viewportId) {\n                var viewport = document.getElementById(_this.viewportId);\n                isNextFocusedInParent = isNextFocusedInParent && !containsOrEqual(viewport, nextFocused);\n            }\n            if (_this.currentlyFocused && (nextFocused === null || isNextFocusedInParent)) {\n                _this.triggerBlur();\n            }\n        };\n        this.onFocusEnter = onFocusEnter;\n        this.onFocusLeave = onFocusLeave;\n        this.viewportId = viewportId;\n    }\n    FocusTracker.prototype.initialize = function () {\n        this.currentlyFocused = containsOrEqual(this.node, document.activeElement);\n        document.addEventListener('focusin', this.focusInListener);\n        document.addEventListener('focusout', this.focusOutListener);\n    };\n    FocusTracker.prototype.destroy = function () {\n        document.removeEventListener('focusin', this.focusInListener);\n        document.removeEventListener('focusout', this.focusOutListener);\n    };\n    FocusTracker.prototype.triggerBlur = function () {\n        this.currentlyFocused = false;\n        this.onFocusLeave();\n    };\n    FocusTracker.prototype.triggerFocus = function () {\n        this.currentlyFocused = true;\n        this.onFocusEnter();\n    };\n    return FocusTracker;\n}());\nexport default FocusTracker;\n"]},"metadata":{},"sourceType":"module"}