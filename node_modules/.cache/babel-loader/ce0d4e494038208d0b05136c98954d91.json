{"ast":null,"code":"import { __assign } from \"tslib\";\nimport React, { useContext, useRef, useState } from 'react';\nimport clsx from 'clsx';\nimport { AppLayoutContext } from './context';\nimport { SplitPanelContext } from '../../internal/context/split-panel-context';\nimport styles from './styles.css.js';\nimport { useEffectOnUpdate } from '../../internal/hooks/use-effect-on-update';\nimport { Transition } from '../../internal/components/transition';\nimport { useObservedElement } from '../utils/use-observed-element';\nimport customCssProps from '../../internal/generated/custom-css-properties';\n\nfunction SplitPanel(_a) {\n  var children = _a.children;\n\n  var _b = useContext(AppLayoutContext),\n      handleSplitPanelClick = _b.handleSplitPanelClick,\n      handleSplitPanelPreferencesChange = _b.handleSplitPanelPreferencesChange,\n      handleSplitPanelResize = _b.handleSplitPanelResize,\n      isMobile = _b.isMobile,\n      isSplitPanelForcedPosition = _b.isSplitPanelForcedPosition,\n      isSplitPanelOpen = _b.isSplitPanelOpen,\n      setSplitPanelReportedSize = _b.setSplitPanelReportedSize,\n      splitPanelPosition = _b.splitPanelPosition,\n      splitPanelSize = _b.splitPanelSize;\n\n  var _c = useState(undefined),\n      openButtonAriaLabel = _c[0],\n      setOpenButtonAriaLabel = _c[1];\n\n  var _d = useState(),\n      splitPanelLastInteraction = _d[0],\n      setSplitPanelLastInteraction = _d[1];\n\n  useEffectOnUpdate(function () {\n    return setSplitPanelLastInteraction(isSplitPanelOpen ? {\n      type: 'open'\n    } : {\n      type: 'close'\n    });\n  }, [isSplitPanelOpen]);\n  useEffectOnUpdate(function () {\n    return setSplitPanelLastInteraction({\n      type: 'position'\n    });\n  }, [splitPanelPosition]);\n  var context = {\n    bottomOffset: 0,\n    getMaxHeight: function () {\n      return document.documentElement.clientHeight - 250;\n    },\n    getMaxWidth: function () {\n      return document.documentElement.clientWidth;\n    },\n    isForcedPosition: isSplitPanelForcedPosition,\n    isMobile: isMobile,\n    isOpen: isSplitPanelOpen,\n    isRefresh: true,\n    leftOffset: 0,\n    onPreferencesChange: handleSplitPanelPreferencesChange,\n    onResize: handleSplitPanelResize,\n    onToggle: handleSplitPanelClick,\n    position: splitPanelPosition,\n    reportSize: setSplitPanelReportedSize,\n    rightOffset: 0,\n    size: splitPanelSize || 0,\n    splitPanelRef: useRef(null),\n    splitPanelHeaderRef: useRef(null),\n    topOffset: 0,\n    openButtonAriaLabel: openButtonAriaLabel,\n    setOpenButtonAriaLabel: setOpenButtonAriaLabel,\n    lastInteraction: splitPanelLastInteraction\n  };\n  return React.createElement(SplitPanelContext.Provider, {\n    value: __assign({}, context)\n  }, children);\n}\n\nfunction SplitPanelBottom() {\n  var _a = useContext(AppLayoutContext),\n      disableBodyScroll = _a.disableBodyScroll,\n      isNavigationOpen = _a.isNavigationOpen,\n      isSplitPanelOpen = _a.isSplitPanelOpen,\n      isToolsOpen = _a.isToolsOpen,\n      splitPanel = _a.splitPanel,\n      splitPanelReportedSize = _a.splitPanelReportedSize;\n\n  var _b = useContext(SplitPanelContext),\n      splitPanelPosition = _b.position,\n      splitPanelHeaderRef = _b.splitPanelHeaderRef;\n\n  var headerHeight = useObservedElement(splitPanelHeaderRef);\n\n  if (!splitPanel) {\n    return null;\n  }\n\n  return React.createElement(Transition, {\n    \"in\": isSplitPanelOpen !== null && isSplitPanelOpen !== void 0 ? isSplitPanelOpen : false,\n    exit: false\n  }, function (state, transitionEventsRef) {\n    var _a;\n\n    return React.createElement(\"section\", {\n      className: clsx(styles['split-panel-bottom'], state === 'entering' && styles.animating),\n      \"data-disable-body-scroll\": disableBodyScroll ? true : false,\n      \"data-is-navigation-open\": isNavigationOpen ? true : false,\n      \"data-is-split-panel-open\": isSplitPanelOpen ? true : false,\n      \"data-is-tools-open\": isToolsOpen ? true : false,\n      \"data-position\": splitPanelPosition,\n      ref: transitionEventsRef,\n      style: (_a = {}, _a[customCssProps.splitPanelReportedSize] = splitPanelReportedSize + \"px\", _a[customCssProps.splitPanelReportedHeaderSize] = headerHeight + \"px\", _a)\n    }, React.createElement(SplitPanel, null), splitPanelPosition === 'bottom' && splitPanel);\n  });\n}\n\nfunction SplitPanelSide() {\n  var _a = useContext(AppLayoutContext),\n      isSplitPanelOpen = _a.isSplitPanelOpen,\n      splitPanel = _a.splitPanel,\n      splitPanelMaxWidth = _a.splitPanelMaxWidth,\n      splitPanelMinWidth = _a.splitPanelMinWidth,\n      splitPanelReportedSize = _a.splitPanelReportedSize;\n\n  var splitPanelPosition = useContext(SplitPanelContext).position;\n\n  if (!splitPanel) {\n    return null;\n  }\n\n  return React.createElement(Transition, {\n    \"in\": isSplitPanelOpen !== null && isSplitPanelOpen !== void 0 ? isSplitPanelOpen : false,\n    exit: false\n  }, function (state, transitionEventsRef) {\n    var _a;\n\n    return React.createElement(\"section\", {\n      \"aria-hidden\": !isSplitPanelOpen || splitPanelPosition === 'bottom' ? true : false,\n      className: clsx(styles['split-panel-side'], state === 'entering' && styles.animating),\n      \"data-is-split-panel-open\": isSplitPanelOpen ? true : false,\n      \"data-position\": splitPanelPosition,\n      ref: transitionEventsRef,\n      style: (_a = {}, _a[customCssProps.splitPanelMaxWidth] = splitPanelMaxWidth + \"px\", _a[customCssProps.splitPanelMinWidth] = splitPanelMinWidth + \"px\", _a[customCssProps.splitPanelReportedHeaderSize] = splitPanelReportedSize + \"px\", _a)\n    }, React.createElement(\"div\", {\n      className: clsx(styles['animated-content'])\n    }, splitPanelPosition === 'side' && splitPanel));\n  });\n}\n\nexport function getSplitPanelDefaultSize(splitPanelPosition) {\n  return splitPanelPosition === 'side' ? document.documentElement.clientWidth / 3 : document.documentElement.clientHeight / 2;\n}\nexport function getSplitPanelPosition(isSplitPanelForcedPosition, splitPanelPreferences) {\n  var splitPanelPosition = 'bottom';\n\n  if (!isSplitPanelForcedPosition && (splitPanelPreferences === null || splitPanelPreferences === void 0 ? void 0 : splitPanelPreferences.position) === 'side') {\n    splitPanelPosition = 'side';\n  }\n\n  return splitPanelPosition;\n}\nSplitPanel.Bottom = SplitPanelBottom;\nSplitPanel.Side = SplitPanelSide;\nexport default SplitPanel;","map":{"version":3,"sources":["/Users/isingheg/Desktop/projects/test-react-amplify/node_modules/@awsui/components-react/app-layout/visual-refresh/split-panel.js"],"names":["__assign","React","useContext","useRef","useState","clsx","AppLayoutContext","SplitPanelContext","styles","useEffectOnUpdate","Transition","useObservedElement","customCssProps","SplitPanel","_a","children","_b","handleSplitPanelClick","handleSplitPanelPreferencesChange","handleSplitPanelResize","isMobile","isSplitPanelForcedPosition","isSplitPanelOpen","setSplitPanelReportedSize","splitPanelPosition","splitPanelSize","_c","undefined","openButtonAriaLabel","setOpenButtonAriaLabel","_d","splitPanelLastInteraction","setSplitPanelLastInteraction","type","context","bottomOffset","getMaxHeight","document","documentElement","clientHeight","getMaxWidth","clientWidth","isForcedPosition","isOpen","isRefresh","leftOffset","onPreferencesChange","onResize","onToggle","position","reportSize","rightOffset","size","splitPanelRef","splitPanelHeaderRef","topOffset","lastInteraction","createElement","Provider","value","SplitPanelBottom","disableBodyScroll","isNavigationOpen","isToolsOpen","splitPanel","splitPanelReportedSize","headerHeight","exit","state","transitionEventsRef","className","animating","ref","style","splitPanelReportedHeaderSize","SplitPanelSide","splitPanelMaxWidth","splitPanelMinWidth","getSplitPanelDefaultSize","getSplitPanelPosition","splitPanelPreferences","Bottom","Side"],"mappings":"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","sourcesContent":["import { __assign } from \"tslib\";\nimport React, { useContext, useRef, useState } from 'react';\nimport clsx from 'clsx';\nimport { AppLayoutContext } from './context';\nimport { SplitPanelContext, } from '../../internal/context/split-panel-context';\nimport styles from './styles.css.js';\nimport { useEffectOnUpdate } from '../../internal/hooks/use-effect-on-update';\nimport { Transition } from '../../internal/components/transition';\nimport { useObservedElement } from '../utils/use-observed-element';\nimport customCssProps from '../../internal/generated/custom-css-properties';\nfunction SplitPanel(_a) {\n    var children = _a.children;\n    var _b = useContext(AppLayoutContext), handleSplitPanelClick = _b.handleSplitPanelClick, handleSplitPanelPreferencesChange = _b.handleSplitPanelPreferencesChange, handleSplitPanelResize = _b.handleSplitPanelResize, isMobile = _b.isMobile, isSplitPanelForcedPosition = _b.isSplitPanelForcedPosition, isSplitPanelOpen = _b.isSplitPanelOpen, setSplitPanelReportedSize = _b.setSplitPanelReportedSize, splitPanelPosition = _b.splitPanelPosition, splitPanelSize = _b.splitPanelSize;\n    var _c = useState(undefined), openButtonAriaLabel = _c[0], setOpenButtonAriaLabel = _c[1];\n    var _d = useState(), splitPanelLastInteraction = _d[0], setSplitPanelLastInteraction = _d[1];\n    useEffectOnUpdate(function () { return setSplitPanelLastInteraction(isSplitPanelOpen ? { type: 'open' } : { type: 'close' }); }, [isSplitPanelOpen]);\n    useEffectOnUpdate(function () { return setSplitPanelLastInteraction({ type: 'position' }); }, [splitPanelPosition]);\n    var context = {\n        bottomOffset: 0,\n        getMaxHeight: function () { return document.documentElement.clientHeight - 250; },\n        getMaxWidth: function () { return document.documentElement.clientWidth; },\n        isForcedPosition: isSplitPanelForcedPosition,\n        isMobile: isMobile,\n        isOpen: isSplitPanelOpen,\n        isRefresh: true,\n        leftOffset: 0,\n        onPreferencesChange: handleSplitPanelPreferencesChange,\n        onResize: handleSplitPanelResize,\n        onToggle: handleSplitPanelClick,\n        position: splitPanelPosition,\n        reportSize: setSplitPanelReportedSize,\n        rightOffset: 0,\n        size: splitPanelSize || 0,\n        splitPanelRef: useRef(null),\n        splitPanelHeaderRef: useRef(null),\n        topOffset: 0,\n        openButtonAriaLabel: openButtonAriaLabel,\n        setOpenButtonAriaLabel: setOpenButtonAriaLabel,\n        lastInteraction: splitPanelLastInteraction\n    };\n    return React.createElement(SplitPanelContext.Provider, { value: __assign({}, context) }, children);\n}\nfunction SplitPanelBottom() {\n    var _a = useContext(AppLayoutContext), disableBodyScroll = _a.disableBodyScroll, isNavigationOpen = _a.isNavigationOpen, isSplitPanelOpen = _a.isSplitPanelOpen, isToolsOpen = _a.isToolsOpen, splitPanel = _a.splitPanel, splitPanelReportedSize = _a.splitPanelReportedSize;\n    var _b = useContext(SplitPanelContext), splitPanelPosition = _b.position, splitPanelHeaderRef = _b.splitPanelHeaderRef;\n    var headerHeight = useObservedElement(splitPanelHeaderRef);\n    if (!splitPanel) {\n        return null;\n    }\n    return (React.createElement(Transition, { \"in\": isSplitPanelOpen !== null && isSplitPanelOpen !== void 0 ? isSplitPanelOpen : false, exit: false }, function (state, transitionEventsRef) {\n        var _a;\n        return (React.createElement(\"section\", { className: clsx(styles['split-panel-bottom'], state === 'entering' && styles.animating), \"data-disable-body-scroll\": disableBodyScroll ? true : false, \"data-is-navigation-open\": isNavigationOpen ? true : false, \"data-is-split-panel-open\": isSplitPanelOpen ? true : false, \"data-is-tools-open\": isToolsOpen ? true : false, \"data-position\": splitPanelPosition, ref: transitionEventsRef, style: (_a = {},\n                _a[customCssProps.splitPanelReportedSize] = splitPanelReportedSize + \"px\",\n                _a[customCssProps.splitPanelReportedHeaderSize] = headerHeight + \"px\",\n                _a) },\n            React.createElement(SplitPanel, null),\n            splitPanelPosition === 'bottom' && splitPanel));\n    }));\n}\nfunction SplitPanelSide() {\n    var _a = useContext(AppLayoutContext), isSplitPanelOpen = _a.isSplitPanelOpen, splitPanel = _a.splitPanel, splitPanelMaxWidth = _a.splitPanelMaxWidth, splitPanelMinWidth = _a.splitPanelMinWidth, splitPanelReportedSize = _a.splitPanelReportedSize;\n    var splitPanelPosition = useContext(SplitPanelContext).position;\n    if (!splitPanel) {\n        return null;\n    }\n    return (React.createElement(Transition, { \"in\": isSplitPanelOpen !== null && isSplitPanelOpen !== void 0 ? isSplitPanelOpen : false, exit: false }, function (state, transitionEventsRef) {\n        var _a;\n        return (React.createElement(\"section\", { \"aria-hidden\": !isSplitPanelOpen || splitPanelPosition === 'bottom' ? true : false, className: clsx(styles['split-panel-side'], state === 'entering' && styles.animating), \"data-is-split-panel-open\": isSplitPanelOpen ? true : false, \"data-position\": splitPanelPosition, ref: transitionEventsRef, style: (_a = {},\n                _a[customCssProps.splitPanelMaxWidth] = splitPanelMaxWidth + \"px\",\n                _a[customCssProps.splitPanelMinWidth] = splitPanelMinWidth + \"px\",\n                _a[customCssProps.splitPanelReportedHeaderSize] = splitPanelReportedSize + \"px\",\n                _a) },\n            React.createElement(\"div\", { className: clsx(styles['animated-content']) }, splitPanelPosition === 'side' && splitPanel)));\n    }));\n}\nexport function getSplitPanelDefaultSize(splitPanelPosition) {\n    return splitPanelPosition === 'side'\n        ? document.documentElement.clientWidth / 3\n        : document.documentElement.clientHeight / 2;\n}\nexport function getSplitPanelPosition(isSplitPanelForcedPosition, splitPanelPreferences) {\n    var splitPanelPosition = 'bottom';\n    if (!isSplitPanelForcedPosition && (splitPanelPreferences === null || splitPanelPreferences === void 0 ? void 0 : splitPanelPreferences.position) === 'side') {\n        splitPanelPosition = 'side';\n    }\n    return splitPanelPosition;\n}\nSplitPanel.Bottom = SplitPanelBottom;\nSplitPanel.Side = SplitPanelSide;\nexport default SplitPanel;\n"]},"metadata":{},"sourceType":"module"}