{"ast":null,"code":"import React, { useContext } from 'react';\nimport clsx from 'clsx';\nimport { AppLayoutContext } from './context';\nimport { InternalButton } from '../../button/internal';\nimport styles from './styles.css.js';\nimport testutilStyles from '../test-utils/styles.css.js';\nimport { useFocusControl } from '../utils/use-focus-control';\nexport default function AppBar() {\n  var _a, _b, _c;\n\n  var _d, _e, _f;\n\n  var _g = useContext(AppLayoutContext),\n      ariaLabels = _g.ariaLabels,\n      breadcrumbs = _g.breadcrumbs,\n      contentHeader = _g.contentHeader,\n      contentType = _g.contentType,\n      handleNavigationClick = _g.handleNavigationClick,\n      handleToolsClick = _g.handleToolsClick,\n      hasNotificationsContent = _g.hasNotificationsContent,\n      isMobile = _g.isMobile,\n      navigationHide = _g.navigationHide,\n      isNavigationOpen = _g.isNavigationOpen,\n      isToolsOpen = _g.isToolsOpen,\n      toolsHide = _g.toolsHide,\n      isAnyPanelOpen = _g.isAnyPanelOpen;\n\n  var focusRefsNav = useFocusControl(isNavigationOpen);\n  var focusRefsTools = useFocusControl(isToolsOpen);\n\n  if (navigationHide && !breadcrumbs && toolsHide) {\n    return null;\n  }\n\n  return React.createElement(\"section\", {\n    \"aria-hidden\": !isMobile && !breadcrumbs ? true : undefined,\n    className: clsx(styles.appbar, 'awsui-context-content-header', (_a = {}, _a[testutilStyles['mobile-bar']] = isMobile, _a[styles.unfocusable] = isMobile && isAnyPanelOpen, _a)),\n    \"data-has-breadcrumbs\": breadcrumbs ? true : false\n  }, !navigationHide && isMobile && React.createElement(\"nav\", {\n    className: clsx(styles['appbar-nav'], (_b = {}, _b[testutilStyles['drawer-closed']] = !isNavigationOpen, _b)),\n    \"aria-hidden\": isNavigationOpen\n  }, React.createElement(InternalButton, {\n    ariaLabel: (_d = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigationToggle) !== null && _d !== void 0 ? _d : undefined,\n    \"aria-expanded\": isNavigationOpen,\n    iconName: \"menu\",\n    formAction: \"none\",\n    onClick: function () {\n      return handleNavigationClick(true);\n    },\n    variant: \"icon\",\n    className: testutilStyles['navigation-toggle'],\n    ref: focusRefsNav.toggle,\n    disabled: isAnyPanelOpen\n  })), breadcrumbs && React.createElement(\"div\", {\n    className: clsx(styles.breadcrumbs, testutilStyles.breadcrumbs),\n    \"data-content-type\": contentType,\n    \"data-has-header\": contentHeader ? true : false,\n    \"data-has-notifications-content\": hasNotificationsContent ? true : false\n  }, breadcrumbs), !toolsHide && isMobile && React.createElement(\"aside\", {\n    className: clsx(styles['appbar-tools'], (_c = {}, _c[testutilStyles['drawer-closed']] = !isToolsOpen, _c)),\n    \"aria-hidden\": isToolsOpen,\n    \"aria-label\": (_e = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tools) !== null && _e !== void 0 ? _e : undefined\n  }, React.createElement(InternalButton, {\n    className: testutilStyles['tools-toggle'],\n    \"aria-expanded\": isToolsOpen,\n    disabled: isAnyPanelOpen,\n    ariaLabel: (_f = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.toolsToggle) !== null && _f !== void 0 ? _f : undefined,\n    iconName: \"status-info\",\n    formAction: \"none\",\n    onClick: function () {\n      return handleToolsClick(true);\n    },\n    variant: \"icon\",\n    ref: focusRefsTools.toggle\n  })));\n}","map":{"version":3,"sources":["/Users/isingheg/Desktop/projects/test-react-amplify/node_modules/@awsui/components-react/app-layout/visual-refresh/app-bar.js"],"names":["React","useContext","clsx","AppLayoutContext","InternalButton","styles","testutilStyles","useFocusControl","AppBar","_a","_b","_c","_d","_e","_f","_g","ariaLabels","breadcrumbs","contentHeader","contentType","handleNavigationClick","handleToolsClick","hasNotificationsContent","isMobile","navigationHide","isNavigationOpen","isToolsOpen","toolsHide","isAnyPanelOpen","focusRefsNav","focusRefsTools","createElement","undefined","className","appbar","unfocusable","ariaLabel","navigationToggle","iconName","formAction","onClick","variant","ref","toggle","disabled","tools","toolsToggle"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\nimport clsx from 'clsx';\nimport { AppLayoutContext } from './context';\nimport { InternalButton } from '../../button/internal';\nimport styles from './styles.css.js';\nimport testutilStyles from '../test-utils/styles.css.js';\nimport { useFocusControl } from '../utils/use-focus-control';\nexport default function AppBar() {\n    var _a, _b, _c;\n    var _d, _e, _f;\n    var _g = useContext(AppLayoutContext), ariaLabels = _g.ariaLabels, breadcrumbs = _g.breadcrumbs, contentHeader = _g.contentHeader, contentType = _g.contentType, handleNavigationClick = _g.handleNavigationClick, handleToolsClick = _g.handleToolsClick, hasNotificationsContent = _g.hasNotificationsContent, isMobile = _g.isMobile, navigationHide = _g.navigationHide, isNavigationOpen = _g.isNavigationOpen, isToolsOpen = _g.isToolsOpen, toolsHide = _g.toolsHide, isAnyPanelOpen = _g.isAnyPanelOpen;\n    var focusRefsNav = useFocusControl(isNavigationOpen);\n    var focusRefsTools = useFocusControl(isToolsOpen);\n    if (navigationHide && !breadcrumbs && toolsHide) {\n        return null;\n    }\n    return (React.createElement(\"section\", { \"aria-hidden\": !isMobile && !breadcrumbs ? true : undefined, className: clsx(styles.appbar, 'awsui-context-content-header', (_a = {},\n            _a[testutilStyles['mobile-bar']] = isMobile,\n            _a[styles.unfocusable] = isMobile && isAnyPanelOpen,\n            _a)), \"data-has-breadcrumbs\": breadcrumbs ? true : false },\n        !navigationHide && isMobile && (React.createElement(\"nav\", { className: clsx(styles['appbar-nav'], (_b = {}, _b[testutilStyles['drawer-closed']] = !isNavigationOpen, _b)), \"aria-hidden\": isNavigationOpen },\n            React.createElement(InternalButton, { ariaLabel: (_d = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigationToggle) !== null && _d !== void 0 ? _d : undefined, \"aria-expanded\": isNavigationOpen, iconName: \"menu\", formAction: \"none\", onClick: function () { return handleNavigationClick(true); }, variant: \"icon\", className: testutilStyles['navigation-toggle'], ref: focusRefsNav.toggle, disabled: isAnyPanelOpen }))),\n        breadcrumbs && (React.createElement(\"div\", { className: clsx(styles.breadcrumbs, testutilStyles.breadcrumbs), \"data-content-type\": contentType, \"data-has-header\": contentHeader ? true : false, \"data-has-notifications-content\": hasNotificationsContent ? true : false }, breadcrumbs)),\n        !toolsHide && isMobile && (React.createElement(\"aside\", { className: clsx(styles['appbar-tools'], (_c = {}, _c[testutilStyles['drawer-closed']] = !isToolsOpen, _c)), \"aria-hidden\": isToolsOpen, \"aria-label\": (_e = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tools) !== null && _e !== void 0 ? _e : undefined },\n            React.createElement(InternalButton, { className: testutilStyles['tools-toggle'], \"aria-expanded\": isToolsOpen, disabled: isAnyPanelOpen, ariaLabel: (_f = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.toolsToggle) !== null && _f !== void 0 ? _f : undefined, iconName: \"status-info\", formAction: \"none\", onClick: function () { return handleToolsClick(true); }, variant: \"icon\", ref: focusRefsTools.toggle })))));\n}\n"]},"metadata":{},"sourceType":"module"}