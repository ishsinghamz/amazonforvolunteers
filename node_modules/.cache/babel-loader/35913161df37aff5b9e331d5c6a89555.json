{"ast":null,"code":"import { ResizeObserver, ResizeObserverEntry } from '@juggle/resize-observer';\nimport { useState, useLayoutEffect, useEffect } from 'react';\nexport function useResizeObserver(getElement, mapFn) {\n  var _a = useState(null),\n      state = _a[0],\n      setState = _a[1];\n\n  useLayoutEffect(function () {\n    var element = getElement();\n\n    if (element) {\n      setState(function (prevState) {\n        return mapFn(new ResizeObserverEntry(element), prevState);\n      });\n    }\n  }, []);\n  useEffect(function () {\n    var element = getElement();\n\n    if (element) {\n      var connected_1 = true;\n      var observer_1 = new ResizeObserver(function (entries) {\n        if (connected_1) {\n          setState(function (prevState) {\n            return mapFn(entries[0], prevState);\n          });\n        }\n      });\n      observer_1.observe(element);\n      return function () {\n        connected_1 = false;\n        observer_1.disconnect();\n      };\n    }\n  }, [getElement, mapFn]);\n  return state;\n}","map":{"version":3,"sources":["/Users/isingheg/Desktop/projects/amazonforvolunteers-ui/node_modules/@awsui/components-react/internal/hooks/container-queries/use-resize-observer.js"],"names":["ResizeObserver","ResizeObserverEntry","useState","useLayoutEffect","useEffect","useResizeObserver","getElement","mapFn","_a","state","setState","element","prevState","connected_1","observer_1","entries","observe","disconnect"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,mBAAzB,QAAoD,yBAApD;AACA,SAASC,QAAT,EAAmBC,eAAnB,EAAoCC,SAApC,QAAqD,OAArD;AACA,OAAO,SAASC,iBAAT,CAA2BC,UAA3B,EAAuCC,KAAvC,EAA8C;AACjD,MAAIC,EAAE,GAAGN,QAAQ,CAAC,IAAD,CAAjB;AAAA,MAAyBO,KAAK,GAAGD,EAAE,CAAC,CAAD,CAAnC;AAAA,MAAwCE,QAAQ,GAAGF,EAAE,CAAC,CAAD,CAArD;;AACAL,EAAAA,eAAe,CAAC,YAAY;AACxB,QAAIQ,OAAO,GAAGL,UAAU,EAAxB;;AACA,QAAIK,OAAJ,EAAa;AACTD,MAAAA,QAAQ,CAAC,UAAUE,SAAV,EAAqB;AAAE,eAAOL,KAAK,CAAC,IAAIN,mBAAJ,CAAwBU,OAAxB,CAAD,EAAmCC,SAAnC,CAAZ;AAA4D,OAApF,CAAR;AACH;AACJ,GALc,EAKZ,EALY,CAAf;AAMAR,EAAAA,SAAS,CAAC,YAAY;AAClB,QAAIO,OAAO,GAAGL,UAAU,EAAxB;;AACA,QAAIK,OAAJ,EAAa;AACT,UAAIE,WAAW,GAAG,IAAlB;AACA,UAAIC,UAAU,GAAG,IAAId,cAAJ,CAAmB,UAAUe,OAAV,EAAmB;AACnD,YAAIF,WAAJ,EAAiB;AACbH,UAAAA,QAAQ,CAAC,UAAUE,SAAV,EAAqB;AAAE,mBAAOL,KAAK,CAACQ,OAAO,CAAC,CAAD,CAAR,EAAaH,SAAb,CAAZ;AAAsC,WAA9D,CAAR;AACH;AACJ,OAJgB,CAAjB;AAKAE,MAAAA,UAAU,CAACE,OAAX,CAAmBL,OAAnB;AACA,aAAO,YAAY;AACfE,QAAAA,WAAW,GAAG,KAAd;AACAC,QAAAA,UAAU,CAACG,UAAX;AACH,OAHD;AAIH;AACJ,GAfQ,EAeN,CAACX,UAAD,EAAaC,KAAb,CAfM,CAAT;AAgBA,SAAOE,KAAP;AACH","sourcesContent":["import { ResizeObserver, ResizeObserverEntry } from '@juggle/resize-observer';\nimport { useState, useLayoutEffect, useEffect } from 'react';\nexport function useResizeObserver(getElement, mapFn) {\n    var _a = useState(null), state = _a[0], setState = _a[1];\n    useLayoutEffect(function () {\n        var element = getElement();\n        if (element) {\n            setState(function (prevState) { return mapFn(new ResizeObserverEntry(element), prevState); });\n        }\n    }, []);\n    useEffect(function () {\n        var element = getElement();\n        if (element) {\n            var connected_1 = true;\n            var observer_1 = new ResizeObserver(function (entries) {\n                if (connected_1) {\n                    setState(function (prevState) { return mapFn(entries[0], prevState); });\n                }\n            });\n            observer_1.observe(element);\n            return function () {\n                connected_1 = false;\n                observer_1.disconnect();\n            };\n        }\n    }, [getElement, mapFn]);\n    return state;\n}\n"]},"metadata":{},"sourceType":"module"}