{"ast":null,"code":"var BYTES_BASE = 1024;\nvar BYTES_DECIMALS = 2;\nvar BYTES_SIZES = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\nexport function formatDefault(value) {\n  return value ? value : '-';\n}\nexport function formatSize(bytes) {\n  if (bytes === undefined) {\n    return '-';\n  }\n\n  if (bytes === 0) {\n    return \"0 \" + BYTES_SIZES[0];\n  }\n\n  var i = Math.floor(Math.log(bytes) / Math.log(BYTES_BASE));\n  return parseFloat((bytes / Math.pow(BYTES_BASE, i)).toFixed(BYTES_DECIMALS)) + ' ' + BYTES_SIZES[i];\n}","map":{"version":3,"sources":["/Users/isingheg/Desktop/projects/amazonforvolunteers-ui/node_modules/@awsui/components-react/s3-resource-selector/s3-modal/column-formats.js"],"names":["BYTES_BASE","BYTES_DECIMALS","BYTES_SIZES","formatDefault","value","formatSize","bytes","undefined","i","Math","floor","log","parseFloat","pow","toFixed"],"mappings":"AAAA,IAAIA,UAAU,GAAG,IAAjB;AACA,IAAIC,cAAc,GAAG,CAArB;AACA,IAAIC,WAAW,GAAG,CAAC,OAAD,EAAU,IAAV,EAAgB,IAAhB,EAAsB,IAAtB,EAA4B,IAA5B,EAAkC,IAAlC,EAAwC,IAAxC,EAA8C,IAA9C,EAAoD,IAApD,CAAlB;AACA,OAAO,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AACjC,SAAOA,KAAK,GAAGA,KAAH,GAAW,GAAvB;AACH;AACD,OAAO,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AAC9B,MAAIA,KAAK,KAAKC,SAAd,EAAyB;AACrB,WAAO,GAAP;AACH;;AACD,MAAID,KAAK,KAAK,CAAd,EAAiB;AACb,WAAO,OAAOJ,WAAW,CAAC,CAAD,CAAzB;AACH;;AACD,MAAIM,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,GAAL,CAASL,KAAT,IAAkBG,IAAI,CAACE,GAAL,CAASX,UAAT,CAA7B,CAAR;AACA,SAAOY,UAAU,CAAC,CAACN,KAAK,GAAGG,IAAI,CAACI,GAAL,CAASb,UAAT,EAAqBQ,CAArB,CAAT,EAAkCM,OAAlC,CAA0Cb,cAA1C,CAAD,CAAV,GAAwE,GAAxE,GAA8EC,WAAW,CAACM,CAAD,CAAhG;AACH","sourcesContent":["var BYTES_BASE = 1024;\nvar BYTES_DECIMALS = 2;\nvar BYTES_SIZES = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\nexport function formatDefault(value) {\n    return value ? value : '-';\n}\nexport function formatSize(bytes) {\n    if (bytes === undefined) {\n        return '-';\n    }\n    if (bytes === 0) {\n        return \"0 \" + BYTES_SIZES[0];\n    }\n    var i = Math.floor(Math.log(bytes) / Math.log(BYTES_BASE));\n    return parseFloat((bytes / Math.pow(BYTES_BASE, i)).toFixed(BYTES_DECIMALS)) + ' ' + BYTES_SIZES[i];\n}\n"]},"metadata":{},"sourceType":"module"}