{"ast":null,"code":"import React, { forwardRef, useImperativeHandle, useRef } from 'react';\nimport InternalSegmentedControl from '../segmented-control/internal';\nimport segmentedControlStyles from '../segmented-control/styles.css.js';\nimport buttonTriggerStyles from '../internal/components/button-trigger/styles.css.js';\nimport styles from './styles.css.js';\nexport default forwardRef(ModeSwitcher);\n\nfunction ModeSwitcher(_a, ref) {\n  var i18nStrings = _a.i18nStrings,\n      mode = _a.mode,\n      onChange = _a.onChange;\n  var elementRef = useRef(null);\n  useImperativeHandle(ref, function () {\n    return {\n      focus: function () {\n        if (elementRef.current) {\n          elementRef.current.getElementsByClassName(segmentedControlStyles.selected)[0].focus();\n          var select = elementRef.current.getElementsByClassName(buttonTriggerStyles['button-trigger']);\n\n          for (var _i = 0, _a = Array.prototype.slice.call(select); _i < _a.length; _i++) {\n            var button = _a[_i];\n            button.focus();\n          }\n        }\n      }\n    };\n  });\n  return React.createElement(\"div\", {\n    ref: elementRef\n  }, React.createElement(InternalSegmentedControl, {\n    className: styles['mode-switch'],\n    selectedId: mode,\n    options: [{\n      id: 'relative',\n      text: i18nStrings.relativeModeTitle\n    }, {\n      id: 'absolute',\n      text: i18nStrings.absoluteModeTitle\n    }],\n    onChange: function (e) {\n      return onChange(e.detail.selectedId);\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/isingheg/Desktop/projects/amazonforvolunteers-ui/node_modules/@awsui/components-react/date-range-picker/mode-switcher.js"],"names":["React","forwardRef","useImperativeHandle","useRef","InternalSegmentedControl","segmentedControlStyles","buttonTriggerStyles","styles","ModeSwitcher","_a","ref","i18nStrings","mode","onChange","elementRef","focus","current","getElementsByClassName","selected","select","_i","Array","prototype","slice","call","length","button","createElement","className","selectedId","options","id","text","relativeModeTitle","absoluteModeTitle","e","detail"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,mBAA5B,EAAiDC,MAAjD,QAA+D,OAA/D;AACA,OAAOC,wBAAP,MAAqC,+BAArC;AACA,OAAOC,sBAAP,MAAmC,oCAAnC;AACA,OAAOC,mBAAP,MAAgC,qDAAhC;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,eAAeN,UAAU,CAACO,YAAD,CAAzB;;AACA,SAASA,YAAT,CAAsBC,EAAtB,EAA0BC,GAA1B,EAA+B;AAC3B,MAAIC,WAAW,GAAGF,EAAE,CAACE,WAArB;AAAA,MAAkCC,IAAI,GAAGH,EAAE,CAACG,IAA5C;AAAA,MAAkDC,QAAQ,GAAGJ,EAAE,CAACI,QAAhE;AACA,MAAIC,UAAU,GAAGX,MAAM,CAAC,IAAD,CAAvB;AACAD,EAAAA,mBAAmB,CAACQ,GAAD,EAAM,YAAY;AAAE,WAAQ;AAC3CK,MAAAA,KAAK,EAAE,YAAY;AACf,YAAID,UAAU,CAACE,OAAf,EAAwB;AACpBF,UAAAA,UAAU,CAACE,OAAX,CAAmBC,sBAAnB,CAA0CZ,sBAAsB,CAACa,QAAjE,EAA2E,CAA3E,EAA8EH,KAA9E;AACA,cAAII,MAAM,GAAGL,UAAU,CAACE,OAAX,CAAmBC,sBAAnB,CAA0CX,mBAAmB,CAAC,gBAAD,CAA7D,CAAb;;AACA,eAAK,IAAIc,EAAE,GAAG,CAAT,EAAYX,EAAE,GAAGY,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BL,MAA3B,CAAtB,EAA0DC,EAAE,GAAGX,EAAE,CAACgB,MAAlE,EAA0EL,EAAE,EAA5E,EAAgF;AAC5E,gBAAIM,MAAM,GAAGjB,EAAE,CAACW,EAAD,CAAf;AACAM,YAAAA,MAAM,CAACX,KAAP;AACH;AACJ;AACJ;AAV0C,KAAR;AAWlC,GAXc,CAAnB;AAYA,SAAQf,KAAK,CAAC2B,aAAN,CAAoB,KAApB,EAA2B;AAAEjB,IAAAA,GAAG,EAAEI;AAAP,GAA3B,EACJd,KAAK,CAAC2B,aAAN,CAAoBvB,wBAApB,EAA8C;AAAEwB,IAAAA,SAAS,EAAErB,MAAM,CAAC,aAAD,CAAnB;AAAoCsB,IAAAA,UAAU,EAAEjB,IAAhD;AAAsDkB,IAAAA,OAAO,EAAE,CACrG;AAAEC,MAAAA,EAAE,EAAE,UAAN;AAAkBC,MAAAA,IAAI,EAAErB,WAAW,CAACsB;AAApC,KADqG,EAErG;AAAEF,MAAAA,EAAE,EAAE,UAAN;AAAkBC,MAAAA,IAAI,EAAErB,WAAW,CAACuB;AAApC,KAFqG,CAA/D;AAGvCrB,IAAAA,QAAQ,EAAE,UAAUsB,CAAV,EAAa;AAAE,aAAOtB,QAAQ,CAACsB,CAAC,CAACC,MAAF,CAASP,UAAV,CAAf;AAAuC;AAHzB,GAA9C,CADI,CAAR;AAKH","sourcesContent":["import React, { forwardRef, useImperativeHandle, useRef } from 'react';\nimport InternalSegmentedControl from '../segmented-control/internal';\nimport segmentedControlStyles from '../segmented-control/styles.css.js';\nimport buttonTriggerStyles from '../internal/components/button-trigger/styles.css.js';\nimport styles from './styles.css.js';\nexport default forwardRef(ModeSwitcher);\nfunction ModeSwitcher(_a, ref) {\n    var i18nStrings = _a.i18nStrings, mode = _a.mode, onChange = _a.onChange;\n    var elementRef = useRef(null);\n    useImperativeHandle(ref, function () { return ({\n        focus: function () {\n            if (elementRef.current) {\n                elementRef.current.getElementsByClassName(segmentedControlStyles.selected)[0].focus();\n                var select = elementRef.current.getElementsByClassName(buttonTriggerStyles['button-trigger']);\n                for (var _i = 0, _a = Array.prototype.slice.call(select); _i < _a.length; _i++) {\n                    var button = _a[_i];\n                    button.focus();\n                }\n            }\n        }\n    }); });\n    return (React.createElement(\"div\", { ref: elementRef },\n        React.createElement(InternalSegmentedControl, { className: styles['mode-switch'], selectedId: mode, options: [\n                { id: 'relative', text: i18nStrings.relativeModeTitle },\n                { id: 'absolute', text: i18nStrings.absoluteModeTitle },\n            ], onChange: function (e) { return onChange(e.detail.selectedId); } })));\n}\n"]},"metadata":{},"sourceType":"module"}