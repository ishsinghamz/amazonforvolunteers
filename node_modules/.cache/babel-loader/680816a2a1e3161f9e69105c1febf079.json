{"ast":null,"code":"import React, { useMemo } from 'react';\nimport styles from '../../styles.css.js';\nimport GridDay from './day';\nimport { KeyCode } from '../../../internal/keycode';\nimport { addDays, addWeeks, isSameMonth } from 'date-fns';\nimport { getCalendarMonth } from 'mnth';\nimport rotateDayIndexes from '../utils/rotate-day-indexes';\nimport { renderDayName } from '../utils/intl';\n\nvar Grid = function (_a) {\n  var locale = _a.locale,\n      baseDate = _a.baseDate,\n      isDateEnabled = _a.isDateEnabled,\n      focusedDate = _a.focusedDate,\n      onSelectDate = _a.onSelectDate,\n      onFocusDate = _a.onFocusDate,\n      onChangeMonth = _a.onChangeMonth,\n      startOfWeek = _a.startOfWeek,\n      todayAriaLabel = _a.todayAriaLabel,\n      selectedDate = _a.selectedDate,\n      handleFocusMove = _a.handleFocusMove;\n\n  var onGridKeyDownHandler = function (event) {\n    var updatedFocusDate;\n\n    if (focusedDate === null) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case KeyCode.enter:\n        event.preventDefault();\n\n        if (focusedDate) {\n          onFocusDate({\n            date: null\n          });\n          onSelectDate({\n            date: focusedDate\n          });\n        }\n\n        return;\n\n      case KeyCode.right:\n        event.preventDefault();\n        updatedFocusDate = handleFocusMove(focusedDate, isDateEnabled, function (date) {\n          return addDays(date, 1);\n        });\n        break;\n\n      case KeyCode.left:\n        event.preventDefault();\n        updatedFocusDate = handleFocusMove(focusedDate, isDateEnabled, function (date) {\n          return addDays(date, -1);\n        });\n        break;\n\n      case KeyCode.up:\n        event.preventDefault();\n        updatedFocusDate = handleFocusMove(focusedDate, isDateEnabled, function (date) {\n          return addWeeks(date, -1);\n        });\n        break;\n\n      case KeyCode.down:\n        event.preventDefault();\n        updatedFocusDate = handleFocusMove(focusedDate, isDateEnabled, function (date) {\n          return addWeeks(date, 1);\n        });\n        break;\n\n      default:\n        return;\n    }\n\n    if (!isSameMonth(updatedFocusDate, baseDate)) {\n      onChangeMonth(updatedFocusDate);\n    }\n\n    onFocusDate({\n      date: updatedFocusDate\n    });\n  };\n\n  var weeks = useMemo(function () {\n    return getCalendarMonth(baseDate, {\n      firstDayOfWeek: startOfWeek\n    });\n  }, [baseDate, startOfWeek]);\n  return React.createElement(\"div\", null, React.createElement(\"div\", {\n    className: styles['calendar-day-names']\n  }, rotateDayIndexes(startOfWeek).map(function (i) {\n    return React.createElement(\"div\", {\n      key: \"day-name-\" + i,\n      className: styles['calendar-day-name']\n    }, renderDayName(locale, i));\n  })), React.createElement(\"div\", {\n    className: styles['calendar-dates'],\n    onKeyDown: onGridKeyDownHandler\n  }, weeks.map(function (week, weekIndex) {\n    var isDateInLastWeek = weeks.length - 1 === weekIndex;\n    return React.createElement(\"div\", {\n      key: \"week-\" + weekIndex,\n      className: styles['calendar-week']\n    }, week.map(function (date, dateIndex) {\n      return React.createElement(GridDay, {\n        key: \"date-\" + weekIndex + \"-\" + dateIndex,\n        locale: locale,\n        baseDate: baseDate,\n        selectedDate: selectedDate,\n        date: date,\n        focusedDate: focusedDate,\n        todayAriaLabel: todayAriaLabel,\n        onSelectDate: function (date) {\n          onSelectDate({\n            date: date\n          });\n        },\n        isDateEnabled: isDateEnabled,\n        isDateInLastWeek: isDateInLastWeek\n      });\n    }));\n  })));\n};\n\nexport default Grid;","map":{"version":3,"sources":["/Users/isingheg/Desktop/projects/amazonforvolunteers-ui/node_modules/@awsui/components-react/date-picker/calendar/grid/index.js"],"names":["React","useMemo","styles","GridDay","KeyCode","addDays","addWeeks","isSameMonth","getCalendarMonth","rotateDayIndexes","renderDayName","Grid","_a","locale","baseDate","isDateEnabled","focusedDate","onSelectDate","onFocusDate","onChangeMonth","startOfWeek","todayAriaLabel","selectedDate","handleFocusMove","onGridKeyDownHandler","event","updatedFocusDate","keyCode","enter","preventDefault","date","right","left","up","down","weeks","firstDayOfWeek","createElement","className","map","i","key","onKeyDown","week","weekIndex","isDateInLastWeek","length","dateIndex"],"mappings":"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","sourcesContent":["import React, { useMemo } from 'react';\nimport styles from '../../styles.css.js';\nimport GridDay from './day';\nimport { KeyCode } from '../../../internal/keycode';\nimport { addDays, addWeeks, isSameMonth } from 'date-fns';\nimport { getCalendarMonth } from 'mnth';\nimport rotateDayIndexes from '../utils/rotate-day-indexes';\nimport { renderDayName } from '../utils/intl';\nvar Grid = function (_a) {\n    var locale = _a.locale, baseDate = _a.baseDate, isDateEnabled = _a.isDateEnabled, focusedDate = _a.focusedDate, onSelectDate = _a.onSelectDate, onFocusDate = _a.onFocusDate, onChangeMonth = _a.onChangeMonth, startOfWeek = _a.startOfWeek, todayAriaLabel = _a.todayAriaLabel, selectedDate = _a.selectedDate, handleFocusMove = _a.handleFocusMove;\n    var onGridKeyDownHandler = function (event) {\n        var updatedFocusDate;\n        if (focusedDate === null) {\n            return;\n        }\n        switch (event.keyCode) {\n            case KeyCode.enter:\n                event.preventDefault();\n                if (focusedDate) {\n                    onFocusDate({ date: null });\n                    onSelectDate({ date: focusedDate });\n                }\n                return;\n            case KeyCode.right:\n                event.preventDefault();\n                updatedFocusDate = handleFocusMove(focusedDate, isDateEnabled, function (date) { return addDays(date, 1); });\n                break;\n            case KeyCode.left:\n                event.preventDefault();\n                updatedFocusDate = handleFocusMove(focusedDate, isDateEnabled, function (date) { return addDays(date, -1); });\n                break;\n            case KeyCode.up:\n                event.preventDefault();\n                updatedFocusDate = handleFocusMove(focusedDate, isDateEnabled, function (date) { return addWeeks(date, -1); });\n                break;\n            case KeyCode.down:\n                event.preventDefault();\n                updatedFocusDate = handleFocusMove(focusedDate, isDateEnabled, function (date) { return addWeeks(date, 1); });\n                break;\n            default:\n                return;\n        }\n        if (!isSameMonth(updatedFocusDate, baseDate)) {\n            onChangeMonth(updatedFocusDate);\n        }\n        onFocusDate({ date: updatedFocusDate });\n    };\n    var weeks = useMemo(function () { return getCalendarMonth(baseDate, { firstDayOfWeek: startOfWeek }); }, [baseDate, startOfWeek]);\n    return (React.createElement(\"div\", null,\n        React.createElement(\"div\", { className: styles['calendar-day-names'] }, rotateDayIndexes(startOfWeek).map(function (i) { return (React.createElement(\"div\", { key: \"day-name-\" + i, className: styles['calendar-day-name'] }, renderDayName(locale, i))); })),\n        React.createElement(\"div\", { className: styles['calendar-dates'], onKeyDown: onGridKeyDownHandler }, weeks.map(function (week, weekIndex) {\n            var isDateInLastWeek = weeks.length - 1 === weekIndex;\n            return (React.createElement(\"div\", { key: \"week-\" + weekIndex, className: styles['calendar-week'] }, week.map(function (date, dateIndex) {\n                return (React.createElement(GridDay, { key: \"date-\" + weekIndex + \"-\" + dateIndex, locale: locale, baseDate: baseDate, selectedDate: selectedDate, date: date, focusedDate: focusedDate, todayAriaLabel: todayAriaLabel, onSelectDate: function (date) {\n                        onSelectDate({ date: date });\n                    }, isDateEnabled: isDateEnabled, isDateInLastWeek: isDateInLastWeek }));\n            })));\n        }))));\n};\nexport default Grid;\n"]},"metadata":{},"sourceType":"module"}