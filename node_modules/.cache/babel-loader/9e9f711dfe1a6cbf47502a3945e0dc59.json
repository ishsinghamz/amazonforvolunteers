{"ast":null,"code":"import clsx from 'clsx';\nimport React from 'react';\nimport { AppLayoutButton, CloseButton, togglesConfig } from './toggles';\nimport { CircularButton } from './toggles/circular-button';\nimport styles from './styles.css.js';\nvar BORDER_WIDTH = 2;\nexport function Drawer(_a) {\n  var _b;\n\n  var visualRefresh = _a.visualRefresh,\n      contentClassName = _a.contentClassName,\n      toggleClassName = _a.toggleClassName,\n      closeClassName = _a.closeClassName,\n      width = _a.width,\n      type = _a.type,\n      toggleRefs = _a.toggleRefs,\n      externalizedToggle = _a.externalizedToggle,\n      topOffset = _a.topOffset,\n      bottomOffset = _a.bottomOffset,\n      ariaLabels = _a.ariaLabels,\n      children = _a.children,\n      isOpen = _a.isOpen,\n      isHidden = _a.isHidden,\n      isMobile = _a.isMobile,\n      hasDividerWithSplitPanel = _a.hasDividerWithSplitPanel,\n      onToggle = _a.onToggle,\n      onClick = _a.onClick,\n      _c = _a.extendRight,\n      extendRight = _c === void 0 ? 0 : _c;\n  var _d = togglesConfig[type],\n      TagName = _d.TagName,\n      iconName = _d.iconName,\n      getLabels = _d.getLabels;\n\n  var _e = getLabels(ariaLabels),\n      mainLabel = _e.mainLabel,\n      closeLabel = _e.closeLabel,\n      openLabel = _e.openLabel;\n\n  var hasDividerWithButtonBar = isOpen && extendRight !== 0;\n  var drawerContentWidthOpen = isMobile ? undefined : width;\n  var drawerContentWidth = isOpen ? drawerContentWidthOpen : undefined;\n  var drawerWidth = hasDividerWithButtonBar && drawerContentWidth ? drawerContentWidth + BORDER_WIDTH : drawerContentWidth;\n  var closeIconName = !visualRefresh || isMobile ? 'close' : type === 'navigation' ? 'angle-left' : 'angle-right';\n  var visualRefreshOpenButton = !externalizedToggle && React.createElement(TagName, {\n    \"aria-label\": mainLabel,\n    className: clsx(styles['visual-refresh-toggle'], styles[\"visual-refresh-toggle-type-\" + type]),\n    style: {\n      top: topOffset\n    },\n    \"aria-hidden\": isOpen\n  }, React.createElement(CircularButton, {\n    ref: toggleRefs.toggle,\n    className: toggleClassName,\n    iconName: iconName,\n    ariaLabel: openLabel,\n    onClick: function () {\n      return onToggle(true);\n    },\n    ariaExpanded: false\n  }));\n  var regularOpenButton = React.createElement(TagName, {\n    \"aria-label\": mainLabel,\n    className: styles.toggle,\n    \"aria-hidden\": isOpen\n  }, React.createElement(AppLayoutButton, {\n    ref: toggleRefs.toggle,\n    className: toggleClassName,\n    iconName: iconName,\n    ariaLabel: openLabel,\n    onClick: function () {\n      return onToggle(true);\n    },\n    ariaExpanded: false\n  }));\n  return React.createElement(\"div\", {\n    className: clsx(styles.drawer, (_b = {}, _b[styles['drawer-closed']] = !isOpen, _b[styles['drawer-hidden']] = isHidden, _b[styles['drawer-mobile']] = isMobile, _b[styles['drawer-refresh']] = visualRefresh, _b[styles['has-divider-with-splitpanel']] = hasDividerWithSplitPanel, _b[styles['opaque-background']] = hasDividerWithButtonBar, _b)),\n    style: {\n      width: drawerWidth,\n      marginRight: isOpen ? -1 * extendRight : 0,\n      paddingRight: isOpen ? extendRight : 0\n    },\n    onClick: function (event) {\n      if (onClick) {\n        onClick(event);\n      }\n\n      if (!isOpen && !visualRefresh) {\n        if (event.target.tagName !== 'BUTTON') {\n          onToggle(true);\n        }\n      }\n    }\n  }, !isMobile && visualRefresh && visualRefreshOpenButton, React.createElement(\"div\", {\n    style: {\n      width: drawerContentWidth,\n      top: topOffset,\n      bottom: bottomOffset\n    },\n    className: clsx(styles['drawer-content'], contentClassName)\n  }, !isMobile && !visualRefresh && regularOpenButton, React.createElement(TagName, {\n    \"aria-label\": mainLabel,\n    \"aria-hidden\": !isOpen\n  }, React.createElement(CloseButton, {\n    ref: toggleRefs.close,\n    className: closeClassName,\n    ariaLabel: closeLabel,\n    onClick: function () {\n      return onToggle(false);\n    },\n    iconName: closeIconName\n  }), children)));\n}","map":{"version":3,"sources":["/Users/isingheg/Desktop/projects/amazonforvolunteers-ui/node_modules/@awsui/components-react/app-layout/drawer.js"],"names":["clsx","React","AppLayoutButton","CloseButton","togglesConfig","CircularButton","styles","BORDER_WIDTH","Drawer","_a","_b","visualRefresh","contentClassName","toggleClassName","closeClassName","width","type","toggleRefs","externalizedToggle","topOffset","bottomOffset","ariaLabels","children","isOpen","isHidden","isMobile","hasDividerWithSplitPanel","onToggle","onClick","_c","extendRight","_d","TagName","iconName","getLabels","_e","mainLabel","closeLabel","openLabel","hasDividerWithButtonBar","drawerContentWidthOpen","undefined","drawerContentWidth","drawerWidth","closeIconName","visualRefreshOpenButton","createElement","className","style","top","ref","toggle","ariaLabel","ariaExpanded","regularOpenButton","drawer","marginRight","paddingRight","event","target","tagName","bottom","close"],"mappings":"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","sourcesContent":["import clsx from 'clsx';\nimport React from 'react';\nimport { AppLayoutButton, CloseButton, togglesConfig } from './toggles';\nimport { CircularButton } from './toggles/circular-button';\nimport styles from './styles.css.js';\nvar BORDER_WIDTH = 2;\nexport function Drawer(_a) {\n    var _b;\n    var visualRefresh = _a.visualRefresh, contentClassName = _a.contentClassName, toggleClassName = _a.toggleClassName, closeClassName = _a.closeClassName, width = _a.width, type = _a.type, toggleRefs = _a.toggleRefs, externalizedToggle = _a.externalizedToggle, topOffset = _a.topOffset, bottomOffset = _a.bottomOffset, ariaLabels = _a.ariaLabels, children = _a.children, isOpen = _a.isOpen, isHidden = _a.isHidden, isMobile = _a.isMobile, hasDividerWithSplitPanel = _a.hasDividerWithSplitPanel, onToggle = _a.onToggle, onClick = _a.onClick, _c = _a.extendRight, extendRight = _c === void 0 ? 0 : _c;\n    var _d = togglesConfig[type], TagName = _d.TagName, iconName = _d.iconName, getLabels = _d.getLabels;\n    var _e = getLabels(ariaLabels), mainLabel = _e.mainLabel, closeLabel = _e.closeLabel, openLabel = _e.openLabel;\n    var hasDividerWithButtonBar = isOpen && extendRight !== 0;\n    var drawerContentWidthOpen = isMobile ? undefined : width;\n    var drawerContentWidth = isOpen ? drawerContentWidthOpen : undefined;\n    var drawerWidth = hasDividerWithButtonBar && drawerContentWidth ? drawerContentWidth + BORDER_WIDTH : drawerContentWidth;\n    var closeIconName = !visualRefresh || isMobile ? 'close' : type === 'navigation' ? 'angle-left' : 'angle-right';\n    var visualRefreshOpenButton = !externalizedToggle && (React.createElement(TagName, { \"aria-label\": mainLabel, className: clsx(styles['visual-refresh-toggle'], styles[\"visual-refresh-toggle-type-\" + type]), style: { top: topOffset }, \"aria-hidden\": isOpen },\n        React.createElement(CircularButton, { ref: toggleRefs.toggle, className: toggleClassName, iconName: iconName, ariaLabel: openLabel, onClick: function () { return onToggle(true); }, ariaExpanded: false })));\n    var regularOpenButton = (React.createElement(TagName, { \"aria-label\": mainLabel, className: styles.toggle, \"aria-hidden\": isOpen },\n        React.createElement(AppLayoutButton, { ref: toggleRefs.toggle, className: toggleClassName, iconName: iconName, ariaLabel: openLabel, onClick: function () { return onToggle(true); }, ariaExpanded: false })));\n    return (React.createElement(\"div\", { className: clsx(styles.drawer, (_b = {},\n            _b[styles['drawer-closed']] = !isOpen,\n            _b[styles['drawer-hidden']] = isHidden,\n            _b[styles['drawer-mobile']] = isMobile,\n            _b[styles['drawer-refresh']] = visualRefresh,\n            _b[styles['has-divider-with-splitpanel']] = hasDividerWithSplitPanel,\n            _b[styles['opaque-background']] = hasDividerWithButtonBar,\n            _b)), style: {\n            width: drawerWidth,\n            marginRight: isOpen ? -1 * extendRight : 0,\n            paddingRight: isOpen ? extendRight : 0\n        }, onClick: function (event) {\n            if (onClick) {\n                onClick(event);\n            }\n            if (!isOpen && !visualRefresh) {\n                if (event.target.tagName !== 'BUTTON') {\n                    onToggle(true);\n                }\n            }\n        } },\n        !isMobile && visualRefresh && visualRefreshOpenButton,\n        React.createElement(\"div\", { style: { width: drawerContentWidth, top: topOffset, bottom: bottomOffset }, className: clsx(styles['drawer-content'], contentClassName) },\n            !isMobile && !visualRefresh && regularOpenButton,\n            React.createElement(TagName, { \"aria-label\": mainLabel, \"aria-hidden\": !isOpen },\n                React.createElement(CloseButton, { ref: toggleRefs.close, className: closeClassName, ariaLabel: closeLabel, onClick: function () { return onToggle(false); }, iconName: closeIconName }),\n                children))));\n}\n"]},"metadata":{},"sourceType":"module"}