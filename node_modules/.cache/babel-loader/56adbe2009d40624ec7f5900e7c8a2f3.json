{"ast":null,"code":"import { useState, useLayoutEffect, useCallback, useEffect, createContext } from 'react';\nimport { useAppLayoutContext } from '../internal/context/app-layout-context';\nimport { useMobile } from '../internal/hooks/use-mobile';\nimport { supportsStickyPosition } from '../internal/utils/dom';\nimport { getOverflowParents } from '../internal/utils/scrollable-containers';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport customCssProps from '../internal/generated/custom-css-properties';\nexport var StickyHeaderContext = createContext({\n  isStuck: false\n});\nexport var CONTAINER_ROOT_BORDER = 1;\nexport var useStickyHeader = function (rootRef, headerRef, __stickyHeader, __stickyOffset) {\n  var _a = useState(false),\n      usesBodyScroll = _a[0],\n      setState = _a[1];\n\n  var _b = useState(false),\n      isStuck = _b[0],\n      setIsStuck = _b[1];\n\n  useLayoutEffect(function () {\n    var overflowParents = rootRef.current && getOverflowParents(rootRef.current).length;\n    setState(!overflowParents);\n  }, [rootRef]);\n  var stickyOffsetTop = useAppLayoutContext().stickyOffsetTop;\n  var effectiveStickyOffset = __stickyOffset !== null && __stickyOffset !== void 0 ? __stickyOffset : usesBodyScroll ? stickyOffsetTop : 0;\n  var isSticky = useSupportsStickyHeader() && !!__stickyHeader;\n  var isRefresh = useVisualRefresh(rootRef);\n  var computedOffset = effectiveStickyOffset - CONTAINER_ROOT_BORDER + \"px\";\n\n  if (usesBodyScroll && isRefresh) {\n    computedOffset = \"var(\" + customCssProps.offsetTopWithNotifications + \", \" + computedOffset + \")\";\n  }\n\n  var stickyStyles = isSticky ? {\n    style: {\n      top: computedOffset\n    }\n  } : {};\n  var checkIfStuck = useCallback(function () {\n    if (rootRef.current && headerRef.current) {\n      var rootTop = rootRef.current.getBoundingClientRect().top;\n      var headerTop = headerRef.current.getBoundingClientRect().top;\n\n      if (rootTop + CONTAINER_ROOT_BORDER < headerTop) {\n        setIsStuck(true);\n      } else {\n        setIsStuck(false);\n      }\n    }\n  }, [rootRef, headerRef]);\n  useEffect(function () {\n    if (isSticky) {\n      window.addEventListener('scroll', checkIfStuck, true);\n      window.addEventListener('resize', checkIfStuck);\n      return function () {\n        window.removeEventListener('scroll', checkIfStuck, true);\n        window.removeEventListener('resize', checkIfStuck);\n      };\n    }\n  }, [isSticky, checkIfStuck]);\n  return {\n    isSticky: isSticky,\n    isStuck: isStuck,\n    stickyStyles: stickyStyles\n  };\n};\nexport function useSupportsStickyHeader() {\n  var isMobile = useMobile();\n  return supportsStickyPosition() && !isMobile;\n}","map":{"version":3,"sources":["/Users/isingheg/Desktop/projects/amazonforvolunteers-ui/node_modules/@awsui/components-react/container/use-sticky-header.js"],"names":["useState","useLayoutEffect","useCallback","useEffect","createContext","useAppLayoutContext","useMobile","supportsStickyPosition","getOverflowParents","useVisualRefresh","customCssProps","StickyHeaderContext","isStuck","CONTAINER_ROOT_BORDER","useStickyHeader","rootRef","headerRef","__stickyHeader","__stickyOffset","_a","usesBodyScroll","setState","_b","setIsStuck","overflowParents","current","length","stickyOffsetTop","effectiveStickyOffset","isSticky","useSupportsStickyHeader","isRefresh","computedOffset","offsetTopWithNotifications","stickyStyles","style","top","checkIfStuck","rootTop","getBoundingClientRect","headerTop","window","addEventListener","removeEventListener","isMobile"],"mappings":"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","sourcesContent":["import { useState, useLayoutEffect, useCallback, useEffect, createContext } from 'react';\nimport { useAppLayoutContext } from '../internal/context/app-layout-context';\nimport { useMobile } from '../internal/hooks/use-mobile';\nimport { supportsStickyPosition } from '../internal/utils/dom';\nimport { getOverflowParents } from '../internal/utils/scrollable-containers';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport customCssProps from '../internal/generated/custom-css-properties';\nexport var StickyHeaderContext = createContext({ isStuck: false });\nexport var CONTAINER_ROOT_BORDER = 1;\nexport var useStickyHeader = function (rootRef, headerRef, __stickyHeader, __stickyOffset) {\n    var _a = useState(false), usesBodyScroll = _a[0], setState = _a[1];\n    var _b = useState(false), isStuck = _b[0], setIsStuck = _b[1];\n    useLayoutEffect(function () {\n        var overflowParents = rootRef.current && getOverflowParents(rootRef.current).length;\n        setState(!overflowParents);\n    }, [rootRef]);\n    var stickyOffsetTop = useAppLayoutContext().stickyOffsetTop;\n    var effectiveStickyOffset = __stickyOffset !== null && __stickyOffset !== void 0 ? __stickyOffset : (usesBodyScroll ? stickyOffsetTop : 0);\n    var isSticky = useSupportsStickyHeader() && !!__stickyHeader;\n    var isRefresh = useVisualRefresh(rootRef);\n    var computedOffset = effectiveStickyOffset - CONTAINER_ROOT_BORDER + \"px\";\n    if (usesBodyScroll && isRefresh) {\n        computedOffset = \"var(\" + customCssProps.offsetTopWithNotifications + \", \" + computedOffset + \")\";\n    }\n    var stickyStyles = isSticky\n        ? {\n            style: {\n                top: computedOffset\n            }\n        }\n        : {};\n    var checkIfStuck = useCallback(function () {\n        if (rootRef.current && headerRef.current) {\n            var rootTop = rootRef.current.getBoundingClientRect().top;\n            var headerTop = headerRef.current.getBoundingClientRect().top;\n            if (rootTop + CONTAINER_ROOT_BORDER < headerTop) {\n                setIsStuck(true);\n            }\n            else {\n                setIsStuck(false);\n            }\n        }\n    }, [rootRef, headerRef]);\n    useEffect(function () {\n        if (isSticky) {\n            window.addEventListener('scroll', checkIfStuck, true);\n            window.addEventListener('resize', checkIfStuck);\n            return function () {\n                window.removeEventListener('scroll', checkIfStuck, true);\n                window.removeEventListener('resize', checkIfStuck);\n            };\n        }\n    }, [isSticky, checkIfStuck]);\n    return {\n        isSticky: isSticky,\n        isStuck: isStuck,\n        stickyStyles: stickyStyles\n    };\n};\nexport function useSupportsStickyHeader() {\n    var isMobile = useMobile();\n    return supportsStickyPosition() && !isMobile;\n}\n"]},"metadata":{},"sourceType":"module"}