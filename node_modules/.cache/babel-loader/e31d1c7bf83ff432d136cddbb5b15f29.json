{"ast":null,"code":"import smoothScroll from './smooth-scroll';\nexport var onPaginationClick = function (headerBarRef, direction) {\n  if (!(headerBarRef === null || headerBarRef === void 0 ? void 0 : headerBarRef.current)) {\n    return;\n  }\n\n  var element = headerBarRef.current;\n  var paginatedSectionSize = element.clientWidth * 0.75;\n\n  if (direction === 1) {\n    smoothScroll(element, Math.min(element.scrollLeft + paginatedSectionSize, element.scrollWidth - element.offsetWidth));\n  }\n\n  if (direction === -1) {\n    smoothScroll(element, Math.max(element.scrollLeft - paginatedSectionSize, 0));\n  }\n};\nexport var hasHorizontalOverflow = function (headerBar, leftOverflowButton) {\n  var offsetWidth = headerBar.offsetWidth,\n      scrollWidth = headerBar.scrollWidth;\n  var paginationButtonsWidth = leftOverflowButton.current && 2 * leftOverflowButton.current.offsetWidth;\n  return paginationButtonsWidth ? scrollWidth > offsetWidth + paginationButtonsWidth : scrollWidth > offsetWidth;\n};\nexport var hasLeftOverflow = function (headerBar) {\n  return headerBar.scrollLeft > 0;\n};\nexport var hasRightOverflow = function (headerBar) {\n  var offsetWidth = headerBar.offsetWidth,\n      scrollLeft = headerBar.scrollLeft,\n      scrollWidth = headerBar.scrollWidth;\n  return scrollLeft < scrollWidth - offsetWidth;\n};\nexport var scrollIntoView = function (tabHeader, headerBar, smooth) {\n  if (smooth === void 0) {\n    smooth = true;\n  }\n\n  if (!tabHeader || !headerBar) {\n    return;\n  }\n\n  var margin = 1;\n  var updatedLeftScroll = headerBar.scrollLeft;\n  updatedLeftScroll = Math.min(updatedLeftScroll, tabHeader.offsetLeft - margin);\n  updatedLeftScroll = Math.max(updatedLeftScroll, tabHeader.offsetLeft + tabHeader.offsetWidth - headerBar.offsetWidth + margin);\n\n  if (smooth) {\n    smoothScroll(headerBar, updatedLeftScroll);\n  } else {\n    headerBar.scrollLeft = updatedLeftScroll;\n  }\n};","map":{"version":3,"sources":["/Users/isingheg/Desktop/projects/test-react-amplify/node_modules/@awsui/components-react/tabs/scroll-utils.js"],"names":["smoothScroll","onPaginationClick","headerBarRef","direction","current","element","paginatedSectionSize","clientWidth","Math","min","scrollLeft","scrollWidth","offsetWidth","max","hasHorizontalOverflow","headerBar","leftOverflowButton","paginationButtonsWidth","hasLeftOverflow","hasRightOverflow","scrollIntoView","tabHeader","smooth","margin","updatedLeftScroll","offsetLeft"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,iBAAzB;AACA,OAAO,IAAIC,iBAAiB,GAAG,UAAUC,YAAV,EAAwBC,SAAxB,EAAmC;AAC9D,MAAI,EAAED,YAAY,KAAK,IAAjB,IAAyBA,YAAY,KAAK,KAAK,CAA/C,GAAmD,KAAK,CAAxD,GAA4DA,YAAY,CAACE,OAA3E,CAAJ,EAAyF;AACrF;AACH;;AACD,MAAIC,OAAO,GAAGH,YAAY,CAACE,OAA3B;AACA,MAAIE,oBAAoB,GAAGD,OAAO,CAACE,WAAR,GAAsB,IAAjD;;AACA,MAAIJ,SAAS,KAAK,CAAlB,EAAqB;AACjBH,IAAAA,YAAY,CAACK,OAAD,EAAUG,IAAI,CAACC,GAAL,CAASJ,OAAO,CAACK,UAAR,GAAqBJ,oBAA9B,EAAoDD,OAAO,CAACM,WAAR,GAAsBN,OAAO,CAACO,WAAlF,CAAV,CAAZ;AACH;;AACD,MAAIT,SAAS,KAAK,CAAC,CAAnB,EAAsB;AAClBH,IAAAA,YAAY,CAACK,OAAD,EAAUG,IAAI,CAACK,GAAL,CAASR,OAAO,CAACK,UAAR,GAAqBJ,oBAA9B,EAAoD,CAApD,CAAV,CAAZ;AACH;AACJ,CAZM;AAaP,OAAO,IAAIQ,qBAAqB,GAAG,UAAUC,SAAV,EAAqBC,kBAArB,EAAyC;AACxE,MAAIJ,WAAW,GAAGG,SAAS,CAACH,WAA5B;AAAA,MAAyCD,WAAW,GAAGI,SAAS,CAACJ,WAAjE;AACA,MAAIM,sBAAsB,GAAGD,kBAAkB,CAACZ,OAAnB,IAA8B,IAAIY,kBAAkB,CAACZ,OAAnB,CAA2BQ,WAA1F;AACA,SAAOK,sBAAsB,GAAGN,WAAW,GAAGC,WAAW,GAAGK,sBAA/B,GAAwDN,WAAW,GAAGC,WAAnG;AACH,CAJM;AAKP,OAAO,IAAIM,eAAe,GAAG,UAAUH,SAAV,EAAqB;AAC9C,SAAOA,SAAS,CAACL,UAAV,GAAuB,CAA9B;AACH,CAFM;AAGP,OAAO,IAAIS,gBAAgB,GAAG,UAAUJ,SAAV,EAAqB;AAC/C,MAAIH,WAAW,GAAGG,SAAS,CAACH,WAA5B;AAAA,MAAyCF,UAAU,GAAGK,SAAS,CAACL,UAAhE;AAAA,MAA4EC,WAAW,GAAGI,SAAS,CAACJ,WAApG;AACA,SAAOD,UAAU,GAAGC,WAAW,GAAGC,WAAlC;AACH,CAHM;AAIP,OAAO,IAAIQ,cAAc,GAAG,UAAUC,SAAV,EAAqBN,SAArB,EAAgCO,MAAhC,EAAwC;AAChE,MAAIA,MAAM,KAAK,KAAK,CAApB,EAAuB;AAAEA,IAAAA,MAAM,GAAG,IAAT;AAAgB;;AACzC,MAAI,CAACD,SAAD,IAAc,CAACN,SAAnB,EAA8B;AAC1B;AACH;;AACD,MAAIQ,MAAM,GAAG,CAAb;AACA,MAAIC,iBAAiB,GAAGT,SAAS,CAACL,UAAlC;AACAc,EAAAA,iBAAiB,GAAGhB,IAAI,CAACC,GAAL,CAASe,iBAAT,EAA4BH,SAAS,CAACI,UAAV,GAAuBF,MAAnD,CAApB;AACAC,EAAAA,iBAAiB,GAAGhB,IAAI,CAACK,GAAL,CAASW,iBAAT,EAA4BH,SAAS,CAACI,UAAV,GAAuBJ,SAAS,CAACT,WAAjC,GAA+CG,SAAS,CAACH,WAAzD,GAAuEW,MAAnG,CAApB;;AACA,MAAID,MAAJ,EAAY;AACRtB,IAAAA,YAAY,CAACe,SAAD,EAAYS,iBAAZ,CAAZ;AACH,GAFD,MAGK;AACDT,IAAAA,SAAS,CAACL,UAAV,GAAuBc,iBAAvB;AACH;AACJ,CAfM","sourcesContent":["import smoothScroll from './smooth-scroll';\nexport var onPaginationClick = function (headerBarRef, direction) {\n    if (!(headerBarRef === null || headerBarRef === void 0 ? void 0 : headerBarRef.current)) {\n        return;\n    }\n    var element = headerBarRef.current;\n    var paginatedSectionSize = element.clientWidth * 0.75;\n    if (direction === 1) {\n        smoothScroll(element, Math.min(element.scrollLeft + paginatedSectionSize, element.scrollWidth - element.offsetWidth));\n    }\n    if (direction === -1) {\n        smoothScroll(element, Math.max(element.scrollLeft - paginatedSectionSize, 0));\n    }\n};\nexport var hasHorizontalOverflow = function (headerBar, leftOverflowButton) {\n    var offsetWidth = headerBar.offsetWidth, scrollWidth = headerBar.scrollWidth;\n    var paginationButtonsWidth = leftOverflowButton.current && 2 * leftOverflowButton.current.offsetWidth;\n    return paginationButtonsWidth ? scrollWidth > offsetWidth + paginationButtonsWidth : scrollWidth > offsetWidth;\n};\nexport var hasLeftOverflow = function (headerBar) {\n    return headerBar.scrollLeft > 0;\n};\nexport var hasRightOverflow = function (headerBar) {\n    var offsetWidth = headerBar.offsetWidth, scrollLeft = headerBar.scrollLeft, scrollWidth = headerBar.scrollWidth;\n    return scrollLeft < scrollWidth - offsetWidth;\n};\nexport var scrollIntoView = function (tabHeader, headerBar, smooth) {\n    if (smooth === void 0) { smooth = true; }\n    if (!tabHeader || !headerBar) {\n        return;\n    }\n    var margin = 1;\n    var updatedLeftScroll = headerBar.scrollLeft;\n    updatedLeftScroll = Math.min(updatedLeftScroll, tabHeader.offsetLeft - margin);\n    updatedLeftScroll = Math.max(updatedLeftScroll, tabHeader.offsetLeft + tabHeader.offsetWidth - headerBar.offsetWidth + margin);\n    if (smooth) {\n        smoothScroll(headerBar, updatedLeftScroll);\n    }\n    else {\n        headerBar.scrollLeft = updatedLeftScroll;\n    }\n};\n"]},"metadata":{},"sourceType":"module"}