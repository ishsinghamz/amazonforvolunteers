{"ast":null,"code":"import clsx from 'clsx';\nimport React, { useEffect } from 'react';\nimport { AppLayoutButton, togglesConfig } from '../toggles';\nimport styles from './styles.css.js';\nimport sharedStyles from '../styles.css.js';\nimport testutilStyles from '../test-utils/styles.css.js';\nvar MobileToggle = React.forwardRef(function (_a, ref) {\n  var className = _a.className,\n      ariaLabels = _a.ariaLabels,\n      type = _a.type,\n      disabled = _a.disabled,\n      isRefresh = _a.isRefresh,\n      onClick = _a.onClick;\n  var _b = togglesConfig[type],\n      TagName = _b.TagName,\n      iconName = _b.iconName,\n      getLabels = _b.getLabels;\n\n  var _c = getLabels(ariaLabels),\n      mainLabel = _c.mainLabel,\n      openLabel = _c.openLabel;\n\n  return React.createElement(TagName, {\n    className: clsx(styles['mobile-toggle'], isRefresh && styles['mobile-toggle-refresh']),\n    \"aria-hidden\": disabled,\n    \"aria-label\": mainLabel,\n    onClick: onClick\n  }, React.createElement(AppLayoutButton, {\n    ref: ref,\n    className: className,\n    iconName: iconName,\n    onClick: onClick,\n    ariaLabel: openLabel,\n    disabled: disabled,\n    ariaExpanded: disabled\n  }));\n});\nexport function MobileToolbar(_a) {\n  var _b = _a.ariaLabels,\n      ariaLabels = _b === void 0 ? {} : _b,\n      toggleRefs = _a.toggleRefs,\n      isRefresh = _a.isRefresh,\n      topOffset = _a.topOffset,\n      navigationHide = _a.navigationHide,\n      toolsHide = _a.toolsHide,\n      _c = _a.anyPanelOpen,\n      anyPanelOpen = _c === void 0 ? false : _c,\n      unfocusable = _a.unfocusable,\n      children = _a.children,\n      onNavigationOpen = _a.onNavigationOpen,\n      onToolsOpen = _a.onToolsOpen;\n  useEffect(function () {\n    if (anyPanelOpen) {\n      document.body.classList.add(styles['block-body-scroll']);\n      return function () {\n        document.body.classList.remove(styles['block-body-scroll']);\n      };\n    } else {\n      document.body.classList.remove(styles['block-body-scroll']);\n    }\n  }, [anyPanelOpen]);\n  return React.createElement(\"div\", {\n    className: clsx(styles['mobile-bar'], unfocusable && sharedStyles.unfocusable, isRefresh && 'awsui-context-content-header', isRefresh && styles['mobile-bar-refresh']),\n    style: {\n      top: topOffset\n    }\n  }, !navigationHide && React.createElement(MobileToggle, {\n    ref: toggleRefs.navigation,\n    type: \"navigation\",\n    isRefresh: isRefresh,\n    className: clsx(sharedStyles['navigation-toggle'], testutilStyles['navigation-toggle']),\n    ariaLabels: ariaLabels,\n    disabled: anyPanelOpen,\n    onClick: onNavigationOpen\n  }), React.createElement(\"div\", {\n    className: styles['mobile-bar-breadcrumbs']\n  }, children && React.createElement(\"div\", {\n    className: clsx(sharedStyles.breadcrumbs, testutilStyles.breadcrumbs)\n  }, children)), !toolsHide && React.createElement(MobileToggle, {\n    ref: toggleRefs.tools,\n    type: \"tools\",\n    isRefresh: isRefresh,\n    className: clsx(sharedStyles['tools-toggle'], testutilStyles['tools-toggle']),\n    ariaLabels: ariaLabels,\n    disabled: anyPanelOpen,\n    onClick: onToolsOpen\n  }));\n}","map":{"version":3,"sources":["/Users/isingheg/Desktop/projects/amazonforvolunteers-ui/node_modules/@awsui/components-react/app-layout/mobile-toolbar/index.js"],"names":["clsx","React","useEffect","AppLayoutButton","togglesConfig","styles","sharedStyles","testutilStyles","MobileToggle","forwardRef","_a","ref","className","ariaLabels","type","disabled","isRefresh","onClick","_b","TagName","iconName","getLabels","_c","mainLabel","openLabel","createElement","ariaLabel","ariaExpanded","MobileToolbar","toggleRefs","topOffset","navigationHide","toolsHide","anyPanelOpen","unfocusable","children","onNavigationOpen","onToolsOpen","document","body","classList","add","remove","style","top","navigation","breadcrumbs","tools"],"mappings":"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","sourcesContent":["import clsx from 'clsx';\nimport React, { useEffect } from 'react';\nimport { AppLayoutButton, togglesConfig } from '../toggles';\nimport styles from './styles.css.js';\nimport sharedStyles from '../styles.css.js';\nimport testutilStyles from '../test-utils/styles.css.js';\nvar MobileToggle = React.forwardRef(function (_a, ref) {\n    var className = _a.className, ariaLabels = _a.ariaLabels, type = _a.type, disabled = _a.disabled, isRefresh = _a.isRefresh, onClick = _a.onClick;\n    var _b = togglesConfig[type], TagName = _b.TagName, iconName = _b.iconName, getLabels = _b.getLabels;\n    var _c = getLabels(ariaLabels), mainLabel = _c.mainLabel, openLabel = _c.openLabel;\n    return (React.createElement(TagName, { className: clsx(styles['mobile-toggle'], isRefresh && styles['mobile-toggle-refresh']), \"aria-hidden\": disabled, \"aria-label\": mainLabel, onClick: onClick },\n        React.createElement(AppLayoutButton, { ref: ref, className: className, iconName: iconName, onClick: onClick, ariaLabel: openLabel, disabled: disabled, ariaExpanded: disabled })));\n});\nexport function MobileToolbar(_a) {\n    var _b = _a.ariaLabels, ariaLabels = _b === void 0 ? {} : _b, toggleRefs = _a.toggleRefs, isRefresh = _a.isRefresh, topOffset = _a.topOffset, navigationHide = _a.navigationHide, toolsHide = _a.toolsHide, _c = _a.anyPanelOpen, anyPanelOpen = _c === void 0 ? false : _c, unfocusable = _a.unfocusable, children = _a.children, onNavigationOpen = _a.onNavigationOpen, onToolsOpen = _a.onToolsOpen;\n    useEffect(function () {\n        if (anyPanelOpen) {\n            document.body.classList.add(styles['block-body-scroll']);\n            return function () {\n                document.body.classList.remove(styles['block-body-scroll']);\n            };\n        }\n        else {\n            document.body.classList.remove(styles['block-body-scroll']);\n        }\n    }, [anyPanelOpen]);\n    return (React.createElement(\"div\", { className: clsx(styles['mobile-bar'], unfocusable && sharedStyles.unfocusable, isRefresh && 'awsui-context-content-header', isRefresh && styles['mobile-bar-refresh']), style: { top: topOffset } },\n        !navigationHide && (React.createElement(MobileToggle, { ref: toggleRefs.navigation, type: \"navigation\", isRefresh: isRefresh, className: clsx(sharedStyles['navigation-toggle'], testutilStyles['navigation-toggle']), ariaLabels: ariaLabels, disabled: anyPanelOpen, onClick: onNavigationOpen })),\n        React.createElement(\"div\", { className: styles['mobile-bar-breadcrumbs'] }, children && React.createElement(\"div\", { className: clsx(sharedStyles.breadcrumbs, testutilStyles.breadcrumbs) }, children)),\n        !toolsHide && (React.createElement(MobileToggle, { ref: toggleRefs.tools, type: \"tools\", isRefresh: isRefresh, className: clsx(sharedStyles['tools-toggle'], testutilStyles['tools-toggle']), ariaLabels: ariaLabels, disabled: anyPanelOpen, onClick: onToolsOpen }))));\n}\n"]},"metadata":{},"sourceType":"module"}