{"ast":null,"code":"import { __assign } from \"tslib\";\nimport React from 'react';\nimport { line } from 'd3-shape';\nexport default function LineSeries(_a) {\n  var axis = _a.axis,\n      series = _a.series,\n      color = _a.color,\n      xScale = _a.xScale,\n      yScale = _a.yScale,\n      chartAreaClipPath = _a.chartAreaClipPath;\n  var commonProps = {\n    'aria-hidden': true,\n    stroke: color,\n    clipPath: \"url(#\" + chartAreaClipPath + \")\"\n  };\n\n  if (series.type === 'line') {\n    var lineGenerator = line().x(function (d) {\n      var x = xScale.d3Scale(d.x) || 0;\n\n      if (xScale.isCategorical()) {\n        var offset = Math.max(0, xScale.d3Scale.bandwidth() - 1) / 2;\n        x += offset;\n      }\n\n      return x;\n    }).y(function (d) {\n      return yScale.d3Scale(d.y) || 0;\n    });\n    var visibleData = series.data.filter(function (_a) {\n      var x = _a.x;\n      return xScale.d3Scale(x) !== undefined;\n    });\n    return React.createElement(\"path\", __assign({}, commonProps, {\n      d: lineGenerator(visibleData) || ''\n    }));\n  } else {\n    var range = xScale.d3Scale.range();\n    var y = yScale.d3Scale(series.y);\n    var coordinates = axis === 'x' ? {\n      x1: range[0],\n      x2: range[1],\n      y1: y,\n      y2: y\n    } : {\n      x1: y,\n      x2: y,\n      y1: range[0],\n      y2: range[1]\n    };\n    return React.createElement(\"line\", __assign({}, commonProps, coordinates));\n  }\n}","map":{"version":3,"sources":["/Users/isingheg/Desktop/projects/amazonforvolunteers-ui/node_modules/@awsui/components-react/mixed-line-bar-chart/line-series.js"],"names":["__assign","React","line","LineSeries","_a","axis","series","color","xScale","yScale","chartAreaClipPath","commonProps","stroke","clipPath","type","lineGenerator","x","d","d3Scale","isCategorical","offset","Math","max","bandwidth","y","visibleData","data","filter","undefined","createElement","range","coordinates","x1","x2","y1","y2"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,UAArB;AACA,eAAe,SAASC,UAAT,CAAoBC,EAApB,EAAwB;AACnC,MAAIC,IAAI,GAAGD,EAAE,CAACC,IAAd;AAAA,MAAoBC,MAAM,GAAGF,EAAE,CAACE,MAAhC;AAAA,MAAwCC,KAAK,GAAGH,EAAE,CAACG,KAAnD;AAAA,MAA0DC,MAAM,GAAGJ,EAAE,CAACI,MAAtE;AAAA,MAA8EC,MAAM,GAAGL,EAAE,CAACK,MAA1F;AAAA,MAAkGC,iBAAiB,GAAGN,EAAE,CAACM,iBAAzH;AACA,MAAIC,WAAW,GAAG;AACd,mBAAe,IADD;AAEdC,IAAAA,MAAM,EAAEL,KAFM;AAGdM,IAAAA,QAAQ,EAAE,UAAUH,iBAAV,GAA8B;AAH1B,GAAlB;;AAKA,MAAIJ,MAAM,CAACQ,IAAP,KAAgB,MAApB,EAA4B;AACxB,QAAIC,aAAa,GAAGb,IAAI,GACnBc,CADe,CACb,UAAUC,CAAV,EAAa;AAChB,UAAID,CAAC,GAAGR,MAAM,CAACU,OAAP,CAAeD,CAAC,CAACD,CAAjB,KAAuB,CAA/B;;AACA,UAAIR,MAAM,CAACW,aAAP,EAAJ,EAA4B;AACxB,YAAIC,MAAM,GAAGC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYd,MAAM,CAACU,OAAP,CAAeK,SAAf,KAA6B,CAAzC,IAA8C,CAA3D;AACAP,QAAAA,CAAC,IAAII,MAAL;AACH;;AACD,aAAOJ,CAAP;AACH,KARmB,EASfQ,CATe,CASb,UAAUP,CAAV,EAAa;AAAE,aAAOR,MAAM,CAACS,OAAP,CAAeD,CAAC,CAACO,CAAjB,KAAuB,CAA9B;AAAkC,KATpC,CAApB;AAUA,QAAIC,WAAW,GAAGnB,MAAM,CAACoB,IAAP,CAAYC,MAAZ,CAAmB,UAAUvB,EAAV,EAAc;AAC/C,UAAIY,CAAC,GAAGZ,EAAE,CAACY,CAAX;AACA,aAAOR,MAAM,CAACU,OAAP,CAAeF,CAAf,MAAsBY,SAA7B;AACH,KAHiB,CAAlB;AAIA,WAAQ3B,KAAK,CAAC4B,aAAN,CAAoB,MAApB,EAA4B7B,QAAQ,CAAC,EAAD,EAAKW,WAAL,EAAkB;AAAEM,MAAAA,CAAC,EAAEF,aAAa,CAACU,WAAD,CAAb,IAA8B;AAAnC,KAAlB,CAApC,CAAR;AACH,GAhBD,MAiBK;AACD,QAAIK,KAAK,GAAGtB,MAAM,CAACU,OAAP,CAAeY,KAAf,EAAZ;AACA,QAAIN,CAAC,GAAGf,MAAM,CAACS,OAAP,CAAeZ,MAAM,CAACkB,CAAtB,CAAR;AACA,QAAIO,WAAW,GAAG1B,IAAI,KAAK,GAAT,GAAe;AAAE2B,MAAAA,EAAE,EAAEF,KAAK,CAAC,CAAD,CAAX;AAAgBG,MAAAA,EAAE,EAAEH,KAAK,CAAC,CAAD,CAAzB;AAA8BI,MAAAA,EAAE,EAAEV,CAAlC;AAAqCW,MAAAA,EAAE,EAAEX;AAAzC,KAAf,GAA8D;AAAEQ,MAAAA,EAAE,EAAER,CAAN;AAASS,MAAAA,EAAE,EAAET,CAAb;AAAgBU,MAAAA,EAAE,EAAEJ,KAAK,CAAC,CAAD,CAAzB;AAA8BK,MAAAA,EAAE,EAAEL,KAAK,CAAC,CAAD;AAAvC,KAAhF;AACA,WAAO7B,KAAK,CAAC4B,aAAN,CAAoB,MAApB,EAA4B7B,QAAQ,CAAC,EAAD,EAAKW,WAAL,EAAkBoB,WAAlB,CAApC,CAAP;AACH;AACJ","sourcesContent":["import { __assign } from \"tslib\";\nimport React from 'react';\nimport { line } from 'd3-shape';\nexport default function LineSeries(_a) {\n    var axis = _a.axis, series = _a.series, color = _a.color, xScale = _a.xScale, yScale = _a.yScale, chartAreaClipPath = _a.chartAreaClipPath;\n    var commonProps = {\n        'aria-hidden': true,\n        stroke: color,\n        clipPath: \"url(#\" + chartAreaClipPath + \")\"\n    };\n    if (series.type === 'line') {\n        var lineGenerator = line()\n            .x(function (d) {\n            var x = xScale.d3Scale(d.x) || 0;\n            if (xScale.isCategorical()) {\n                var offset = Math.max(0, xScale.d3Scale.bandwidth() - 1) / 2;\n                x += offset;\n            }\n            return x;\n        })\n            .y(function (d) { return yScale.d3Scale(d.y) || 0; });\n        var visibleData = series.data.filter(function (_a) {\n            var x = _a.x;\n            return xScale.d3Scale(x) !== undefined;\n        });\n        return (React.createElement(\"path\", __assign({}, commonProps, { d: lineGenerator(visibleData) || '' })));\n    }\n    else {\n        var range = xScale.d3Scale.range();\n        var y = yScale.d3Scale(series.y);\n        var coordinates = axis === 'x' ? { x1: range[0], x2: range[1], y1: y, y2: y } : { x1: y, x2: y, y1: range[0], y2: range[1] };\n        return React.createElement(\"line\", __assign({}, commonProps, coordinates));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}