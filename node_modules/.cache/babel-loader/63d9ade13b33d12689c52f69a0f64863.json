{"ast":null,"code":"import { __assign } from \"tslib\";\nimport React from 'react';\nimport clsx from 'clsx';\nimport InternalIcon from '../icon/internal';\nimport styles from './styles.css.js';\nimport useFocusVisible from '../internal/hooks/focus-visible';\nexport var Segment = React.forwardRef(function (_a, ref) {\n  var _b, _c;\n\n  var disabled = _a.disabled,\n      text = _a.text,\n      iconName = _a.iconName,\n      iconAlt = _a.iconAlt,\n      iconUrl = _a.iconUrl,\n      iconSvg = _a.iconSvg,\n      isActive = _a.isActive,\n      onClick = _a.onClick,\n      onKeyDown = _a.onKeyDown,\n      tabIndex = _a.tabIndex;\n  var focusVisible = useFocusVisible();\n  return React.createElement(\"button\", __assign({\n    className: clsx(styles.segment, (_b = {}, _b[styles.disabled] = !!disabled, _b), (_c = {}, _c[styles.selected] = isActive, _c))\n  }, focusVisible, {\n    ref: ref,\n    onClick: onClick,\n    onKeyDown: onKeyDown,\n    disabled: disabled,\n    type: \"button\",\n    tabIndex: tabIndex,\n    \"aria-pressed\": isActive ? 'true' : 'false',\n    \"aria-label\": !text ? iconAlt : undefined\n  }), (iconName || iconUrl || iconSvg) && React.createElement(InternalIcon, {\n    className: clsx(styles.icon, text ? styles['with-text'] : styles['with-no-text']),\n    name: iconName,\n    url: iconUrl,\n    svg: iconSvg,\n    alt: iconAlt,\n    variant: disabled ? 'disabled' : 'normal'\n  }), React.createElement(\"span\", null, text));\n});","map":{"version":3,"sources":["/Users/isingheg/Desktop/projects/test-react-amplify/node_modules/@awsui/components-react/segmented-control/segment.js"],"names":["__assign","React","clsx","InternalIcon","styles","useFocusVisible","Segment","forwardRef","_a","ref","_b","_c","disabled","text","iconName","iconAlt","iconUrl","iconSvg","isActive","onClick","onKeyDown","tabIndex","focusVisible","createElement","className","segment","selected","type","undefined","icon","name","url","svg","alt","variant"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,YAAP,MAAyB,kBAAzB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,eAAP,MAA4B,iCAA5B;AACA,OAAO,IAAIC,OAAO,GAAGL,KAAK,CAACM,UAAN,CAAiB,UAAUC,EAAV,EAAcC,GAAd,EAAmB;AACrD,MAAIC,EAAJ,EAAQC,EAAR;;AACA,MAAIC,QAAQ,GAAGJ,EAAE,CAACI,QAAlB;AAAA,MAA4BC,IAAI,GAAGL,EAAE,CAACK,IAAtC;AAAA,MAA4CC,QAAQ,GAAGN,EAAE,CAACM,QAA1D;AAAA,MAAoEC,OAAO,GAAGP,EAAE,CAACO,OAAjF;AAAA,MAA0FC,OAAO,GAAGR,EAAE,CAACQ,OAAvG;AAAA,MAAgHC,OAAO,GAAGT,EAAE,CAACS,OAA7H;AAAA,MAAsIC,QAAQ,GAAGV,EAAE,CAACU,QAApJ;AAAA,MAA8JC,OAAO,GAAGX,EAAE,CAACW,OAA3K;AAAA,MAAoLC,SAAS,GAAGZ,EAAE,CAACY,SAAnM;AAAA,MAA8MC,QAAQ,GAAGb,EAAE,CAACa,QAA5N;AACA,MAAIC,YAAY,GAAGjB,eAAe,EAAlC;AACA,SAAQJ,KAAK,CAACsB,aAAN,CAAoB,QAApB,EAA8BvB,QAAQ,CAAC;AAAEwB,IAAAA,SAAS,EAAEtB,IAAI,CAACE,MAAM,CAACqB,OAAR,GAAkBf,EAAE,GAAG,EAAL,EAASA,EAAE,CAACN,MAAM,CAACQ,QAAR,CAAF,GAAsB,CAAC,CAACA,QAAjC,EAA2CF,EAA7D,IAAmEC,EAAE,GAAG,EAAL,EAASA,EAAE,CAACP,MAAM,CAACsB,QAAR,CAAF,GAAsBR,QAA/B,EAAyCP,EAA5G;AAAjB,GAAD,EAAsIW,YAAtI,EAAoJ;AAAEb,IAAAA,GAAG,EAAEA,GAAP;AAAYU,IAAAA,OAAO,EAAEA,OAArB;AAA8BC,IAAAA,SAAS,EAAEA,SAAzC;AAAoDR,IAAAA,QAAQ,EAAEA,QAA9D;AAAwEe,IAAAA,IAAI,EAAE,QAA9E;AAAwFN,IAAAA,QAAQ,EAAEA,QAAlG;AAA4G,oBAAgBH,QAAQ,GAAG,MAAH,GAAY,OAAhJ;AAAyJ,kBAAc,CAACL,IAAD,GAAQE,OAAR,GAAkBa;AAAzL,GAApJ,CAAtC,EACJ,CAACd,QAAQ,IAAIE,OAAZ,IAAuBC,OAAxB,KAAqChB,KAAK,CAACsB,aAAN,CAAoBpB,YAApB,EAAkC;AAAEqB,IAAAA,SAAS,EAAEtB,IAAI,CAACE,MAAM,CAACyB,IAAR,EAAchB,IAAI,GAAGT,MAAM,CAAC,WAAD,CAAT,GAAyBA,MAAM,CAAC,cAAD,CAAjD,CAAjB;AAAqF0B,IAAAA,IAAI,EAAEhB,QAA3F;AAAqGiB,IAAAA,GAAG,EAAEf,OAA1G;AAAmHgB,IAAAA,GAAG,EAAEf,OAAxH;AAAiIgB,IAAAA,GAAG,EAAElB,OAAtI;AAA+ImB,IAAAA,OAAO,EAAEtB,QAAQ,GAAG,UAAH,GAAgB;AAAhL,GAAlC,CADjC,EAEJX,KAAK,CAACsB,aAAN,CAAoB,MAApB,EAA4B,IAA5B,EAAkCV,IAAlC,CAFI,CAAR;AAGH,CAPoB,CAAd","sourcesContent":["import { __assign } from \"tslib\";\nimport React from 'react';\nimport clsx from 'clsx';\nimport InternalIcon from '../icon/internal';\nimport styles from './styles.css.js';\nimport useFocusVisible from '../internal/hooks/focus-visible';\nexport var Segment = React.forwardRef(function (_a, ref) {\n    var _b, _c;\n    var disabled = _a.disabled, text = _a.text, iconName = _a.iconName, iconAlt = _a.iconAlt, iconUrl = _a.iconUrl, iconSvg = _a.iconSvg, isActive = _a.isActive, onClick = _a.onClick, onKeyDown = _a.onKeyDown, tabIndex = _a.tabIndex;\n    var focusVisible = useFocusVisible();\n    return (React.createElement(\"button\", __assign({ className: clsx(styles.segment, (_b = {}, _b[styles.disabled] = !!disabled, _b), (_c = {}, _c[styles.selected] = isActive, _c)) }, focusVisible, { ref: ref, onClick: onClick, onKeyDown: onKeyDown, disabled: disabled, type: \"button\", tabIndex: tabIndex, \"aria-pressed\": isActive ? 'true' : 'false', \"aria-label\": !text ? iconAlt : undefined }),\n        (iconName || iconUrl || iconSvg) && (React.createElement(InternalIcon, { className: clsx(styles.icon, text ? styles['with-text'] : styles['with-no-text']), name: iconName, url: iconUrl, svg: iconSvg, alt: iconAlt, variant: disabled ? 'disabled' : 'normal' })),\n        React.createElement(\"span\", null, text)));\n});\n"]},"metadata":{},"sourceType":"module"}