{"ast":null,"code":"var SPACE_BETWEEN = 4;\nexport function formatTicks(_a) {\n  var ticks = _a.ticks,\n      scale = _a.scale,\n      getLabelSpace = _a.getLabelSpace,\n      tickFormatter = _a.tickFormatter;\n  return ticks.map(function (tick) {\n    var _a;\n\n    var position = (_a = scale.d3Scale(tick)) !== null && _a !== void 0 ? _a : NaN;\n    var label = tickFormatter ? tickFormatter(tick) : tick.toString();\n    var lines = (label + '').split('\\n');\n    return {\n      position: position,\n      lines: lines,\n      space: Math.max.apply(Math, lines.map(getLabelSpace))\n    };\n  });\n}\nexport function getVisibleTicks(ticks, from, until, balanceTicks) {\n  if (balanceTicks === void 0) {\n    balanceTicks = false;\n  }\n\n  ticks = getTicksInRange(ticks, from, until);\n  return balanceTicks ? getReducedTicks(ticks) : removeIntersections(ticks);\n}\n\nfunction getTicksInRange(ticks, from, until) {\n  return ticks.filter(function (tick) {\n    return from <= tick.position - tick.space / 2 && tick.position + tick.space / 2 <= until;\n  });\n}\n\nfunction getReducedTicks(ticks) {\n  var reduceLabelRatio = findReduceLabelRatio(ticks);\n  var reducedTicks = [];\n\n  for (var index = 0; index < ticks.length; index += reduceLabelRatio) {\n    reducedTicks.push(ticks[index]);\n  }\n\n  return reducedTicks;\n}\n\nfunction findReduceLabelRatio(ticks, ratio) {\n  if (ratio === void 0) {\n    ratio = 1;\n  }\n\n  if (ratio >= ticks.length) {\n    return ratio;\n  }\n\n  for (var i = ratio; i < ticks.length; i += ratio) {\n    if (hasIntersection(ticks[i - ratio], ticks[i])) {\n      return findReduceLabelRatio(ticks, ratio + 1);\n    }\n  }\n\n  return ratio;\n}\n\nfunction removeIntersections(ticks) {\n  var visibleTicks = [];\n  var prevTick = null;\n\n  for (var _i = 0, ticks_1 = ticks; _i < ticks_1.length; _i++) {\n    var tick = ticks_1[_i];\n\n    if (!prevTick || !hasIntersection(prevTick, tick)) {\n      visibleTicks.push(tick);\n      prevTick = tick;\n    }\n  }\n\n  return visibleTicks;\n}\n\nfunction hasIntersection(a, b) {\n  var _a = a.position < b.position ? [a, b] : [b, a],\n      left = _a[0],\n      right = _a[1];\n\n  var leftEdge = left.position + left.space / 2 + SPACE_BETWEEN;\n  var rightEdge = right.position - right.space / 2;\n  return leftEdge > rightEdge;\n}","map":{"version":3,"sources":["/Users/isingheg/Desktop/projects/test-react-amplify/node_modules/@awsui/components-react/internal/components/cartesian-chart/label-utils.js"],"names":["SPACE_BETWEEN","formatTicks","_a","ticks","scale","getLabelSpace","tickFormatter","map","tick","position","d3Scale","NaN","label","toString","lines","split","space","Math","max","apply","getVisibleTicks","from","until","balanceTicks","getTicksInRange","getReducedTicks","removeIntersections","filter","reduceLabelRatio","findReduceLabelRatio","reducedTicks","index","length","push","ratio","i","hasIntersection","visibleTicks","prevTick","_i","ticks_1","a","b","left","right","leftEdge","rightEdge"],"mappings":"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","sourcesContent":["var SPACE_BETWEEN = 4;\nexport function formatTicks(_a) {\n    var ticks = _a.ticks, scale = _a.scale, getLabelSpace = _a.getLabelSpace, tickFormatter = _a.tickFormatter;\n    return ticks.map(function (tick) {\n        var _a;\n        var position = (_a = scale.d3Scale(tick)) !== null && _a !== void 0 ? _a : NaN;\n        var label = tickFormatter ? tickFormatter(tick) : tick.toString();\n        var lines = (label + '').split('\\n');\n        return { position: position, lines: lines, space: Math.max.apply(Math, lines.map(getLabelSpace)) };\n    });\n}\nexport function getVisibleTicks(ticks, from, until, balanceTicks) {\n    if (balanceTicks === void 0) { balanceTicks = false; }\n    ticks = getTicksInRange(ticks, from, until);\n    return balanceTicks ? getReducedTicks(ticks) : removeIntersections(ticks);\n}\nfunction getTicksInRange(ticks, from, until) {\n    return ticks.filter(function (tick) { return from <= tick.position - tick.space / 2 && tick.position + tick.space / 2 <= until; });\n}\nfunction getReducedTicks(ticks) {\n    var reduceLabelRatio = findReduceLabelRatio(ticks);\n    var reducedTicks = [];\n    for (var index = 0; index < ticks.length; index += reduceLabelRatio) {\n        reducedTicks.push(ticks[index]);\n    }\n    return reducedTicks;\n}\nfunction findReduceLabelRatio(ticks, ratio) {\n    if (ratio === void 0) { ratio = 1; }\n    if (ratio >= ticks.length) {\n        return ratio;\n    }\n    for (var i = ratio; i < ticks.length; i += ratio) {\n        if (hasIntersection(ticks[i - ratio], ticks[i])) {\n            return findReduceLabelRatio(ticks, ratio + 1);\n        }\n    }\n    return ratio;\n}\nfunction removeIntersections(ticks) {\n    var visibleTicks = [];\n    var prevTick = null;\n    for (var _i = 0, ticks_1 = ticks; _i < ticks_1.length; _i++) {\n        var tick = ticks_1[_i];\n        if (!prevTick || !hasIntersection(prevTick, tick)) {\n            visibleTicks.push(tick);\n            prevTick = tick;\n        }\n    }\n    return visibleTicks;\n}\nfunction hasIntersection(a, b) {\n    var _a = a.position < b.position ? [a, b] : [b, a], left = _a[0], right = _a[1];\n    var leftEdge = left.position + left.space / 2 + SPACE_BETWEEN;\n    var rightEdge = right.position - right.space / 2;\n    return leftEdge > rightEdge;\n}\n"]},"metadata":{},"sourceType":"module"}