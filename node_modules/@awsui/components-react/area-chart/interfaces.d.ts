import { CartesianChartProps, ChartDataTypes } from '../internal/components/cartesian-chart/interfaces';
export interface AreaChartProps<T extends AreaChartProps.DataTypes> extends CartesianChartProps<T, AreaChartProps.Series<T>> {
    series: ReadonlyArray<AreaChartProps.Series<T>>;
    i18nStrings?: AreaChartProps.I18nStrings<T>;
}
export declare namespace AreaChartProps {
    type DataTypes = ChartDataTypes;
    interface Datum<T> {
        x: T;
        y: number;
    }
    type Series<T> = AreaSeries<T> | ThresholdSeries;
    interface AreaSeries<T> {
        type: 'area';
        title: string;
        color?: string;
        data: T extends unknown ? ReadonlyArray<Datum<T>> : ReadonlyArray<Datum<T>>;
        valueFormatter?: ValueFormatter<number, T>;
    }
    interface ThresholdSeries {
        type: 'threshold';
        title: string;
        color?: string;
        y: number;
        valueFormatter?: TickFormatter<number>;
    }
    type FilterChangeDetail<T> = CartesianChartProps.FilterChangeDetail<Series<T>>;
    type HighlightChangeDetail<T> = CartesianChartProps.HighlightChangeDetail<Series<T>>;
    type TickFormatter<T> = CartesianChartProps.TickFormatter<T>;
    type ValueFormatter<YType, XType = null> = CartesianChartProps.ValueFormatter<YType, XType>;
    interface I18nStrings<T> extends CartesianChartProps.I18nStrings<T> {
        detailTotalLabel?: string;
        detailTotalFormatter?: TickFormatter<number>;
    }
}
