import { __assign } from "tslib";
import React, { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';
import { useVirtual } from 'react-virtual';
import OptionsList from '../internal/components/options-list';
import { useContainerQuery } from '../internal/hooks/container-queries';
import AutosuggestOption from './autosuggest-option';
import { getOptionProps } from './plain-list';
import styles from './styles.css.js';
var VirtualList = function (_a, ref) {
    var handleLoadMore = _a.handleLoadMore, filteredItems = _a.filteredItems, usingMouse = _a.usingMouse, menuProps = _a.menuProps, highlightedOption = _a.highlightedOption, enteredTextLabel = _a.enteredTextLabel, highlightedA11yProps = _a.highlightedA11yProps, hasDropdownStatus = _a.hasDropdownStatus, highlightText = _a.highlightText, listBottom = _a.listBottom;
    var scrollRef = useRef(null);
    var _b = useContainerQuery(function (rect) { return rect.width; }, []), width = _b[0], strutRef = _b[1];
    useImperativeHandle(strutRef, function () { return scrollRef.current; });
    var rowVirtualizer = useVirtual({
        size: filteredItems.length,
        parentRef: scrollRef,
        estimateSize: useCallback(function () { return 31; }, [width, highlightText]),
        overscan: 5
    });
    useImperativeHandle(ref, function () { return function (index) {
        if (!usingMouse.current) {
            rowVirtualizer.scrollToIndex(index);
        }
    }; }, [usingMouse, rowVirtualizer]);
    return (React.createElement(OptionsList, __assign({}, menuProps, { onLoadMore: handleLoadMore, ref: scrollRef, open: true, nativeAttributes: { unselectable: 'on' } }),
        React.createElement("div", { "aria-hidden": "true", key: "total-size", className: styles['layout-strut'], style: { height: rowVirtualizer.totalSize + (filteredItems.length === 1 ? 1 : 0) } }),
        rowVirtualizer.virtualItems.map(function (virtualRow) {
            var index = virtualRow.index, start = virtualRow.start, measureRef = virtualRow.measureRef;
            var item = filteredItems[index];
            var optionProps = getOptionProps(index, item, filteredItems, highlightedA11yProps, highlightedOption, hasDropdownStatus);
            return (React.createElement(AutosuggestOption, __assign({ key: index, ref: measureRef, highlightText: highlightText, option: item, highlighted: item === highlightedOption, "data-mouse-target": index, enteredTextLabel: enteredTextLabel, virtualPosition: start + (index === 0 ? 1 : 0) }, optionProps)));
        }),
        listBottom ? React.createElement("li", { className: styles['list-bottom'] }, listBottom) : null));
};
export default forwardRef(VirtualList);
