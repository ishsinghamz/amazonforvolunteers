import { __assign, __rest } from "tslib";
import clsx from 'clsx';
import React, { useCallback, useEffect, useRef, useState } from 'react';
import { useAutosuggestItems, useFilteredItems, useKeyboardHandler, useSelectVisibleOption, useHighlightVisibleOption, } from './controller';
import { useDropdownA11yProps } from './hooks/a11y';
import VirtualList from './virtual-list';
import PlainList from './plain-list';
import Dropdown from '../internal/components/dropdown';
import { useDropdownStatus } from '../internal/components/dropdown-status';
import DropdownFooter from '../internal/components/dropdown-footer';
import { useFormFieldContext } from '../internal/context/form-field-context';
import { getBaseProps } from '../internal/base-component';
import { useUniqueId } from '../internal/hooks/use-unique-id';
import useForwardFocus from '../internal/hooks/forward-focus';
import { fireNonCancelableEvent } from '../internal/events';
import { createHighlightedOptionHook } from '../internal/components/options-list/utils/use-highlight-option';
import InternalInput from '../input/internal';
import styles from './styles.css.js';
import { checkOptionValueField } from '../select/utils/check-option-value-field';
import checkControlled from '../internal/hooks/check-controlled';
import { fireCancelableEvent } from '../internal/events/index';
var isInteractive = function (option) {
    return !!option && !option.disabled && option.type !== 'parent';
};
var useHighlightedOption = createHighlightedOptionHook({ isInteractive: isInteractive });
var createMouseEventHandler = function (handler, usingMouse) { return function (itemIndex) {
    usingMouse.current = true;
    if (itemIndex > -1) {
        handler(itemIndex);
    }
}; };
var useLoadMoreItems = function (onLoadItems) {
    var lastFilteringText = useRef(null);
    return useCallback(function (firstPage, samePage, filteringText) {
        if (samePage || !firstPage || filteringText === undefined || lastFilteringText.current !== filteringText) {
            if (filteringText !== undefined) {
                lastFilteringText.current = filteringText;
            }
            if (lastFilteringText.current !== null && onLoadItems) {
                fireNonCancelableEvent(onLoadItems, { filteringText: lastFilteringText.current, firstPage: firstPage, samePage: samePage });
            }
        }
    }, [onLoadItems]);
};
var InternalAutosuggest = React.forwardRef(function (props, ref) {
    var value = props.value, onChange = props.onChange, onBlur = props.onBlur, onFocus = props.onFocus, onKeyUp = props.onKeyUp, onLoadItems = props.onLoadItems, options = props.options, _a = props.filteringType, filteringType = _a === void 0 ? 'auto' : _a, _b = props.statusType, statusType = _b === void 0 ? 'finished' : _b, placeholder = props.placeholder, name = props.name, disabled = props.disabled, _c = props.disableBrowserAutocorrect, disableBrowserAutocorrect = _c === void 0 ? false : _c, autoFocus = props.autoFocus, readOnly = props.readOnly, ariaLabel = props.ariaLabel, ariaRequired = props.ariaRequired, enteredTextLabel = props.enteredTextLabel, onKeyDown = props.onKeyDown, virtualScroll = props.virtualScroll, expandToViewport = props.expandToViewport, onSelect = props.onSelect, __dropdownWidth = props.__dropdownWidth, __onOptionClick = props.__onOptionClick, __disableShowAll = props.__disableShowAll, __hideEnteredTextOption = props.__hideEnteredTextOption, __onOpen = props.__onOpen, __internalRootRef = props.__internalRootRef, rest = __rest(props, ["value", "onChange", "onBlur", "onFocus", "onKeyUp", "onLoadItems", "options", "filteringType", "statusType", "placeholder", "name", "disabled", "disableBrowserAutocorrect", "autoFocus", "readOnly", "ariaLabel", "ariaRequired", "enteredTextLabel", "onKeyDown", "virtualScroll", "expandToViewport", "onSelect", "__dropdownWidth", "__onOptionClick", "__disableShowAll", "__hideEnteredTextOption", "__onOpen", "__internalRootRef"]);
    var filterText = rest.__filterText;
    filterText = filterText === undefined ? value : filterText;
    checkControlled('Autosuggest', 'value', value, 'onChange', onChange);
    checkOptionValueField('Autosuggest', 'options', options);
    var usingMouse = useRef(true);
    var _d = useState(false), showAll = _d[0], setShowAll = _d[1];
    var _e = useState(false), open = _e[0], setOpen = _e[1];
    var autosuggestItems = useAutosuggestItems(options);
    var filteredItems = useFilteredItems(autosuggestItems, value, filterText, filteringType, showAll, __hideEnteredTextOption);
    var openDropdown = function () { return !readOnly && setOpen(true); };
    var scrollToIndex = useRef(null);
    var _f = useHighlightedOption(filteredItems), highlightedOption = _f.highlightedOption, highlightedIndex = _f.highlightedIndex, moveHighlight = _f.moveHighlight, resetHighlight = _f.resetHighlight, setHighlightedIndex = _f.setHighlightedIndex;
    var closeDropdown = useCallback(function () {
        setOpen(false);
        resetHighlight();
    }, [setOpen, resetHighlight]);
    var handleBlur = useCallback(function (e) {
        closeDropdown();
        onBlur && onBlur(e);
    }, [closeDropdown, onBlur]);
    var selectOption = function (option) {
        var value = option.value || '';
        fireNonCancelableEvent(onChange, { value: value });
        var selectedCancelled = fireCancelableEvent(__onOptionClick, option);
        if (!selectedCancelled) {
            closeDropdown();
        }
        else {
            resetHighlight();
        }
        fireNonCancelableEvent(onSelect, { value: value });
    };
    var selectHighlighted = function () {
        if (highlightedOption) {
            selectOption(highlightedOption);
        }
        else {
            closeDropdown();
        }
    };
    var fireLoadMore = useLoadMoreItems(onLoadItems);
    var handleDelayedInput = useCallback(function (_a) {
        var detail = _a.detail;
        fireLoadMore(true, false, detail.value);
    }, [fireLoadMore]);
    var handleInputChange = function (e) {
        openDropdown();
        setShowAll(false);
        resetHighlight();
        onChange && onChange(e);
    };
    var highlightVisibleOption = useHighlightVisibleOption(filteredItems, setHighlightedIndex, isInteractive);
    var selectVisibleOption = useSelectVisibleOption(filteredItems, selectOption, isInteractive);
    var handleMouseUp = createMouseEventHandler(selectVisibleOption, usingMouse);
    var handleMouseMove = createMouseEventHandler(highlightVisibleOption, usingMouse);
    var handleKeyDown = useKeyboardHandler(moveHighlight, openDropdown, selectHighlighted, usingMouse, open, onKeyDown);
    var handleLoadMore = useCallback(function () {
        options && options.length && statusType === 'pending' && fireLoadMore(false, false);
    }, [fireLoadMore, options, statusType]);
    var handleRecoveryClick = useCallback(function () { return fireLoadMore(false, true); }, [fireLoadMore]);
    var formFieldContext = useFormFieldContext(rest);
    var baseProps = getBaseProps(rest);
    var inputRef = useRef(null);
    useForwardFocus(ref, inputRef);
    var dropdownId = useUniqueId('dropdown');
    var listId = useUniqueId('list');
    var expanded = open && filteredItems.length > 1;
    var _g = useDropdownA11yProps(listId, expanded, ariaLabel, highlightedOption), inputA11yProps = _g[0], highlightedA11yProps = _g[1];
    var nativeAttributes = __assign({ name: name, placeholder: placeholder, autoFocus: autoFocus, onClick: openDropdown }, inputA11yProps);
    var handleFocus = function (e) {
        !__disableShowAll && setShowAll(true);
        var openPrevented = fireCancelableEvent(__onOpen, null);
        if (!openPrevented) {
            openDropdown();
            fireLoadMore(true, false, '');
        }
        onFocus && onFocus(e);
    };
    useEffect(function () {
        var _a;
        (_a = scrollToIndex.current) === null || _a === void 0 ? void 0 : _a.call(scrollToIndex, highlightedIndex);
    }, [highlightedIndex]);
    var isEmpty = !value && !filteredItems.length;
    var dropdownStatus = useDropdownStatus(__assign(__assign({}, props), { isEmpty: isEmpty, onRecoveryClick: handleRecoveryClick }));
    var ListComponent = virtualScroll ? VirtualList : PlainList;
    var handleMouseDown = function (event) {
        event.preventDefault();
    };
    return (React.createElement("div", __assign({}, baseProps, { className: clsx(styles.root, baseProps.className), ref: __internalRootRef }),
        React.createElement(Dropdown, { minWidth: __dropdownWidth, stretchWidth: !__dropdownWidth, trigger: React.createElement(InternalInput, __assign({ type: "search", value: value, onChange: handleInputChange, __onDelayedInput: handleDelayedInput, onFocus: handleFocus, onBlur: handleBlur, onKeyDown: handleKeyDown, onKeyUp: onKeyUp, disabled: disabled, disableBrowserAutocorrect: disableBrowserAutocorrect, readOnly: readOnly, ariaRequired: ariaRequired, ref: inputRef, autoComplete: false, __nativeAttributes: nativeAttributes }, formFieldContext)), onMouseDown: handleMouseDown, open: open, dropdownId: dropdownId, footer: dropdownStatus.isSticky ? (React.createElement(DropdownFooter, { content: dropdownStatus.content, hasItems: filteredItems.length >= 1 })) : null, expandToViewport: expandToViewport, hasContent: filteredItems.length >= 1 || dropdownStatus.content !== null }, open && (React.createElement(ListComponent, { listBottom: !dropdownStatus.isSticky ? React.createElement(DropdownFooter, { content: dropdownStatus.content }) : null, handleLoadMore: handleLoadMore, filteredItems: filteredItems, highlightText: filterText, usingMouse: usingMouse, highlightedOption: highlightedOption, enteredTextLabel: enteredTextLabel, ref: scrollToIndex, highlightedA11yProps: highlightedA11yProps, hasDropdownStatus: dropdownStatus.content !== null, menuProps: {
                id: listId,
                onMouseUp: handleMouseUp,
                onMouseMove: handleMouseMove
            } })))));
});
export default InternalAutosuggest;
