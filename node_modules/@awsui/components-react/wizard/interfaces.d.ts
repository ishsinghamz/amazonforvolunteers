import React from 'react';
import { BaseComponentProps } from '../internal/base-component';
import { NonCancelableEventHandler } from '../internal/events';
export interface WizardProps extends BaseComponentProps {
    steps: ReadonlyArray<WizardProps.Step>;
    activeStepIndex?: number;
    i18nStrings: WizardProps.I18nStrings;
    isLoadingNextStep?: boolean;
    allowSkipTo?: boolean;
    secondaryActions?: React.ReactNode;
    onCancel?: NonCancelableEventHandler;
    onSubmit?: NonCancelableEventHandler;
    onNavigate?: NonCancelableEventHandler<WizardProps.NavigateDetail>;
}
export declare namespace WizardProps {
    interface Step {
        title: string;
        info?: React.ReactNode;
        description?: React.ReactNode;
        content: React.ReactNode;
        errorText?: React.ReactNode;
        isOptional?: boolean;
    }
    interface I18nStrings {
        stepNumberLabel(stepNumber: number): string;
        collapsedStepsLabel(stepNumber: number, stepsCount: number): string;
        skipToButtonLabel?(targetStep: WizardProps.Step, targetStepNumber: number): string;
        cancelButton: string;
        previousButton: string;
        nextButton: string;
        submitButton: string;
        optional?: string;
    }
    interface NavigateDetail {
        requestedStepIndex: number;
        reason: WizardProps.NavigationReason;
    }
    type NavigationReason = 'next' | 'previous' | 'step' | 'skip';
}
