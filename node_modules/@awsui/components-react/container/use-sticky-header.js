import { useState, useLayoutEffect, useCallback, useEffect, createContext } from 'react';
import { useAppLayoutContext } from '../internal/context/app-layout-context';
import { useMobile } from '../internal/hooks/use-mobile';
import { supportsStickyPosition } from '../internal/utils/dom';
import { getOverflowParents } from '../internal/utils/scrollable-containers';
import { useVisualRefresh } from '../internal/hooks/use-visual-mode';
import customCssProps from '../internal/generated/custom-css-properties';
export var StickyHeaderContext = createContext({ isStuck: false });
export var CONTAINER_ROOT_BORDER = 1;
export var useStickyHeader = function (rootRef, headerRef, __stickyHeader, __stickyOffset) {
    var _a = useState(false), usesBodyScroll = _a[0], setState = _a[1];
    var _b = useState(false), isStuck = _b[0], setIsStuck = _b[1];
    useLayoutEffect(function () {
        var overflowParents = rootRef.current && getOverflowParents(rootRef.current).length;
        setState(!overflowParents);
    }, [rootRef]);
    var stickyOffsetTop = useAppLayoutContext().stickyOffsetTop;
    var effectiveStickyOffset = __stickyOffset !== null && __stickyOffset !== void 0 ? __stickyOffset : (usesBodyScroll ? stickyOffsetTop : 0);
    var isSticky = useSupportsStickyHeader() && !!__stickyHeader;
    var isRefresh = useVisualRefresh(rootRef);
    var computedOffset = effectiveStickyOffset - CONTAINER_ROOT_BORDER + "px";
    if (usesBodyScroll && isRefresh) {
        computedOffset = "var(" + customCssProps.offsetTopWithNotifications + ", " + computedOffset + ")";
    }
    var stickyStyles = isSticky
        ? {
            style: {
                top: computedOffset
            }
        }
        : {};
    var checkIfStuck = useCallback(function () {
        if (rootRef.current && headerRef.current) {
            var rootTop = rootRef.current.getBoundingClientRect().top;
            var headerTop = headerRef.current.getBoundingClientRect().top;
            if (rootTop + CONTAINER_ROOT_BORDER < headerTop) {
                setIsStuck(true);
            }
            else {
                setIsStuck(false);
            }
        }
    }, [rootRef, headerRef]);
    useEffect(function () {
        if (isSticky) {
            window.addEventListener('scroll', checkIfStuck, true);
            window.addEventListener('resize', checkIfStuck);
            return function () {
                window.removeEventListener('scroll', checkIfStuck, true);
                window.removeEventListener('resize', checkIfStuck);
            };
        }
    }, [isSticky, checkIfStuck]);
    return {
        isSticky: isSticky,
        isStuck: isStuck,
        stickyStyles: stickyStyles
    };
};
export function useSupportsStickyHeader() {
    var isMobile = useMobile();
    return supportsStickyPosition() && !isMobile;
}
