import { __assign } from "tslib";
import clsx from 'clsx';
import React from 'react';
import { Transition } from '../internal/components/transition';
import { Drawer } from './drawer';
import { SplitPanelWrapper } from './split-panel-wrapper';
import { ToggleButtons } from './toggle-buttons';
import { CircularButton } from './toggles/circular-button';
import styles from './styles.css.js';
import testutilStyles from './test-utils/styles.css.js';
export function ToolsAndSplitPanel(_a) {
    var ariaLabels = _a.ariaLabels, closedDrawerWidth = _a.closedDrawerWidth, contentHeightStyle = _a.contentHeightStyle, _b = _a.disableContentPaddings, disableContentPaddings = _b === void 0 ? false : _b, drawerWidth = _a.drawerWidth, footerHeight = _a.footerHeight, headerHeight = _a.headerHeight, isHidden = _a.isHidden, isMobile = _a.isMobile, isMotionEnabled = _a.isMotionEnabled, isRefresh = _a.isRefresh, onToolsToggle = _a.onToolsToggle, panelHeightStyle = _a.panelHeightStyle, setSplitPanelTransitionState = _a.setSplitPanelTransitionState, setToolsPanelTransitionState = _a.setToolsPanelTransitionState, splitPanel = _a.splitPanel, splitPanelContext = _a.splitPanelContext, splitPanelReportedSize = _a.splitPanelReportedSize, splitPanelTransitionState = _a.splitPanelTransitionState, toggleRefs = _a.toggleRefs, tools = _a.tools, toolsHide = _a.toolsHide, toolsOpen = _a.toolsOpen, toolsPanelTransitionState = _a.toolsPanelTransitionState, toolsWidth = _a.toolsWidth, splitPanelOpen = _a.splitPanelOpen;
    var splitPanelVisible = (splitPanelOpen || (splitPanelTransitionState === 'exiting' && isMotionEnabled)) && Boolean(splitPanel);
    var showSideButtonsBar = isRefresh && Boolean(splitPanel);
    var toolsVisible = !toolsHide && toolsOpen;
    var showToolsPanelExitState = isRefresh &&
        isMotionEnabled &&
        ((!toolsOpen && toolsPanelTransitionState === 'exiting') ||
            (toolsOpen && (toolsPanelTransitionState === 'enter' || toolsPanelTransitionState === 'exited')));
    var showSplitPanelExitState = isRefresh &&
        isMotionEnabled &&
        Boolean(splitPanel) &&
        ((!splitPanelOpen && splitPanelTransitionState === 'exiting') ||
            (splitPanelOpen && (splitPanelTransitionState === 'enter' || splitPanelTransitionState === 'exited')));
    var additionalSplitPanelMovement = toolsOpen ? 0 : closedDrawerWidth;
    var additionalToolsPanelMovement = splitPanelOpen ? 0 : closedDrawerWidth;
    return (React.createElement(Transition, { "in": toolsOpen, onStatusChange: setToolsPanelTransitionState, disabled: !isRefresh }, function (_, toolsPanelTransitionRef) {
        var _a, _b;
        return (React.createElement(React.Fragment, null,
            React.createElement("div", { style: {
                    width: drawerWidth
                } },
                React.createElement("div", { ref: toolsPanelTransitionRef, className: clsx(styles['panel-wrapper-outer'], (_a = {},
                        _a[styles.mobile] = isMobile,
                        _a[styles.open] = toolsOpen,
                        _a), isRefresh && (_b = {},
                        _b[styles['enable-motion']] = isMotionEnabled &&
                            toolsPanelTransitionState !== 'enter' &&
                            toolsPanelTransitionState !== 'entered' &&
                            toolsPanelTransitionState !== 'exit' &&
                            toolsPanelTransitionState !== 'exited',
                        _b[styles.refresh] = true,
                        _b[styles.hide] = showToolsPanelExitState && !splitPanelVisible && !disableContentPaddings,
                        _b)), style: __assign(__assign({ right: showSideButtonsBar && (!toolsHide || !splitPanelVisible)
                            ? closedDrawerWidth
                            : isRefresh
                                ? 0
                                : undefined }, (isMobile ? { top: headerHeight, bottom: footerHeight } : panelHeightStyle)), (showToolsPanelExitState
                        ? {
                            transform: isMobile
                                ? "translateX(100%)"
                                : "translateX(" + (toolsWidth + additionalToolsPanelMovement) + "px)"
                        }
                        : {})) },
                    splitPanel && (React.createElement(React.Fragment, null,
                        !isRefresh && React.createElement(SplitPanelWrapper, { context: splitPanelContext }, splitPanel),
                        isRefresh && (React.createElement(Transition, { "in": splitPanelOpen, onStatusChange: setSplitPanelTransitionState }, function (_, splitPanelTransitionRef) {
                            var _a;
                            return (React.createElement("div", { ref: splitPanelTransitionRef, className: clsx(styles['panel-wrapper-inner'], isRefresh && (_a = {},
                                    _a[styles['enable-motion']] = isMotionEnabled &&
                                        splitPanelTransitionState !== 'enter' &&
                                        splitPanelTransitionState !== 'entered' &&
                                        splitPanelTransitionState !== 'exit' &&
                                        splitPanelTransitionState !== 'exited',
                                    _a[styles.refresh] = true,
                                    _a[styles.hide] = showSplitPanelExitState && !disableContentPaddings,
                                    _a)), style: __assign(__assign({ transform: showSplitPanelExitState
                                        ? "translateX(" + (splitPanelReportedSize + additionalSplitPanelMovement) + "px)"
                                        : undefined }, contentHeightStyle), { marginRight: splitPanelVisible ? -closedDrawerWidth : 0, paddingRight: splitPanelVisible ? closedDrawerWidth : 0 }) }, splitPanelVisible && (React.createElement("div", { style: {
                                    display: !splitPanelVisible ? 'none' : undefined,
                                    height: '100%'
                                } },
                                React.createElement(SplitPanelWrapper, { context: splitPanelContext }, splitPanel)))));
                        })))),
                    !toolsHide && (React.createElement(Drawer, { visualRefresh: isRefresh, type: "tools", isMobile: isMobile, width: toolsWidth, isOpen: toolsOpen || (toolsPanelTransitionState === 'exiting' && isMotionEnabled), onToggle: onToolsToggle, toggleRefs: toggleRefs, isHidden: isHidden, externalizedToggle: Boolean(splitPanel), contentClassName: clsx(styles.tools, testutilStyles.tools), closeClassName: clsx(styles['tools-close'], testutilStyles['tools-close']), toggleClassName: clsx(styles['tools-toggle'], testutilStyles['tools-toggle']), topOffset: isRefresh ? 0 : headerHeight, bottomOffset: isRefresh ? 0 : footerHeight, ariaLabels: ariaLabels, extendRight: showSideButtonsBar && (!toolsHide || !splitPanelOpen) ? closedDrawerWidth : 0, hasDividerWithSplitPanel: splitPanelVisible }, tools)))),
            showSideButtonsBar && (!toolsHide || !splitPanelOpen) && (React.createElement(ToggleButtons, { ariaLabels: ariaLabels, anyPanelOpen: !!splitPanelVisible || toolsVisible, opaqueBackground: splitPanelVisible &&
                    isMotionEnabled &&
                    (toolsPanelTransitionState === 'exiting' || toolsPanelTransitionState === 'entering'), isHidden: disableContentPaddings },
                !toolsHide && (React.createElement(CircularButton, { ref: toggleRefs.toggle, className: clsx(styles['tools-toggle'], testutilStyles['tools-toggle']), selected: toolsOpen, iconName: "status-info", ariaLabel: ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.toolsToggle, onClick: function () { return onToolsToggle(!toolsOpen); }, ariaExpanded: toolsOpen })),
                React.createElement(SplitPanelWrapper, { context: splitPanelContext, isCopy: true }, splitPanel)))));
    }));
}
