import clsx from 'clsx';
import React from 'react';
import { AppLayoutButton, CloseButton, togglesConfig } from './toggles';
import { CircularButton } from './toggles/circular-button';
import styles from './styles.css.js';
var BORDER_WIDTH = 2;
export function Drawer(_a) {
    var _b;
    var visualRefresh = _a.visualRefresh, contentClassName = _a.contentClassName, toggleClassName = _a.toggleClassName, closeClassName = _a.closeClassName, width = _a.width, type = _a.type, toggleRefs = _a.toggleRefs, externalizedToggle = _a.externalizedToggle, topOffset = _a.topOffset, bottomOffset = _a.bottomOffset, ariaLabels = _a.ariaLabels, children = _a.children, isOpen = _a.isOpen, isHidden = _a.isHidden, isMobile = _a.isMobile, hasDividerWithSplitPanel = _a.hasDividerWithSplitPanel, onToggle = _a.onToggle, onClick = _a.onClick, _c = _a.extendRight, extendRight = _c === void 0 ? 0 : _c;
    var _d = togglesConfig[type], TagName = _d.TagName, iconName = _d.iconName, getLabels = _d.getLabels;
    var _e = getLabels(ariaLabels), mainLabel = _e.mainLabel, closeLabel = _e.closeLabel, openLabel = _e.openLabel;
    var hasDividerWithButtonBar = isOpen && extendRight !== 0;
    var drawerContentWidthOpen = isMobile ? undefined : width;
    var drawerContentWidth = isOpen ? drawerContentWidthOpen : undefined;
    var drawerWidth = hasDividerWithButtonBar && drawerContentWidth ? drawerContentWidth + BORDER_WIDTH : drawerContentWidth;
    var closeIconName = !visualRefresh || isMobile ? 'close' : type === 'navigation' ? 'angle-left' : 'angle-right';
    var visualRefreshOpenButton = !externalizedToggle && (React.createElement(TagName, { "aria-label": mainLabel, className: clsx(styles['visual-refresh-toggle'], styles["visual-refresh-toggle-type-" + type]), style: { top: topOffset }, "aria-hidden": isOpen },
        React.createElement(CircularButton, { ref: toggleRefs.toggle, className: toggleClassName, iconName: iconName, ariaLabel: openLabel, onClick: function () { return onToggle(true); }, ariaExpanded: false })));
    var regularOpenButton = (React.createElement(TagName, { "aria-label": mainLabel, className: styles.toggle, "aria-hidden": isOpen },
        React.createElement(AppLayoutButton, { ref: toggleRefs.toggle, className: toggleClassName, iconName: iconName, ariaLabel: openLabel, onClick: function () { return onToggle(true); }, ariaExpanded: false })));
    return (React.createElement("div", { className: clsx(styles.drawer, (_b = {},
            _b[styles['drawer-closed']] = !isOpen,
            _b[styles['drawer-hidden']] = isHidden,
            _b[styles['drawer-mobile']] = isMobile,
            _b[styles['drawer-refresh']] = visualRefresh,
            _b[styles['has-divider-with-splitpanel']] = hasDividerWithSplitPanel,
            _b[styles['opaque-background']] = hasDividerWithButtonBar,
            _b)), style: {
            width: drawerWidth,
            marginRight: isOpen ? -1 * extendRight : 0,
            paddingRight: isOpen ? extendRight : 0
        }, onClick: function (event) {
            if (onClick) {
                onClick(event);
            }
            if (!isOpen && !visualRefresh) {
                if (event.target.tagName !== 'BUTTON') {
                    onToggle(true);
                }
            }
        } },
        !isMobile && visualRefresh && visualRefreshOpenButton,
        React.createElement("div", { style: { width: drawerContentWidth, top: topOffset, bottom: bottomOffset }, className: clsx(styles['drawer-content'], contentClassName) },
            !isMobile && !visualRefresh && regularOpenButton,
            React.createElement(TagName, { "aria-label": mainLabel, "aria-hidden": !isOpen },
                React.createElement(CloseButton, { ref: toggleRefs.close, className: closeClassName, ariaLabel: closeLabel, onClick: function () { return onToggle(false); }, iconName: closeIconName }),
                children))));
}
