import { __assign, __rest } from "tslib";
import React, { useCallback, useContext, useState } from 'react';
import clsx from 'clsx';
import { AppLayoutContext } from './context';
import { SplitPanelContext } from '../../internal/context/split-panel-context';
import { useResizeObserver } from '../../internal/hooks/container-queries';
import styles from './styles.css.js';
import testutilStyles from '../test-utils/styles.css.js';
import { getBaseProps } from '../../internal/base-component';
import mergeRefs from 'react-merge-refs';
import customCssProps from '../../internal/generated/custom-css-properties';
export default function Layout(_a) {
    var _b;
    var children = _a.children, __internalRootRef = _a.__internalRootRef;
    var _c = useContext(AppLayoutContext), contentType = _c.contentType, disableBodyScroll = _c.disableBodyScroll, footerSelector = _c.footerSelector, hasNotificationsContent = _c.hasNotificationsContent, headerSelector = _c.headerSelector, isNavigationOpen = _c.isNavigationOpen, isOverlapDisabled = _c.isOverlapDisabled, isSplitPanelOpen = _c.isSplitPanelOpen, isToolsOpen = _c.isToolsOpen, layoutElement = _c.layoutElement, layoutWidth = _c.layoutWidth, mainOffsetLeft = _c.mainOffsetLeft, maxContentWidth = _c.maxContentWidth, minContentWidth = _c.minContentWidth, navigationHide = _c.navigationHide, notificationsHeight = _c.notificationsHeight, splitPanel = _c.splitPanel, stickyNotifications = _c.stickyNotifications, toolsHide = _c.toolsHide, rest = __rest(_c, ["contentType", "disableBodyScroll", "footerSelector", "hasNotificationsContent", "headerSelector", "isNavigationOpen", "isOverlapDisabled", "isSplitPanelOpen", "isToolsOpen", "layoutElement", "layoutWidth", "mainOffsetLeft", "maxContentWidth", "minContentWidth", "navigationHide", "notificationsHeight", "splitPanel", "stickyNotifications", "toolsHide"]);
    var baseProps = getBaseProps(rest);
    var splitPanelPosition = useContext(SplitPanelContext).position;
    var _d = useState(0), headerHeight = _d[0], setHeaderHeight = _d[1];
    var _e = useState(0), footerHeight = _e[0], setFooterHeight = _e[1];
    var getHeaderElement = useCallback(function () { return document.querySelector(headerSelector); }, [headerSelector]);
    var handleHeaderHeight = useCallback(function (headerElement) { var _a; return setHeaderHeight((_a = headerElement === null || headerElement === void 0 ? void 0 : headerElement.borderBoxSize[0].blockSize) !== null && _a !== void 0 ? _a : 0); }, []);
    useResizeObserver(getHeaderElement, handleHeaderHeight);
    var getFooterElement = useCallback(function () { return document.querySelector(footerSelector); }, [footerSelector]);
    var handleFooterHeight = useCallback(function (footerElement) { var _a; return setFooterHeight((_a = footerElement === null || footerElement === void 0 ? void 0 : footerElement.borderBoxSize[0].blockSize) !== null && _a !== void 0 ? _a : 0); }, []);
    useResizeObserver(getFooterElement, handleFooterHeight);
    var hasContentGapLeft = getContentGapLeft(isNavigationOpen, navigationHide);
    var hasContentGapRight = getContentGapRight(splitPanelPosition, isSplitPanelOpen, isToolsOpen, splitPanel, toolsHide);
    return (React.createElement("main", __assign({ className: clsx(styles.layout, testutilStyles.root, baseProps.className), "data-content-type": contentType, "data-disable-body-scroll": disableBodyScroll ? true : false, "data-has-content-gap-left": hasContentGapLeft ? true : false, "data-has-content-gap-right": hasContentGapRight ? true : false, "data-has-max-content-width": maxContentWidth && maxContentWidth > 0 ? true : false, "data-has-split-panel": splitPanel ? true : false, "data-has-sticky-notifications": stickyNotifications && hasNotificationsContent ? true : false, "data-overlap-disabled": isOverlapDisabled ? true : false, "data-split-panel-position": splitPanelPosition, id: baseProps.id ? baseProps.id : undefined, ref: mergeRefs([layoutElement, __internalRootRef]), style: (_b = {},
            _b[customCssProps.headerHeight] = headerHeight + "px",
            _b[customCssProps.footerHeight] = footerHeight + "px",
            _b[customCssProps.layoutWidth] = layoutWidth + "px",
            _b[customCssProps.mainOffsetLeft] = mainOffsetLeft + "px",
            _b[customCssProps.maxContentWidth] = maxContentWidth ? maxContentWidth + "px" : '',
            _b[customCssProps.minContentWidth] = minContentWidth ? minContentWidth + "px" : '',
            _b[customCssProps.notificationsHeight] = notificationsHeight + "px",
            _b) }, baseProps), children));
}
function getContentGapRight(splitPanelPosition, isSplitPanelOpen, isToolsOpen, splitPanel, toolsHide) {
    var hasContentGapRight = false;
    if (!splitPanel && toolsHide) {
        hasContentGapRight = true;
    }
    if ((!splitPanel || !isSplitPanelOpen) && !toolsHide && isToolsOpen) {
        hasContentGapRight = true;
    }
    if (splitPanel && splitPanelPosition === 'bottom' && (isToolsOpen || toolsHide)) {
        hasContentGapRight = true;
    }
    if (splitPanel && isSplitPanelOpen && splitPanelPosition === 'side') {
        hasContentGapRight = true;
    }
    return hasContentGapRight;
}
function getContentGapLeft(isNavigationOpen, navigationHide) {
    return isNavigationOpen || navigationHide ? true : false;
}
