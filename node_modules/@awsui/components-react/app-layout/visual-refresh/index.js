import { __assign, __rest } from "tslib";
import React, { useContext } from 'react';
import AppBar from './app-bar';
import { AppLayoutContext, AppLayoutProvider } from './context';
import Background from './background';
import Header from './header';
import Layout from './layout';
import Main from './main';
import Navigation from './navigation';
import Notifications from './notifications';
import SplitPanel from './split-panel';
import Tools from './tools';
var AppLayoutWithRef = React.forwardRef(function AppLayout(_a, ref) {
    var __internalRootRef = _a.__internalRootRef, rest = __rest(_a, ["__internalRootRef"]);
    var isMobile = useContext(AppLayoutContext).isMobile;
    return (React.createElement(AppLayoutProvider, __assign({}, rest, { ref: ref }),
        React.createElement(SplitPanel, null,
            React.createElement(Layout, { __internalRootRef: __internalRootRef },
                React.createElement(Background, null),
                React.createElement(Navigation, null),
                isMobile && React.createElement(AppBar, null),
                React.createElement(Notifications, null),
                !isMobile && React.createElement(AppBar, null),
                React.createElement(Header, null),
                React.createElement(Main, null),
                React.createElement(SplitPanel.Bottom, null),
                React.createElement(Tools, null,
                    React.createElement(SplitPanel.Side, null))))));
});
export default AppLayoutWithRef;
