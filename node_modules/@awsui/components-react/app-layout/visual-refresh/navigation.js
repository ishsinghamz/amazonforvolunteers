import React, { useContext } from 'react';
import clsx from 'clsx';
import { AppLayoutContext } from './context';
import { InternalButton } from '../../button/internal';
import TriggerButton from './trigger-button';
import styles from './styles.css.js';
import testutilStyles from '../test-utils/styles.css.js';
import { useFocusControl } from '../utils/use-focus-control';
import { Transition } from '../../internal/components/transition';
import { findUpUntil } from '../../internal/utils/dom';
import customCssProps from '../../internal/generated/custom-css-properties';
export default function Navigation() {
    var _a = useContext(AppLayoutContext), ariaLabels = _a.ariaLabels, handleNavigationClick = _a.handleNavigationClick, isMobile = _a.isMobile, isNavigationOpen = _a.isNavigationOpen, navigation = _a.navigation, navigationHide = _a.navigationHide, navigationWidth = _a.navigationWidth, isToolsOpen = _a.isToolsOpen, isAnyPanelOpen = _a.isAnyPanelOpen, toolsHide = _a.toolsHide;
    var focusRefs = useFocusControl(isNavigationOpen);
    if (navigationHide) {
        return null;
    }
    var onNavigationClick = function (event) {
        var hasLink = findUpUntil(event.target, function (node) { return node.tagName === 'A' && !!node.href; });
        if (hasLink && isMobile) {
            handleNavigationClick(false);
        }
    };
    var isUnfocusable = isMobile && isAnyPanelOpen && isToolsOpen && !toolsHide;
    return (React.createElement(Transition, { "in": isNavigationOpen }, function (state, transitionEventsRef) {
        var _a, _b;
        var _c, _d, _e;
        return (React.createElement("div", { className: clsx(styles['navigation-container'], (_a = {},
                _a[testutilStyles['drawer-closed']] = !isNavigationOpen,
                _a[styles.unfocusable] = isUnfocusable,
                _a)), style: (_b = {}, _b[customCssProps.navigationWidth] = navigationWidth ? navigationWidth + "px" : '', _b) },
            !isMobile && (React.createElement("nav", { "aria-hidden": isMobile || isNavigationOpen ? true : false, "aria-label": (_c = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigation) !== null && _c !== void 0 ? _c : undefined, className: clsx(styles['show-navigation'], state === 'exiting' && styles.animating), "data-is-navigation-open": isNavigationOpen, ref: state === 'exiting' ? transitionEventsRef : undefined },
                React.createElement(TriggerButton, { ariaLabel: ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigationToggle, iconName: "menu", className: testutilStyles['navigation-toggle'], onClick: function () { return handleNavigationClick(true); }, ref: focusRefs.toggle }))),
            React.createElement("nav", { "aria-label": (_d = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigation) !== null && _d !== void 0 ? _d : undefined, className: clsx(styles.navigation, state === 'entering' && styles.animating, testutilStyles.navigation), "data-is-navigation-open": isNavigationOpen ? true : false, ref: state !== 'exiting' ? transitionEventsRef : undefined, "aria-hidden": !isNavigationOpen, onClick: function (event) {
                    onNavigationClick && onNavigationClick(event);
                } },
                React.createElement("div", { className: clsx(styles['animated-content']) },
                    React.createElement("div", { className: clsx(styles['hide-navigation']) },
                        React.createElement(InternalButton, { ariaLabel: (_e = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigationClose) !== null && _e !== void 0 ? _e : undefined, iconName: isMobile ? 'close' : 'angle-left', onClick: function () { return handleNavigationClick(false); }, variant: "icon", formAction: "none", className: testutilStyles['navigation-close'], ref: focusRefs.close })),
                    navigation))));
    }));
}
