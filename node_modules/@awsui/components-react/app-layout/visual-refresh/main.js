import React, { useContext } from 'react';
import clsx from 'clsx';
import { AppLayoutContext } from './context';
import { SplitPanelContext } from '../../internal/context/split-panel-context';
import styles from './styles.css.js';
import testutilStyles from '../test-utils/styles.css.js';
export default function Main() {
    var _a;
    var _b = useContext(AppLayoutContext), breadcrumbs = _b.breadcrumbs, content = _b.content, contentHeader = _b.contentHeader, contentType = _b.contentType, disableContentPaddings = _b.disableContentPaddings, hasNotificationsContent = _b.hasNotificationsContent, isNavigationOpen = _b.isNavigationOpen, isSplitPanelOpen = _b.isSplitPanelOpen, isToolsOpen = _b.isToolsOpen, isMobile = _b.isMobile, isAnyPanelOpen = _b.isAnyPanelOpen, mainElement = _b.mainElement;
    var splitPanelPosition = useContext(SplitPanelContext).position;
    var isUnfocusable = isMobile && isAnyPanelOpen;
    return (React.createElement("div", { className: clsx(styles.container, testutilStyles.content, (_a = {}, _a[styles.unfocusable] = isUnfocusable, _a)), "data-content-type": contentType, "data-disable-content-paddings": disableContentPaddings ? true : false, "data-has-breadcrumbs": breadcrumbs ? true : false, "data-has-header": contentHeader ? true : false, "data-has-notifications-content": hasNotificationsContent ? true : false, "data-is-navigation-open": isNavigationOpen ? true : false, "data-is-tools-open": isToolsOpen ? true : false, "data-is-split-panel-open": isSplitPanelOpen ? true : false, "data-split-panel-position": splitPanelPosition !== null && splitPanelPosition !== void 0 ? splitPanelPosition : 'bottom', ref: mainElement }, content));
}
