import { __assign } from "tslib";
import React, { useContext, useRef, useState } from 'react';
import clsx from 'clsx';
import { AppLayoutContext } from './context';
import { SplitPanelContext, } from '../../internal/context/split-panel-context';
import styles from './styles.css.js';
import { useEffectOnUpdate } from '../../internal/hooks/use-effect-on-update';
import { Transition } from '../../internal/components/transition';
import { useObservedElement } from '../utils/use-observed-element';
import customCssProps from '../../internal/generated/custom-css-properties';
function SplitPanel(_a) {
    var children = _a.children;
    var _b = useContext(AppLayoutContext), handleSplitPanelClick = _b.handleSplitPanelClick, handleSplitPanelPreferencesChange = _b.handleSplitPanelPreferencesChange, handleSplitPanelResize = _b.handleSplitPanelResize, isMobile = _b.isMobile, isSplitPanelForcedPosition = _b.isSplitPanelForcedPosition, isSplitPanelOpen = _b.isSplitPanelOpen, setSplitPanelReportedSize = _b.setSplitPanelReportedSize, splitPanelPosition = _b.splitPanelPosition, splitPanelSize = _b.splitPanelSize;
    var _c = useState(undefined), openButtonAriaLabel = _c[0], setOpenButtonAriaLabel = _c[1];
    var _d = useState(), splitPanelLastInteraction = _d[0], setSplitPanelLastInteraction = _d[1];
    useEffectOnUpdate(function () { return setSplitPanelLastInteraction(isSplitPanelOpen ? { type: 'open' } : { type: 'close' }); }, [isSplitPanelOpen]);
    useEffectOnUpdate(function () { return setSplitPanelLastInteraction({ type: 'position' }); }, [splitPanelPosition]);
    var context = {
        bottomOffset: 0,
        getMaxHeight: function () { return document.documentElement.clientHeight - 250; },
        getMaxWidth: function () { return document.documentElement.clientWidth; },
        isForcedPosition: isSplitPanelForcedPosition,
        isMobile: isMobile,
        isOpen: isSplitPanelOpen,
        isRefresh: true,
        leftOffset: 0,
        onPreferencesChange: handleSplitPanelPreferencesChange,
        onResize: handleSplitPanelResize,
        onToggle: handleSplitPanelClick,
        position: splitPanelPosition,
        reportSize: setSplitPanelReportedSize,
        rightOffset: 0,
        size: splitPanelSize || 0,
        splitPanelRef: useRef(null),
        splitPanelHeaderRef: useRef(null),
        topOffset: 0,
        openButtonAriaLabel: openButtonAriaLabel,
        setOpenButtonAriaLabel: setOpenButtonAriaLabel,
        lastInteraction: splitPanelLastInteraction
    };
    return React.createElement(SplitPanelContext.Provider, { value: __assign({}, context) }, children);
}
function SplitPanelBottom() {
    var _a = useContext(AppLayoutContext), disableBodyScroll = _a.disableBodyScroll, isNavigationOpen = _a.isNavigationOpen, isSplitPanelOpen = _a.isSplitPanelOpen, isToolsOpen = _a.isToolsOpen, splitPanel = _a.splitPanel, splitPanelReportedSize = _a.splitPanelReportedSize;
    var _b = useContext(SplitPanelContext), splitPanelPosition = _b.position, splitPanelHeaderRef = _b.splitPanelHeaderRef;
    var headerHeight = useObservedElement(splitPanelHeaderRef);
    if (!splitPanel) {
        return null;
    }
    return (React.createElement(Transition, { "in": isSplitPanelOpen !== null && isSplitPanelOpen !== void 0 ? isSplitPanelOpen : false, exit: false }, function (state, transitionEventsRef) {
        var _a;
        return (React.createElement("section", { className: clsx(styles['split-panel-bottom'], state === 'entering' && styles.animating), "data-disable-body-scroll": disableBodyScroll ? true : false, "data-is-navigation-open": isNavigationOpen ? true : false, "data-is-split-panel-open": isSplitPanelOpen ? true : false, "data-is-tools-open": isToolsOpen ? true : false, "data-position": splitPanelPosition, ref: transitionEventsRef, style: (_a = {},
                _a[customCssProps.splitPanelReportedSize] = splitPanelReportedSize + "px",
                _a[customCssProps.splitPanelReportedHeaderSize] = headerHeight + "px",
                _a) },
            React.createElement(SplitPanel, null),
            splitPanelPosition === 'bottom' && splitPanel));
    }));
}
function SplitPanelSide() {
    var _a = useContext(AppLayoutContext), isSplitPanelOpen = _a.isSplitPanelOpen, splitPanel = _a.splitPanel, splitPanelMaxWidth = _a.splitPanelMaxWidth, splitPanelMinWidth = _a.splitPanelMinWidth, splitPanelReportedSize = _a.splitPanelReportedSize;
    var splitPanelPosition = useContext(SplitPanelContext).position;
    if (!splitPanel) {
        return null;
    }
    return (React.createElement(Transition, { "in": isSplitPanelOpen !== null && isSplitPanelOpen !== void 0 ? isSplitPanelOpen : false, exit: false }, function (state, transitionEventsRef) {
        var _a;
        return (React.createElement("section", { "aria-hidden": !isSplitPanelOpen || splitPanelPosition === 'bottom' ? true : false, className: clsx(styles['split-panel-side'], state === 'entering' && styles.animating), "data-is-split-panel-open": isSplitPanelOpen ? true : false, "data-position": splitPanelPosition, ref: transitionEventsRef, style: (_a = {},
                _a[customCssProps.splitPanelMaxWidth] = splitPanelMaxWidth + "px",
                _a[customCssProps.splitPanelMinWidth] = splitPanelMinWidth + "px",
                _a[customCssProps.splitPanelReportedHeaderSize] = splitPanelReportedSize + "px",
                _a) },
            React.createElement("div", { className: clsx(styles['animated-content']) }, splitPanelPosition === 'side' && splitPanel)));
    }));
}
export function getSplitPanelDefaultSize(splitPanelPosition) {
    return splitPanelPosition === 'side'
        ? document.documentElement.clientWidth / 3
        : document.documentElement.clientHeight / 2;
}
export function getSplitPanelPosition(isSplitPanelForcedPosition, splitPanelPreferences) {
    var splitPanelPosition = 'bottom';
    if (!isSplitPanelForcedPosition && (splitPanelPreferences === null || splitPanelPreferences === void 0 ? void 0 : splitPanelPreferences.position) === 'side') {
        splitPanelPosition = 'side';
    }
    return splitPanelPosition;
}
SplitPanel.Bottom = SplitPanelBottom;
SplitPanel.Side = SplitPanelSide;
export default SplitPanel;
