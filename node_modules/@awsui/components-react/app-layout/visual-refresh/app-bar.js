import React, { useContext } from 'react';
import clsx from 'clsx';
import { AppLayoutContext } from './context';
import { InternalButton } from '../../button/internal';
import styles from './styles.css.js';
import testutilStyles from '../test-utils/styles.css.js';
import { useFocusControl } from '../utils/use-focus-control';
export default function AppBar() {
    var _a, _b, _c;
    var _d, _e, _f;
    var _g = useContext(AppLayoutContext), ariaLabels = _g.ariaLabels, breadcrumbs = _g.breadcrumbs, contentHeader = _g.contentHeader, contentType = _g.contentType, handleNavigationClick = _g.handleNavigationClick, handleToolsClick = _g.handleToolsClick, hasNotificationsContent = _g.hasNotificationsContent, isMobile = _g.isMobile, navigationHide = _g.navigationHide, isNavigationOpen = _g.isNavigationOpen, isToolsOpen = _g.isToolsOpen, toolsHide = _g.toolsHide, isAnyPanelOpen = _g.isAnyPanelOpen;
    var focusRefsNav = useFocusControl(isNavigationOpen);
    var focusRefsTools = useFocusControl(isToolsOpen);
    if (navigationHide && !breadcrumbs && toolsHide) {
        return null;
    }
    return (React.createElement("section", { "aria-hidden": !isMobile && !breadcrumbs ? true : undefined, className: clsx(styles.appbar, 'awsui-context-content-header', (_a = {},
            _a[testutilStyles['mobile-bar']] = isMobile,
            _a[styles.unfocusable] = isMobile && isAnyPanelOpen,
            _a)), "data-has-breadcrumbs": breadcrumbs ? true : false },
        !navigationHide && isMobile && (React.createElement("nav", { className: clsx(styles['appbar-nav'], (_b = {}, _b[testutilStyles['drawer-closed']] = !isNavigationOpen, _b)), "aria-hidden": isNavigationOpen },
            React.createElement(InternalButton, { ariaLabel: (_d = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigationToggle) !== null && _d !== void 0 ? _d : undefined, "aria-expanded": isNavigationOpen, iconName: "menu", formAction: "none", onClick: function () { return handleNavigationClick(true); }, variant: "icon", className: testutilStyles['navigation-toggle'], ref: focusRefsNav.toggle, disabled: isAnyPanelOpen }))),
        breadcrumbs && (React.createElement("div", { className: clsx(styles.breadcrumbs, testutilStyles.breadcrumbs), "data-content-type": contentType, "data-has-header": contentHeader ? true : false, "data-has-notifications-content": hasNotificationsContent ? true : false }, breadcrumbs)),
        !toolsHide && isMobile && (React.createElement("aside", { className: clsx(styles['appbar-tools'], (_c = {}, _c[testutilStyles['drawer-closed']] = !isToolsOpen, _c)), "aria-hidden": isToolsOpen, "aria-label": (_e = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tools) !== null && _e !== void 0 ? _e : undefined },
            React.createElement(InternalButton, { className: testutilStyles['tools-toggle'], "aria-expanded": isToolsOpen, disabled: isAnyPanelOpen, ariaLabel: (_f = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.toolsToggle) !== null && _f !== void 0 ? _f : undefined, iconName: "status-info", formAction: "none", onClick: function () { return handleToolsClick(true); }, variant: "icon", ref: focusRefsTools.toggle })))));
}
