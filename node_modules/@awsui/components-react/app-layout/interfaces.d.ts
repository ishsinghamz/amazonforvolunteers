import React from 'react';
import { BaseComponentProps } from '../internal/base-component';
import { NonCancelableEventHandler } from '../internal/events';
import { InternalBaseComponentProps } from '../internal/hooks/use-base-component';
export interface AppLayoutProps extends BaseComponentProps {
    contentType?: AppLayoutProps.ContentType;
    disableContentPaddings?: boolean;
    disableBodyScroll?: boolean;
    navigationOpen?: boolean;
    navigationWidth?: number;
    navigationHide?: boolean;
    toolsOpen?: boolean;
    toolsHide?: boolean;
    toolsWidth?: number;
    maxContentWidth?: number;
    minContentWidth?: number;
    stickyNotifications?: boolean;
    headerSelector?: string;
    footerSelector?: string;
    ariaLabels?: AppLayoutProps.Labels;
    navigation?: React.ReactNode;
    contentHeader?: React.ReactNode;
    disableContentHeaderOverlap?: boolean;
    content?: React.ReactNode;
    tools?: React.ReactNode;
    notifications?: React.ReactNode;
    breadcrumbs?: React.ReactNode;
    onNavigationChange?: NonCancelableEventHandler<AppLayoutProps.ChangeDetail>;
    onToolsChange?: NonCancelableEventHandler<AppLayoutProps.ChangeDetail>;
    splitPanel?: React.ReactNode;
    splitPanelSize?: number;
    splitPanelOpen?: boolean;
    splitPanelPreferences?: AppLayoutProps.SplitPanelPreferences;
    onSplitPanelResize?: NonCancelableEventHandler<AppLayoutProps.SplitPanelResizeDetail>;
    onSplitPanelToggle?: NonCancelableEventHandler<AppLayoutProps.ChangeDetail>;
    onSplitPanelPreferencesChange?: NonCancelableEventHandler<AppLayoutProps.SplitPanelPreferences>;
}
export declare type InternalAppLayoutProps = AppLayoutProps & Required<InternalBaseComponentProps>;
export declare namespace AppLayoutProps {
    type ContentType = 'default' | 'form' | 'table' | 'cards' | 'wizard';
    interface Ref {
        closeNavigationIfNecessary(): void;
        openTools(): void;
    }
    interface Labels {
        notifications?: string;
        navigation?: string;
        navigationToggle?: string;
        navigationClose?: string;
        tools?: string;
        toolsToggle?: string;
        toolsClose?: string;
    }
    interface ChangeDetail {
        open: boolean;
    }
    interface SplitPanelResizeDetail {
        size: number;
    }
    interface SplitPanelPreferences {
        position: 'side' | 'bottom';
    }
    type SplitPanelPosition = 'side' | 'bottom';
}
