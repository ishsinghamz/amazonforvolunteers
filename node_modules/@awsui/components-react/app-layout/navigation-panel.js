import { __assign } from "tslib";
import clsx from 'clsx';
import React from 'react';
import { Transition } from '../internal/components/transition';
import { Drawer } from './drawer';
import styles from './styles.css.js';
import testutilStyles from './test-utils/styles.css.js';
export function NavigationPanel(_a) {
    var ariaLabels = _a.ariaLabels, footerHeight = _a.footerHeight, headerHeight = _a.headerHeight, isHidden = _a.isHidden, isMobile = _a.isMobile, isMotionEnabled = _a.isMotionEnabled, isRefresh = _a.isRefresh, navigation = _a.navigation, navigationDrawerWidth = _a.navigationDrawerWidth, navigationWidth = _a.navigationWidth, navigationOpen = _a.navigationOpen, navigationPanelTransitionState = _a.navigationPanelTransitionState, onClick = _a.onClick, onNavigationToggle = _a.onNavigationToggle, panelHeightStyle = _a.panelHeightStyle, setNavigationPanelTransitionState = _a.setNavigationPanelTransitionState, toggleRefs = _a.toggleRefs;
    var showNavigationPanelExitState = isRefresh &&
        isMotionEnabled &&
        ((!navigationOpen && navigationPanelTransitionState === 'exiting') ||
            (navigationOpen && (navigationPanelTransitionState === 'enter' || navigationPanelTransitionState === 'exited')));
    var transitioning = isMotionEnabled && ['exit', 'exiting'].indexOf(navigationPanelTransitionState) !== -1;
    return (React.createElement(Transition, { "in": navigationOpen, onStatusChange: setNavigationPanelTransitionState, disabled: !isRefresh }, function (_, navigationPanelTransitionRef) {
        var _a, _b;
        return (React.createElement("div", { style: {
                width: navigationDrawerWidth
            } },
            React.createElement("div", { ref: navigationPanelTransitionRef, className: clsx(styles['panel-wrapper-outer'], (_a = {},
                    _a[styles.mobile] = isMobile,
                    _a[styles.open] = navigationOpen,
                    _a[styles['navigation-panel-exit-state']] = showNavigationPanelExitState,
                    _a), isRefresh && (_b = {},
                    _b[styles.refresh] = true,
                    _b[styles['enable-motion']] = isMotionEnabled &&
                        navigationPanelTransitionState !== 'enter' &&
                        navigationPanelTransitionState !== 'entered' &&
                        navigationPanelTransitionState !== 'exit' &&
                        navigationPanelTransitionState !== 'exited',
                    _b[styles.hide] = showNavigationPanelExitState && !isHidden,
                    _b)), style: __assign({}, (isMobile ? { top: headerHeight, bottom: footerHeight } : panelHeightStyle)) },
                React.createElement(Drawer, { type: "navigation", visualRefresh: isRefresh, isMobile: isMobile, width: navigationWidth, isOpen: navigationOpen || transitioning, isHidden: isHidden, onToggle: onNavigationToggle, toggleRefs: toggleRefs, onClick: onClick, contentClassName: clsx(styles.navigation, testutilStyles.navigation), closeClassName: clsx(styles['navigation-close'], testutilStyles['navigation-close']), toggleClassName: clsx(styles['navigation-toggle'], testutilStyles['navigation-toggle']), topOffset: isRefresh ? 0 : headerHeight, bottomOffset: isRefresh ? 0 : footerHeight, ariaLabels: ariaLabels }, navigation))));
    }));
}
