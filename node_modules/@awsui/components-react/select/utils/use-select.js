import { isInteractive } from '../../internal/components/option/utils/filter-options';
import { useEffect, useRef } from 'react';
import { createHighlightedOptionHook } from '../../internal/components/options-list/utils/use-highlight-option';
import { useOpenState } from '../../internal/components/options-list/utils/use-open-state';
import { useMenuKeyboard, useTriggerKeyboard } from '../../internal/components/options-list/utils/use-keyboard';
import { useIds } from '../../internal/components/options-list/utils/use-ids';
import { connectOptionsByValue } from './connect-options';
import useForwardFocus from '../../internal/hooks/forward-focus';
import { usePrevious } from '../../internal/hooks/use-previous';
import { fireCancelableEvent } from '../../internal/events/index';
import { containsOrEqual } from '../../internal/utils/dom';
var useHighlightedOption = createHighlightedOptionHook({ isInteractive: isInteractive });
export function useSelect(_a) {
    var selectedOptions = _a.selectedOptions, updateSelectedOption = _a.updateSelectedOption, options = _a.options, filteringType = _a.filteringType, onBlur = _a.onBlur, onFocus = _a.onFocus, externalRef = _a.externalRef, keepOpen = _a.keepOpen, fireLoadItems = _a.fireLoadItems, setFilteringValue = _a.setFilteringValue;
    var filterRef = useRef(null);
    var triggerRef = useRef(null);
    var menuRef = useRef(null);
    var hasFilter = filteringType !== 'none';
    var activeRef = hasFilter ? filterRef : menuRef;
    var isKeyboard = useRef(false);
    var isSelectingUsingSpace = useRef(false);
    var __selectedOptions = connectOptionsByValue(options, selectedOptions);
    var _b = useHighlightedOption(options), highlightedOption = _b.highlightedOption, highlightedIndex = _b.highlightedIndex, moveHighlight = _b.moveHighlight, resetHighlight = _b.resetHighlight, setHighlightedIndex = _b.setHighlightedIndex, highlightOption = _b.highlightOption, goHome = _b.goHome, goEnd = _b.goEnd;
    var _c = useOpenState({
        onOpen: function () { return fireLoadItems(''); },
        onClose: function () {
            resetHighlight();
            setFilteringValue('');
        }
    }), isOpen = _c.isOpen, openDropdown = _c.openDropdown, closeDropdown = _c.closeDropdown, toggleDropdown = _c.toggleDropdown;
    var focused = useRef(false);
    var handleFocus = function () {
        if (!focused.current) {
            fireCancelableEvent(onFocus, {});
            focused.current = true;
        }
    };
    var handleBlur = function (_a) {
        var detail = _a.detail;
        var relatedTarget = detail.relatedTarget;
        var nextFocusedIsTrigger = relatedTarget ? containsOrEqual(triggerRef.current, relatedTarget) : false;
        var nextFocusedInsideDropdown = relatedTarget
            ? containsOrEqual(menuRef.current, relatedTarget) || containsOrEqual(filterRef.current, relatedTarget)
            : false;
        var nextFocusedInsideComponent = nextFocusedIsTrigger || nextFocusedInsideDropdown;
        var focusingOut = focused.current && !nextFocusedInsideComponent;
        if (nextFocusedIsTrigger || focusingOut) {
            closeDropdown();
        }
        if (focusingOut) {
            fireCancelableEvent(onBlur, {});
            focused.current = false;
        }
    };
    var hasHighlightedOption = !!highlightedOption;
    var hasSelectedOption = __selectedOptions.length > 0;
    var _d = useIds({ hasHighlightedOption: hasHighlightedOption, hasSelectedOption: hasSelectedOption }), highlightedOptionId = _d.highlightedOptionId, selectedOptionId = _d.selectedOptionId, menuId = _d.menuId;
    var selectOption = function (option) {
        var _a;
        isSelectingUsingSpace.current = false;
        var optionToSelect = option || highlightedOption;
        if (!optionToSelect) {
            return;
        }
        updateSelectedOption(optionToSelect.option);
        if (!keepOpen) {
            (_a = triggerRef.current) === null || _a === void 0 ? void 0 : _a.focus();
            closeDropdown();
        }
    };
    var activeKeyDownHandler = useMenuKeyboard({
        moveHighlight: moveHighlight,
        selectOption: selectOption,
        goHome: goHome,
        goEnd: goEnd,
        closeDropdown: function () {
            var _a;
            (_a = triggerRef.current) === null || _a === void 0 ? void 0 : _a.focus();
            closeDropdown();
        },
        isKeyboard: isKeyboard,
        isSelectingUsingSpace: isSelectingUsingSpace,
        preventNativeSpace: !hasFilter
    });
    var triggerKeyDownHandler = useTriggerKeyboard({ openDropdown: openDropdown, goHome: goHome, isKeyboard: isKeyboard });
    var getTriggerProps = function (disabled) {
        if (disabled === void 0) { disabled = false; }
        var triggerProps = {
            ref: triggerRef,
            onFocus: handleFocus,
            onBlur: handleBlur
        };
        if (!disabled) {
            triggerProps.onMouseDown = function (event) {
                var _a;
                event.preventDefault();
                if (isOpen) {
                    (_a = triggerRef.current) === null || _a === void 0 ? void 0 : _a.focus();
                }
                toggleDropdown();
            };
            triggerProps.onKeyDown = triggerKeyDownHandler;
        }
        if (hasSelectedOption) {
            triggerProps.ariaLabelledby = selectedOptionId;
        }
        return triggerProps;
    };
    var getFilterProps = function () {
        var _a;
        if (!hasFilter) {
            return {};
        }
        return {
            ref: filterRef,
            onKeyDown: activeKeyDownHandler,
            __onBlurWithDetail: handleBlur,
            onFocus: handleFocus,
            onChange: function (event) {
                setFilteringValue(event.detail.value);
                resetHighlight();
            },
            __onDelayedInput: function (event) {
                fireLoadItems(event.detail.value);
            },
            __nativeAttributes: (_a = {
                    'aria-activedescendant': highlightedOptionId
                },
                _a['aria-owns'] = menuId,
                _a)
        };
    };
    var getMenuProps = function () {
        var menuProps = {
            id: menuId,
            ref: menuRef,
            open: isOpen,
            onFocus: handleFocus,
            onBlur: handleBlur,
            onMouseUp: function (itemIndex) {
                isKeyboard.current = false;
                if (itemIndex > -1) {
                    selectOption(options[itemIndex]);
                }
            },
            onMouseMove: function (itemIndex) {
                isKeyboard.current = false;
                if (itemIndex > -1) {
                    setHighlightedIndex(itemIndex);
                }
            }
        };
        if (!hasFilter) {
            menuProps.onKeyDown = activeKeyDownHandler;
            menuProps.onBlur = handleBlur;
            menuProps.onFocus = handleFocus;
            menuProps.nativeAttributes = {
                'aria-activedescendant': highlightedOptionId
            };
        }
        return menuProps;
    };
    var getOptionProps = function (option, index) {
        var _a;
        var highlighted = option === highlightedOption;
        var selected = __selectedOptions.indexOf(option) > -1;
        var isNextSelected = __selectedOptions.indexOf(options[index + 1]) > -1;
        var optionProps = (_a = {
                key: index,
                option: option,
                highlighted: highlighted,
                selected: selected,
                isNextSelected: isNextSelected
            },
            _a['data-mouse-target'] = isInteractive(option) ? index : -1,
            _a);
        if (highlighted) {
            optionProps.id = highlightedOptionId;
        }
        return optionProps;
    };
    var prevOpen = usePrevious(isOpen);
    useEffect(function () {
        if (isOpen && !prevOpen && hasSelectedOption) {
            setHighlightedIndex(options.indexOf(__selectedOptions[0]));
        }
    }, [isOpen, __selectedOptions, hasSelectedOption, setHighlightedIndex, options, prevOpen]);
    useEffect(function () {
        var _a;
        if (isOpen) {
            (_a = activeRef.current) === null || _a === void 0 ? void 0 : _a.focus({ preventScroll: true });
        }
    }, [isOpen, activeRef]);
    useForwardFocus(externalRef, triggerRef);
    var announceSelected = !!highlightedOption && __selectedOptions.indexOf(highlightedOption) > -1;
    return {
        isOpen: isOpen,
        highlightedOption: highlightedOption,
        highlightedIndex: highlightedIndex,
        getTriggerProps: getTriggerProps,
        getMenuProps: getMenuProps,
        getFilterProps: getFilterProps,
        getOptionProps: getOptionProps,
        isKeyboard: isKeyboard,
        highlightOption: highlightOption,
        selectOption: selectOption,
        announceSelected: announceSelected
    };
}
