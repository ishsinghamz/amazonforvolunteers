import { __assign } from "tslib";
import mergeRefs from 'react-merge-refs';
import React, { forwardRef, useCallback, useImperativeHandle } from 'react';
import OptionsList from '../../internal/components/options-list';
import { renderOptions } from '../utils/render-options';
import { useVirtual } from 'react-virtual';
import { useContainerQuery } from '../../internal/hooks/container-queries';
import styles from './styles.css.js';
var VirtualList = function (props, ref) {
    return props.menuProps.open ? React.createElement(VirtualListOpen, __assign({}, props, { ref: ref })) : React.createElement(VirtualListClosed, __assign({}, props, { ref: ref }));
};
var VirtualListOpen = forwardRef(function (_a, ref) {
    var menuProps = _a.menuProps, getOptionProps = _a.getOptionProps, filteredOptions = _a.filteredOptions, filteringValue = _a.filteringValue, isKeyboard = _a.isKeyboard, checkboxes = _a.checkboxes, hasDropdownStatus = _a.hasDropdownStatus, listBottom = _a.listBottom;
    var _b = useContainerQuery(function (rect) { return rect.width; }, []), width = _b[0], menuRef = _b[1];
    var _c = useVirtual({
        size: filteredOptions.length,
        parentRef: menuRef,
        estimateSize: useCallback(function () { return 31; }, [width, filteringValue]),
        overscan: 5
    }), virtualItems = _c.virtualItems, totalSize = _c.totalSize, scrollToIndex = _c.scrollToIndex;
    useImperativeHandle(ref, function () { return function (index) {
        if (isKeyboard) {
            scrollToIndex(index);
        }
    }; }, [isKeyboard, scrollToIndex]);
    var finalOptions = renderOptions({
        options: virtualItems.map(function (_a) {
            var index = _a.index;
            return filteredOptions[index];
        }),
        getOptionProps: getOptionProps,
        filteringValue: filteringValue,
        isKeyboard: isKeyboard,
        checkboxes: checkboxes,
        hasDropdownStatus: hasDropdownStatus,
        virtualItems: virtualItems
    });
    return (React.createElement(OptionsList, __assign({}, menuProps, { ref: mergeRefs([menuRef, menuProps.ref]) }),
        React.createElement("div", { "aria-hidden": "true", key: "total-size", className: styles['layout-strut'], style: { height: totalSize } }),
        finalOptions,
        listBottom ? React.createElement("li", { className: styles['list-bottom'] }, listBottom) : null));
});
var VirtualListClosed = forwardRef(function (_a, ref) {
    var menuProps = _a.menuProps, listBottom = _a.listBottom;
    useImperativeHandle(ref, function () { return function () { }; }, []);
    return (React.createElement(OptionsList, __assign({}, menuProps, { ref: menuProps.ref }), listBottom ? React.createElement("li", { className: styles['list-bottom'] }, listBottom) : null));
});
export default forwardRef(VirtualList);
