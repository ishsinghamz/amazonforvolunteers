import React from 'react';
import { BaseComponentProps } from '../internal/base-component';
import { FormFieldValidationControlProps } from '../internal/context/form-field-context';
import { NonCancelableEventHandler } from '../internal/events';
import { OptionDefinition, OptionGroup as OptionGroupDefinition } from '../internal/components/option/interfaces';
import { DropdownStatusProps } from '../internal/components/dropdown-status/interfaces';
import { BaseDropdownHostProps, OptionsFilteringType, OptionsLoadItemsDetail } from '../internal/components/dropdown/interfaces';
export interface BaseSelectProps extends BaseDropdownHostProps, BaseComponentProps, FormFieldValidationControlProps, DropdownStatusProps {
    options?: SelectProps.Options;
    filteringType?: OptionsFilteringType;
    disabled?: boolean;
    filteringPlaceholder?: string;
    filteringAriaLabel?: string;
    name?: string;
    placeholder?: string;
    controlId?: string;
    ariaRequired?: boolean;
    ariaLabel?: string;
    selectedAriaLabel?: string;
    renderHighlightedAriaLive?: SelectProps.ContainingOptionAndGroupString;
    noMatch?: React.ReactNode;
    onBlur?: NonCancelableEventHandler;
    onFocus?: NonCancelableEventHandler;
}
export interface SelectProps extends BaseSelectProps {
    triggerVariant?: SelectProps.TriggerVariant;
    selectedOption: SelectProps.Option | null;
    onChange?: NonCancelableEventHandler<SelectProps.ChangeDetail>;
}
export declare namespace SelectProps {
    type FilteringType = OptionsFilteringType;
    type TriggerVariant = 'label' | 'option';
    type Option = OptionDefinition;
    type OptionGroup = OptionGroupDefinition;
    type Options = ReadonlyArray<Option | OptionGroup>;
    type LoadItemsDetail = OptionsLoadItemsDetail;
    interface ChangeDetail {
        selectedOption: Option;
    }
    interface ContainingOptionAndGroupString {
        (option: Option, group?: OptionGroup): string;
    }
    interface Ref {
        focus(): void;
    }
}
