import { __assign, __rest } from "tslib";
import clsx from 'clsx';
import mergeRefs from 'react-merge-refs';
import React, { useContext, useRef } from 'react';
import { getBaseProps } from '../internal/base-component';
import { StickyHeaderContext } from '../container/use-sticky-header';
import { useVisualRefresh } from '../internal/hooks/use-visual-mode';
import styles from './styles.css.js';
export default function InternalHeader(_a) {
    var _b = _a.variant, variant = _b === void 0 ? 'h2' : _b, headingTagOverride = _a.headingTagOverride, children = _a.children, actions = _a.actions, counter = _a.counter, description = _a.description, info = _a.info, _c = _a.__internalRootRef, __internalRootRef = _c === void 0 ? null : _c, __disableActionsWrapping = _a.__disableActionsWrapping, restProps = __rest(_a, ["variant", "headingTagOverride", "children", "actions", "counter", "description", "info", "__internalRootRef", "__disableActionsWrapping"]);
    var HeadingTag = headingTagOverride !== null && headingTagOverride !== void 0 ? headingTagOverride : (variant === 'awsui-h1-sticky' ? 'h1' : variant);
    var isStuck = useContext(StickyHeaderContext).isStuck;
    var baseProps = getBaseProps(restProps);
    var ref = useRef(null);
    var isRefresh = useVisualRefresh(ref);
    var dynamicVariant = isStuck ? 'h2' : 'h1';
    var variantOverride = variant === 'awsui-h1-sticky' ? (isRefresh ? dynamicVariant : 'h2') : variant;
    return (React.createElement("div", __assign({}, baseProps, { className: clsx(styles.root, baseProps.className, styles["root-variant-" + variantOverride], isRefresh && styles["root-variant-" + variantOverride + "-refresh"], !actions && [styles["root-no-actions"]], description && [styles["root-has-description"]], __disableActionsWrapping && [styles['root-no-wrap']]), ref: mergeRefs([ref, __internalRootRef]) }),
        React.createElement("div", { className: clsx(styles.main, styles["main-variant-" + variantOverride], isRefresh && styles["main-variant-" + variantOverride + "-refresh"]) },
            React.createElement("div", { className: clsx(styles.title, styles["title-variant-" + variantOverride], isRefresh && styles["title-variant-" + variantOverride + "-refresh"]) },
                React.createElement(HeadingTag, { className: clsx(styles.heading, styles["heading-variant-" + variantOverride]) },
                    React.createElement("span", { className: styles['heading-text'] }, children),
                    counter !== undefined && React.createElement("span", { className: styles.counter },
                        " ",
                        counter)),
                info && React.createElement("span", { className: styles.info }, info)),
            description && (React.createElement("p", { className: clsx(styles.description, styles["description-variant-" + variantOverride], isRefresh && styles["description-variant-" + variantOverride + "-refresh"]) }, description))),
        actions && (React.createElement("div", { className: clsx(styles.actions, styles["actions-variant-" + variantOverride], isRefresh && styles["actions-variant-" + variantOverride + "-refresh"]) }, actions))));
}
