export var getOverflowParents = function (element) {
    var parents = [];
    var node = element;
    while ((node = node.parentElement) && node !== document.body) {
        getComputedStyle(node).overflow !== 'visible' && parents.push(node);
    }
    return parents;
};
export var getOverflowParentDimensions = function (element, excludeClosestParent, expandToViewport) {
    if (excludeClosestParent === void 0) { excludeClosestParent = false; }
    if (expandToViewport === void 0) { expandToViewport = false; }
    var parents = expandToViewport
        ? []
        : getOverflowParents(element).map(function (el) {
            var _a = el.getBoundingClientRect(), height = _a.height, width = _a.width, top = _a.top, left = _a.left;
            return {
                height: height,
                width: width,
                top: top,
                left: left
            };
        });
    parents.push({
        height: window.innerHeight,
        width: window.innerWidth,
        top: 0,
        left: 0
    });
    if (excludeClosestParent && !expandToViewport) {
        parents.shift();
    }
    return parents;
};
export function scrollUntilVisible(element) {
    var _a;
    var parent = (_a = element.offsetParent) !== null && _a !== void 0 ? _a : document.documentElement;
    if (element.offsetTop < parent.scrollTop) {
        parent.scrollTop = element.offsetTop;
    }
    if (element.offsetTop + element.clientHeight > parent.scrollTop + parent.clientHeight) {
        parent.scrollTop = element.offsetTop + element.clientHeight - parent.clientHeight;
    }
}
