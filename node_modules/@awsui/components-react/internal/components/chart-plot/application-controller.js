import React, { forwardRef, useCallback, useEffect, useImperativeHandle, useRef, useState } from 'react';
import focusSvgElement from '../../utils/focus-svg-element';
import styles from './styles.css.js';
export default forwardRef(ApplicationController);
function ApplicationController(_a, ref) {
    var activeElementKey = _a.activeElementKey, activeElementRef = _a.activeElementRef, onFocus = _a.onFocus, onBlur = _a.onBlur, onKeyDown = _a.onKeyDown;
    var containerRef = useRef(null);
    var applicationRef = useRef(null);
    var focusTransitionRef = useRef(false);
    var _b = useState(false), isFocused = _b[0], setFocused = _b[1];
    var onApplicationFocus = useCallback(function (event) {
        if (focusTransitionRef.current === false) {
            setFocused(true);
            onFocus && onFocus(event);
        }
        else {
            focusTransitionRef.current = false;
        }
    }, [onFocus]);
    var onApplicationBlur = useCallback(function (event) {
        if (focusTransitionRef.current === false) {
            setFocused(false);
            onBlur && onBlur(event);
            muteApplication(applicationRef.current);
        }
    }, [onBlur]);
    var onApplicationKeyDown = onKeyDown;
    useImperativeHandle(ref, function () { return ({
        focus: function () { return focusApplication(applicationRef.current, (activeElementRef === null || activeElementRef === void 0 ? void 0 : activeElementRef.current) || null); }
    }); }, [activeElementRef]);
    useEffect(function () {
        if (!isFocused || focusTransitionRef.current === true) {
            return;
        }
        var timeoutId = setTimeout(function () {
            focusTransitionRef.current = true;
            containerRef.current.removeChild(applicationRef.current);
            containerRef.current.appendChild(applicationRef.current);
            focusApplication(applicationRef.current, (activeElementRef === null || activeElementRef === void 0 ? void 0 : activeElementRef.current) || null);
        }, 0);
        return function () { return clearTimeout(timeoutId); };
    }, [isFocused, activeElementKey, activeElementRef]);
    return (React.createElement("g", { ref: containerRef },
        React.createElement("g", { focusable: false, tabIndex: -1, ref: applicationRef, onFocus: onApplicationFocus, onBlur: onApplicationBlur, onKeyDown: onApplicationKeyDown, className: styles.application })));
}
function focusApplication(app, target) {
    for (var _i = 0, _a = getAttributeNames(app); _i < _a.length; _i++) {
        var attributeName = _a[_i];
        if (attributeName === 'role' || attributeName.slice(0, 4) === 'aria') {
            app.removeAttribute(attributeName);
        }
    }
    if (target) {
        for (var _b = 0, _c = getAttributeNames(target); _b < _c.length; _b++) {
            var attributeName = _c[_b];
            if (attributeName === 'role' || attributeName.slice(0, 4) === 'aria') {
                var attributeValue = target.getAttribute(attributeName);
                attributeValue && app.setAttribute(attributeName, attributeValue);
            }
        }
    }
    app.tabIndex = 0;
    app.setAttribute('focusable', 'true');
    app.setAttribute('aria-hidden', 'false');
    focusSvgElement(app);
}
function muteApplication(app) {
    for (var _i = 0, _a = getAttributeNames(app); _i < _a.length; _i++) {
        var attributeName = _a[_i];
        if (attributeName === 'role' || attributeName.slice(0, 4) === 'aria') {
            app.removeAttribute(attributeName);
        }
    }
    app.tabIndex = -1;
    app.setAttribute('focusable', 'false');
    app.setAttribute('aria-hidden', 'true');
}
function getAttributeNames(element) {
    var attributes = element.attributes;
    var result = new Array(attributes.length);
    for (var i = 0; i < attributes.length; i++) {
        result[i] = attributes[i].name;
    }
    return result;
}
