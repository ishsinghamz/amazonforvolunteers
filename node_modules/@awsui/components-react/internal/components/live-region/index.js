import React, { memo, useEffect, useRef } from 'react';
import styles from './styles.css.js';
export default memo(LiveRegion);
function LiveRegion(_a) {
    var _b = _a.assertive, assertive = _b === void 0 ? false : _b, _c = _a.delay, delay = _c === void 0 ? 10 : _c, children = _a.children;
    var sourceRef = useRef(null);
    var targetRef = useRef(null);
    useEffect(function () {
        function updateLiveRegion() {
            if (targetRef.current && sourceRef.current) {
                var sourceContent = extractInnerText(sourceRef.current);
                var targetContent = extractInnerText(targetRef.current);
                if (targetContent !== sourceContent) {
                    targetRef.current.innerText = sourceContent;
                }
            }
        }
        var timeoutId;
        if (delay) {
            timeoutId = setTimeout(updateLiveRegion, delay);
        }
        else {
            updateLiveRegion();
        }
        return function () {
            if (timeoutId) {
                clearTimeout(timeoutId);
            }
        };
    });
    return (React.createElement("div", { className: styles.root },
        React.createElement("span", { "aria-hidden": "true" },
            React.createElement("span", { ref: sourceRef }, children)),
        React.createElement("span", { ref: targetRef, "aria-atomic": "true", "aria-live": assertive ? 'assertive' : 'polite' })));
}
function extractInnerText(node) {
    return (node.innerText || '').replace(/\s+/g, ' ').trim();
}
