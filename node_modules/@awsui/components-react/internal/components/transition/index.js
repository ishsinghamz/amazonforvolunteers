import React from 'react';
import { useCallback, useRef } from 'react';
import { Transition as ReactTransitionGroupTransition, } from 'react-transition-group';
import { isMotionDisabled } from '../../motion';
export function Transition(_a) {
    var isIn = _a["in"], children = _a.children, _b = _a.exit, exit = _b === void 0 ? true : _b, _c = _a.onStatusChange, onStatusChange = _c === void 0 ? function () { return void 0; } : _c, _d = _a.disabled, disabled = _d === void 0 ? false : _d;
    var transitionRootElement = useRef(null);
    var motionDisabled = disabled || (transitionRootElement.current ? isMotionDisabled(transitionRootElement.current) : true);
    var addTransitionEndListener = useCallback(function (done) {
        var node = transitionRootElement.current;
        if (node === null) {
            return;
        }
        var listener = function (e) {
            if (e.target === node) {
                node.removeEventListener('transitionend', listener);
                node.removeEventListener('animationend', listener);
                done();
            }
        };
        node.addEventListener('transitionend', listener);
        node.addEventListener('animationend', listener);
    }, []);
    return (React.createElement(ReactTransitionGroupTransition, { timeout: motionDisabled ? 0 : undefined, "in": isIn, addEndListener: addTransitionEndListener, nodeRef: transitionRootElement, exit: exit, onEnter: function (isAppearing) { return !isAppearing && onStatusChange('enter'); }, onEntering: function (isAppearing) { return !isAppearing && onStatusChange('entering'); }, onEntered: function (isAppearing) { return !isAppearing && onStatusChange('entered'); }, onExit: function () { return onStatusChange('exit'); }, onExiting: function () { return onStatusChange('exiting'); }, onExited: function () { return onStatusChange('exited'); } }, function (state) { return children(state, transitionRootElement); }));
}
