import styles from './styles.css.js';
import clsx from 'clsx';
import mergeRefs from 'react-merge-refs';
import React, { useEffect, useLayoutEffect, useRef, useState } from 'react';
import { createPortal } from 'react-dom';
import { fireNonCancelableEvent } from '../../events';
import { getDropdownPosition, getInteriorDropdownPosition, } from './dropdown-fit-handler';
import { Transition } from '../transition';
import { useVisualRefresh } from '../../hooks/use-visual-mode';
import { usePortalModeClasses } from '../../hooks/use-portal-mode-classes';
import { DropdownContextProvider } from './context';
var DropdownContainer = function (_a) {
    var children = _a.children, _b = _a.renderWithPortal, renderWithPortal = _b === void 0 ? false : _b, id = _a.id, open = _a.open;
    if (renderWithPortal) {
        if (open) {
            return createPortal(React.createElement("div", { id: id }, children), document.body);
        }
        else {
            return null;
        }
    }
    else {
        return React.createElement(React.Fragment, null, children);
    }
};
var Dropdown = function (_a) {
    var children = _a.children, trigger = _a.trigger, open = _a.open, onDropdownClose = _a.onDropdownClose, onMouseDown = _a.onMouseDown, header = _a.header, footer = _a.footer, dropdownId = _a.dropdownId, _b = _a.stretchTriggerHeight, stretchTriggerHeight = _b === void 0 ? false : _b, _c = _a.stretchWidth, stretchWidth = _c === void 0 ? true : _c, _d = _a.stretchHeight, stretchHeight = _d === void 0 ? false : _d, _e = _a.stretchToTriggerWidth, stretchToTriggerWidth = _e === void 0 ? true : _e, _f = _a.expandToViewport, expandToViewport = _f === void 0 ? false : _f, _g = _a.preferCenter, preferCenter = _g === void 0 ? false : _g, _h = _a.interior, interior = _h === void 0 ? false : _h, minWidth = _a.minWidth, _j = _a.hasContent, hasContent = _j === void 0 ? true : _j, _k = _a.scrollable, scrollable = _k === void 0 ? true : _k;
    var triggerRef = useRef(null);
    var dropdownRef = useRef(null);
    var verticalContainerRef = useRef(null);
    var fixedPosition = useRef(null);
    var isRefresh = useVisualRefresh(triggerRef);
    var dropdownClasses = usePortalModeClasses(triggerRef);
    var _l = useState('bottom-right'), position = _l[0], setPosition = _l[1];
    var setDropdownPosition = function (position, triggerBox, target, verticalContainer) {
        var entireWidth = !interior && stretchWidth;
        if (!stretchHeight) {
            if (!stretchWidth) {
                verticalContainer.style.maxHeight = parseInt(position.height) + 1 + "px";
            }
            else {
                verticalContainer.style.maxHeight = position.height;
            }
        }
        if (entireWidth && !expandToViewport) {
            if (stretchToTriggerWidth) {
                target.classList.add(styles['occupy-entire-width']);
            }
        }
        else {
            target.style.width = position.width;
        }
        if (position.dropUp && !interior) {
            target.classList.add(styles['dropdown-drop-up']);
            if (!expandToViewport) {
                target.style.bottom = '100%';
            }
        }
        else {
            target.classList.remove(styles['dropdown-drop-up']);
        }
        target.classList.add(position.dropLeft ? styles['dropdown-drop-left'] : styles['dropdown-drop-right']);
        if (position.left && position.left !== 'auto') {
            target.style.left = position.left;
        }
        if (expandToViewport && !interior) {
            target.style.position = 'fixed';
            if (position.dropUp) {
                target.style.bottom = "calc(100% - " + triggerBox.top + "px)";
            }
            else {
                target.style.top = triggerBox.bottom + "px";
            }
            if (position.dropLeft) {
                target.style.left = "calc(" + triggerBox.right + "px - " + position.width + ")";
            }
            else {
                target.style.left = triggerBox.left + "px";
            }
            fixedPosition.current = position;
            return;
        }
        if (interior && isInteriorPosition(position)) {
            if (position.dropUp) {
                target.style.bottom = position.bottom;
            }
            else {
                target.style.top = position.top;
            }
            target.style.left = position.left;
        }
        if (position.dropUp && position.dropLeft) {
            setPosition('top-left');
        }
        else if (position.dropUp) {
            setPosition('top-right');
        }
        else if (position.dropLeft) {
            setPosition('bottom-left');
        }
        else {
            setPosition('bottom-right');
        }
    };
    useLayoutEffect(function () {
        if (open && dropdownRef.current && triggerRef.current && verticalContainerRef.current) {
            verticalContainerRef.current.style.maxHeight = '';
            dropdownRef.current.style.width = '';
            dropdownRef.current.style.top = '';
            dropdownRef.current.style.bottom = '';
            dropdownRef.current.style.left = '';
            dropdownRef.current.classList.remove(styles['dropdown-drop-left']);
            dropdownRef.current.classList.remove(styles['dropdown-drop-right']);
            dropdownRef.current.classList.remove(styles['dropdown-drop-up']);
            if (scrollable) {
                dropdownRef.current.classList.add(styles.nowrap);
            }
            var position_1 = interior
                ? getInteriorDropdownPosition(triggerRef.current, dropdownRef.current, expandToViewport)
                : getDropdownPosition(triggerRef.current, dropdownRef.current, expandToViewport, minWidth, preferCenter);
            var triggerBox = triggerRef.current.getBoundingClientRect();
            setDropdownPosition(position_1, triggerBox, dropdownRef.current, verticalContainerRef.current);
            if (scrollable) {
                dropdownRef.current.classList.remove(styles.nowrap);
            }
        }
    }, [open, dropdownRef, triggerRef, verticalContainerRef, interior, stretchWidth]);
    useEffect(function () {
        if (!open) {
            return;
        }
        var clickListener = function (e) {
            var _a;
            if (!((_a = dropdownRef.current) === null || _a === void 0 ? void 0 : _a.contains(e.target))) {
                fireNonCancelableEvent(onDropdownClose);
            }
        };
        var timeout = setTimeout(function () {
            window.addEventListener('click', clickListener);
        }, 0);
        return function () {
            clearTimeout(timeout);
            window.removeEventListener('click', clickListener);
        };
    }, [open, onDropdownClose]);
    useLayoutEffect(function () {
        if (!expandToViewport || !open) {
            return;
        }
        var updateDropdownPosition = function () {
            if (triggerRef.current && dropdownRef.current && verticalContainerRef.current) {
                var triggerRect = triggerRef.current.getBoundingClientRect();
                var target = dropdownRef.current;
                if (fixedPosition.current) {
                    if (fixedPosition.current.dropUp) {
                        dropdownRef.current.style.bottom = "calc(100% - " + triggerRect.top + "px)";
                    }
                    else {
                        target.style.top = triggerRect.bottom + "px";
                    }
                    if (fixedPosition.current.dropLeft) {
                        target.style.left = "calc(" + triggerRect.right + "px - " + fixedPosition.current.width + ")";
                    }
                    else {
                        target.style.left = triggerRect.left + "px";
                    }
                }
            }
        };
        updateDropdownPosition();
        window.addEventListener('scroll', updateDropdownPosition, true);
        window.addEventListener('resize', updateDropdownPosition, true);
        return function () {
            window.removeEventListener('scroll', updateDropdownPosition, true);
            window.removeEventListener('resize', updateDropdownPosition, true);
        };
    }, [open, expandToViewport]);
    return (React.createElement("div", { className: clsx(styles.root, interior && styles.interior, stretchTriggerHeight && styles['stretch-trigger-height']) },
        React.createElement("div", { className: clsx(stretchTriggerHeight && styles['stretch-trigger-height']), ref: triggerRef }, trigger),
        React.createElement(DropdownContainer, { renderWithPortal: expandToViewport && !interior, id: dropdownId, open: open },
            React.createElement(Transition, { "in": open !== null && open !== void 0 ? open : false, exit: false }, function (state, ref) {
                var _a;
                return (React.createElement("div", { className: clsx(styles.dropdown, dropdownClasses, (_a = {},
                        _a[styles.open] = open,
                        _a[styles['with-limited-width']] = !stretchWidth,
                        _a[styles['hide-upper-border']] = stretchWidth,
                        _a[styles.interior] = interior,
                        _a[styles['is-empty']] = !header && !hasContent,
                        _a[styles.refresh] = isRefresh,
                        _a[styles['use-portal']] = expandToViewport && !interior,
                        _a)), ref: mergeRefs([dropdownRef, ref]), "data-open": open, "data-animating": state !== 'exited', onMouseDown: onMouseDown },
                    React.createElement("div", { className: clsx(styles['dropdown-content-wrapper'], isRefresh && styles.refresh) },
                        React.createElement("div", { className: styles['ie11-wrapper'] },
                            React.createElement("div", { ref: verticalContainerRef, className: styles['dropdown-content'] },
                                React.createElement(DropdownContextProvider, { position: position },
                                    header,
                                    children,
                                    footer))))));
            }))));
};
var isInteriorPosition = function (position) { return position.bottom !== undefined; };
export default Dropdown;
