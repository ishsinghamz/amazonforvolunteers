import { useCallback, useState } from 'react';
export function createHighlightedOptionHook(_a) {
    var isInteractive = _a.isInteractive;
    return function useHighlightedOption(options) {
        var _a = useState(-1), highlightedIndex = _a[0], setHighlightedIndex = _a[1];
        var highlightedOption = options[highlightedIndex] && isInteractive(options[highlightedIndex]) ? options[highlightedIndex] : undefined;
        var moveHighlightFrom = function (direction, startIndex) {
            if (startIndex === void 0) { startIndex = highlightedIndex; }
            var newIndex = startIndex;
            do {
                newIndex += direction;
            } while (options[newIndex] && !isInteractive(options[newIndex]));
            if (options[newIndex]) {
                setHighlightedIndex(newIndex);
            }
        };
        var moveHighlight = function (direction) { return moveHighlightFrom(direction); };
        var highlightOption = useCallback(function (option) {
            var index = options.indexOf(option);
            setHighlightedIndex(index);
        }, [options]);
        return {
            setHighlightedIndex: setHighlightedIndex,
            highlightedIndex: highlightedIndex,
            highlightedOption: highlightedOption,
            moveHighlight: moveHighlight,
            resetHighlight: function () { return setHighlightedIndex(-1); },
            goHome: function () { return moveHighlightFrom(1, -1); },
            goEnd: function () { return moveHighlightFrom(-1, options.length); },
            highlightOption: highlightOption
        };
    };
}
