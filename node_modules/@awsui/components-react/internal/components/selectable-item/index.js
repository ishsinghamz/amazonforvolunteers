import { __assign, __rest } from "tslib";
import React from 'react';
import clsx from 'clsx';
import styles from './styles.css.js';
import { getBaseProps } from '../../base-component';
var SelectableItem = function (_a, ref) {
    var _b;
    var children = _a.children, ariaSelected = _a.ariaSelected, selected = _a.selected, highlighted = _a.highlighted, disabled = _a.disabled, hasBackground = _a.hasBackground, isParent = _a.isParent, isChild = _a.isChild, isKeyboard = _a.isKeyboard, virtualPosition = _a.virtualPosition, padBottom = _a.padBottom, isNextSelected = _a.isNextSelected, restProps = __rest(_a, ["children", "ariaSelected", "selected", "highlighted", "disabled", "hasBackground", "isParent", "isChild", "isKeyboard", "virtualPosition", "padBottom", "isNextSelected"]);
    var _c = getBaseProps(restProps), className = _c.className, rest = __rest(_c, ["className"]);
    var classNames = clsx(className, styles['selectable-item'], (_b = {},
        _b[styles.selected] = selected,
        _b[styles.highlighted] = highlighted,
        _b[styles['has-background']] = hasBackground,
        _b[styles.parent] = isParent,
        _b[styles.child] = isChild,
        _b[styles['is-keyboard']] = isKeyboard,
        _b[styles.disabled] = disabled,
        _b[styles.virtual] = virtualPosition !== undefined,
        _b[styles['pad-bottom']] = padBottom,
        _b[styles['next-item-selected']] = isNextSelected,
        _b));
    var style = virtualPosition !== undefined
        ? {
            transform: "translateY(" + virtualPosition + "px)"
        }
        : undefined;
    var a11yProperties = {
        'aria-disabled': disabled
    };
    if (disabled || isParent) {
        a11yProperties['aria-hidden'] = true;
    }
    if (ariaSelected) {
        a11yProperties['aria-selected'] = ariaSelected;
    }
    return (React.createElement("li", __assign({ role: "option", className: classNames, style: style }, a11yProperties, rest),
        children,
        React.createElement("div", { className: styles['measure-strut'], ref: ref })));
};
export default React.forwardRef(SelectableItem);
