import { BaseComponentProps } from '../../base-component';
import { NonCancelableEventHandler } from '../../events';
export interface CartesianChartProps<T extends ChartDataTypes, Series> extends BaseComponentProps {
    xScaleType?: ScaleType;
    yScaleType?: 'linear' | 'log';
    xDomain?: T extends unknown ? ReadonlyArray<T> : ReadonlyArray<T>;
    yDomain?: ReadonlyArray<number>;
    xTitle?: string;
    yTitle?: string;
    legendTitle?: string;
    ariaLabel?: string;
    ariaLabelledby?: string;
    ariaDescription?: string;
    i18nStrings?: CartesianChartProps.I18nStrings<T>;
    height?: number;
    detailPopoverSize?: 'small' | 'medium' | 'large';
    hideLegend?: boolean;
    hideFilter?: boolean;
    additionalFilters?: React.ReactNode;
    highlightedSeries?: Series | null;
    visibleSeries?: ReadonlyArray<Series>;
    statusType?: 'loading' | 'finished' | 'error';
    empty?: React.ReactNode;
    noMatch?: React.ReactNode;
    loadingText?: string;
    errorText?: string;
    recoveryText?: string;
    onRecoveryClick?: NonCancelableEventHandler;
    onFilterChange?: NonCancelableEventHandler<CartesianChartProps.FilterChangeDetail<Series>>;
    onHighlightChange?: NonCancelableEventHandler<CartesianChartProps.HighlightChangeDetail<Series>>;
}
export declare namespace CartesianChartProps {
    interface FilterChangeDetail<Series> {
        visibleSeries: ReadonlyArray<Series>;
    }
    interface HighlightChangeDetail<Series> {
        highlightedSeries: Series | null;
    }
    interface TickFormatter<T> {
        (value: T): string;
    }
    interface ValueFormatter<YType, XType = null> {
        (yValue: YType, xValue: XType): string;
    }
    interface I18nStrings<T> {
        filterLabel?: string;
        filterPlaceholder?: string;
        filterSelectedAriaLabel?: string;
        legendAriaLabel?: string;
        detailPopoverDismissAriaLabel?: string;
        chartAriaRoleDescription?: string;
        xAxisAriaRoleDescription?: string;
        yAxisAriaRoleDescription?: string;
        xTickFormatter?: TickFormatter<T>;
        yTickFormatter?: TickFormatter<number>;
    }
}
export declare type ChartDataTypes = number | string | Date;
export declare type ScaleType = 'linear' | 'log' | 'time' | 'categorical';
export declare type XScaleType = 'linear' | 'log' | 'time' | 'categorical';
export declare type YScaleType = 'linear' | 'log';
export declare type ScaleRange = [number, number];
export declare type ChartDomain<T extends ChartDataTypes> = T extends unknown ? ReadonlyArray<T> : ReadonlyArray<T>;
export declare type XDomain<T extends ChartDataTypes> = ChartDomain<T>;
export declare type YDomain = ChartDomain<number>;
