import { CartesianChartProps } from '../internal/components/cartesian-chart/interfaces';
export declare type ChartDataTypes = number | string | Date;
export declare type SeriesType = 'line' | 'bar';
export declare type ScaleType = 'linear' | 'log' | 'time' | 'categorical';
export declare type ScaleRange = [number, number];
export interface InternalChartSeries<T> {
    index: number;
    color: string;
    series: MixedLineBarChartProps.ChartSeries<T>;
}
export interface MixedLineBarChartProps<T extends ChartDataTypes> extends CartesianChartProps<T, MixedLineBarChartProps.ChartSeries<T>> {
    series: ReadonlyArray<MixedLineBarChartProps.ChartSeries<T>>;
    stackedBars?: boolean;
    horizontalBars?: boolean;
    emphasizeBaselineAxis?: boolean;
}
export declare namespace MixedLineBarChartProps {
    export interface Datum<T> {
        x: T;
        y: number;
    }
    interface IDataSeries<T> {
        type: 'line' | 'bar' | 'threshold';
        title: string;
        color?: string;
        data: T extends unknown ? ReadonlyArray<Datum<T>> : ReadonlyArray<Datum<T>>;
        valueFormatter?: T extends unknown ? CartesianChartProps.ValueFormatter<number, T> : CartesianChartProps.ValueFormatter<number, T>;
    }
    export interface BarDataSeries<T> extends IDataSeries<T> {
        type: 'bar';
    }
    export interface LineDataSeries<T> extends IDataSeries<T> {
        type: 'line';
    }
    export interface ThresholdSeries extends Omit<IDataSeries<never>, 'data' | 'valueFormatter'> {
        type: 'threshold';
        y: number;
        valueFormatter?: CartesianChartProps.TickFormatter<number>;
    }
    export type DataSeries<T> = LineDataSeries<T> | BarDataSeries<T>;
    export type ChartSeries<T> = DataSeries<T> | ThresholdSeries;
    export type FilterChangeDetail<T> = CartesianChartProps.FilterChangeDetail<ChartSeries<T>>;
    export type HighlightChangeDetail<T> = CartesianChartProps.HighlightChangeDetail<ChartSeries<T>>;
    export type TickFormatter<T> = CartesianChartProps.TickFormatter<T>;
    export type ValueFormatter<YType, XType = null> = CartesianChartProps.ValueFormatter<YType, XType>;
    export type I18nStrings<T> = CartesianChartProps.I18nStrings<T>;
    export {};
}
