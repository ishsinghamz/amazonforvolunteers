import { BaseComponentProps } from '../internal/base-component';
import { FormFieldValidationControlProps } from '../internal/context/form-field-context';
import { NonCancelableEventHandler } from '../internal/events';
import { TimeInputProps } from '../time-input/interfaces';
import { ExpandToViewport } from '../internal/components/dropdown/interfaces';
export interface DateRangePickerProps extends BaseComponentProps, FormFieldValidationControlProps, ExpandToViewport {
    value: null | DateRangePickerProps.Value;
    relativeOptions: ReadonlyArray<DateRangePickerProps.RelativeOption>;
    placeholder?: string;
    isDateEnabled?: DateRangePickerProps.IsDateEnabledFunction;
    locale?: string;
    startOfWeek?: number;
    disabled?: boolean;
    readOnly?: boolean;
    onFocus?: NonCancelableEventHandler<null>;
    onBlur?: NonCancelableEventHandler<null>;
    onChange?: NonCancelableEventHandler<DateRangePickerProps.ChangeDetail>;
    isValidRange: DateRangePickerProps.ValidationFunction;
    i18nStrings: DateRangePickerProps.I18nStrings;
    showClearButton?: boolean;
    dateOnly?: boolean;
    rangeSelectorMode?: DateRangePickerProps.RangeSelectorMode;
    timeOffset?: number;
    timeInputFormat?: TimeInputProps.Format;
}
export declare namespace DateRangePickerProps {
    type Value = AbsoluteValue | RelativeValue;
    interface AbsoluteValue {
        startDate: string;
        endDate: string;
        type: 'absolute';
    }
    interface RelativeValue {
        key?: string;
        amount: number;
        unit: TimeUnit;
        type: 'relative';
    }
    interface RelativeOption {
        key: string;
        amount: number;
        unit: TimeUnit;
        type: 'relative';
    }
    type TimeUnit = 'second' | 'minute' | 'hour' | 'day' | 'week' | 'month' | 'year';
    type ValidationFunction = (value: Value | null) => ValidationResult;
    type ValidationResult = ValidRangeResult | InvalidRangeResult;
    interface ValidRangeResult {
        valid: true;
    }
    interface InvalidRangeResult {
        valid: false;
        errorMessage: string;
    }
    interface ChangeDetail {
        value: null | Value;
    }
    interface IsDateEnabledFunction {
        (date: Date): boolean;
    }
    type RangeSelectorMode = 'default' | 'absolute-only' | 'relative-only';
    interface Ref {
        focus(): void;
    }
    interface I18nStrings {
        ariaLabel?: string;
        ariaLabelledby?: string;
        ariaDescribedby?: string;
        relativeModeTitle: string;
        absoluteModeTitle: string;
        relativeRangeSelectionHeading: string;
        cancelButtonLabel: string;
        clearButtonLabel: string;
        applyButtonLabel: string;
        formatRelativeRange: (value: RelativeValue) => string;
        formatUnit: (unit: TimeUnit, value: number) => string;
        customRelativeRangeOptionLabel: string;
        customRelativeRangeOptionDescription: string;
        customRelativeRangeDurationLabel: string;
        customRelativeRangeDurationPlaceholder: string;
        customRelativeRangeUnitLabel: string;
        todayAriaLabel: string;
        nextMonthAriaLabel: string;
        previousMonthAriaLabel: string;
        startDateLabel: string;
        startTimeLabel: string;
        endDateLabel: string;
        endTimeLabel: string;
        dateTimeConstraintText?: string;
    }
}
export interface Focusable {
    focus(): void;
}
