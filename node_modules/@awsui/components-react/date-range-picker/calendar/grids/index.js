import React, { useCallback, useEffect, useRef, useState } from 'react';
import { KeyCode } from '../../../internal/keycode';
import { addDays, addWeeks, isSameMonth, isAfter, isBefore, addMonths, min, max } from 'date-fns';
import InternalSpaceBetween from '../../../space-between/internal';
import { Grid } from './grid';
import styles from '../../styles.css.js';
import useFocusVisible from '../../../internal/hooks/focus-visible/index';
import { getBaseDate } from '../get-base-date';
import { hasValue } from '../../../internal/utils/has-value';
function isVisible(date, baseDate, isSingleGrid) {
    if (isSingleGrid) {
        return isSameMonth(date, baseDate);
    }
    var previousMonth = addMonths(baseDate, -1);
    return isSameMonth(date, previousMonth) || isSameMonth(date, baseDate);
}
export function selectFocusedDate(selected, baseDate, isDateEnabled) {
    if (selected && isDateEnabled(selected) && isSameMonth(selected, baseDate)) {
        return selected;
    }
    var today = new Date();
    if (isDateEnabled(today) && isSameMonth(today, baseDate)) {
        return today;
    }
    if (isDateEnabled(baseDate)) {
        return baseDate;
    }
    return null;
}
export var Grids = function (_a) {
    var baseDate = _a.baseDate, selectedStartDate = _a.selectedStartDate, selectedEndDate = _a.selectedEndDate, focusedDate = _a.focusedDate, onFocusedDateChange = _a.onFocusedDateChange, isDateEnabled = _a.isDateEnabled, isSingleGrid = _a.isSingleGrid, onSelectDate = _a.onSelectDate, onChangeMonth = _a.onChangeMonth, handleFocusMove = _a.handleFocusMove, locale = _a.locale, startOfWeek = _a.startOfWeek, todayAriaLabel = _a.todayAriaLabel;
    var containerRef = useRef(null);
    var _b = useState(false), gridHasFocus = _b[0], setGridHasFocus = _b[1];
    var focusedDateRef = useRef(null);
    var baseDateTime = baseDate === null || baseDate === void 0 ? void 0 : baseDate.getTime();
    var focusedDateTime = focusedDate === null || focusedDate === void 0 ? void 0 : focusedDate.getTime();
    useEffect(function () {
        if (focusedDate && !isVisible(focusedDate, baseDate, isSingleGrid)) {
            var direction = isAfter(focusedDate, baseDate) ? 'backwards' : 'forwards';
            var newMonth = !isSingleGrid && direction === 'backwards' ? addMonths(baseDate, -1) : baseDate;
            var nearestBaseDate = getBaseDate(newMonth, direction === 'backwards' ? -1 : 1, isDateEnabled);
            var newFocusedDate = selectFocusedDate(focusedDate, nearestBaseDate, isDateEnabled);
            onFocusedDateChange(newFocusedDate);
        }
    }, [focusedDateTime, baseDateTime, isSingleGrid, isDateEnabled, onFocusedDateChange]);
    var onGridKeyDownHandler = useCallback(function (e) {
        var updatedFocusDate;
        if (focusedDate === null) {
            return;
        }
        switch (e.keyCode) {
            case KeyCode.enter:
                e.preventDefault();
                if (focusedDate) {
                    onSelectDate(focusedDate);
                }
                return;
            case KeyCode.right:
                e.preventDefault();
                updatedFocusDate = handleFocusMove(focusedDate, isDateEnabled, function (date) { return addDays(date, 1); });
                break;
            case KeyCode.left:
                e.preventDefault();
                updatedFocusDate = handleFocusMove(focusedDate, isDateEnabled, function (date) { return addDays(date, -1); });
                break;
            case KeyCode.up:
                e.preventDefault();
                updatedFocusDate = handleFocusMove(focusedDate, isDateEnabled, function (date) { return addWeeks(date, -1); });
                break;
            case KeyCode.down:
                e.preventDefault();
                updatedFocusDate = handleFocusMove(focusedDate, isDateEnabled, function (date) { return addWeeks(date, 1); });
                break;
            default:
                return;
        }
        var updatedDateIsVisible = isVisible(updatedFocusDate, baseDate, isSingleGrid);
        if (!updatedDateIsVisible) {
            var newMonthIsOnLeftSide = !isSingleGrid && isBefore(updatedFocusDate, baseDate);
            onChangeMonth(newMonthIsOnLeftSide ? addMonths(updatedFocusDate, 1) : updatedFocusDate);
        }
        onFocusedDateChange(updatedFocusDate);
    }, [focusedDateTime, baseDateTime, handleFocusMove, isDateEnabled, onSelectDate, onChangeMonth, isSingleGrid]);
    useEffect(function () {
        if (focusedDate !== null && gridHasFocus) {
            if (focusedDateRef.current && focusedDateRef.current !== document.activeElement) {
                focusedDateRef.current.focus();
            }
        }
    }, [focusedDateTime, gridHasFocus]);
    var onGridBlur = function (event) {
        var _a;
        var newFocusTarget = event.relatedTarget || document.activeElement;
        var newFocusTargetIsInGrid = (_a = containerRef.current) === null || _a === void 0 ? void 0 : _a.contains(newFocusTarget);
        if (newFocusTarget && !newFocusTargetIsInGrid && gridHasFocus) {
            setGridHasFocus(false);
        }
    };
    var onGridFocus = function () {
        if (!gridHasFocus) {
            setGridHasFocus(true);
        }
    };
    var focusVisible = useFocusVisible();
    var isRangeVisible = (selectedStartDate && selectedEndDate) || (gridHasFocus && !!focusVisible['data-awsui-focus-visible']);
    var rangeEnds = [selectedStartDate !== null && selectedStartDate !== void 0 ? selectedStartDate : focusedDate, selectedEndDate !== null && selectedEndDate !== void 0 ? selectedEndDate : focusedDate].filter(hasValue);
    var rangeStartDate = min(rangeEnds);
    var rangeEndDate = max(rangeEnds);
    return (React.createElement("div", { ref: containerRef, onFocus: onGridFocus, onBlur: onGridBlur },
        React.createElement(InternalSpaceBetween, { size: "xs", direction: "horizontal" },
            !isSingleGrid && (React.createElement(Grid, { className: styles['first-grid'], baseDate: addMonths(baseDate, -1), selectedEndDate: selectedEndDate, selectedStartDate: selectedStartDate, rangeStartDate: isRangeVisible ? rangeStartDate : null, rangeEndDate: isRangeVisible ? rangeEndDate : null, focusedDate: focusedDate, focusedDateRef: focusedDateRef, isDateEnabled: isDateEnabled, onSelectDate: onSelectDate, onGridKeyDownHandler: onGridKeyDownHandler, onFocusedDateChange: onFocusedDateChange, locale: locale, startOfWeek: startOfWeek, todayAriaLabel: todayAriaLabel })),
            React.createElement(Grid, { className: styles['second-grid'], baseDate: baseDate, selectedEndDate: selectedEndDate, selectedStartDate: selectedStartDate, rangeStartDate: isRangeVisible ? rangeStartDate : null, rangeEndDate: isRangeVisible ? rangeEndDate : null, focusedDate: focusedDate, focusedDateRef: focusedDateRef, isDateEnabled: isDateEnabled, onSelectDate: onSelectDate, onGridKeyDownHandler: onGridKeyDownHandler, onFocusedDateChange: onFocusedDateChange, locale: locale, startOfWeek: startOfWeek, todayAriaLabel: todayAriaLabel }))));
};
