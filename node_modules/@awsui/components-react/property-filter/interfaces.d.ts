import { BaseComponentProps } from '../internal/base-component';
import { NonCancelableEventHandler } from '../internal/events';
import { DropdownStatusProps } from '../internal/components/dropdown-status';
import { AutosuggestProps } from '../autosuggest/interfaces';
import { ExpandToViewport } from '../internal/components/dropdown/interfaces';
export interface PropertyFilterProps extends BaseComponentProps, ExpandToViewport {
    disabled?: boolean;
    i18nStrings: PropertyFilterProps.I18nStrings;
    countText?: string;
    query: PropertyFilterProps.Query;
    hideOperations?: boolean;
    onChange: NonCancelableEventHandler<PropertyFilterProps.Query>;
    filteringProperties: ReadonlyArray<PropertyFilterProps.FilteringProperty>;
    filteringOptions?: ReadonlyArray<PropertyFilterProps.FilteringOption>;
    customGroupsText?: PropertyFilterProps.GroupText[];
    disableFreeTextFiltering?: boolean;
    onLoadItems?: NonCancelableEventHandler<PropertyFilterProps.LoadItemsDetail>;
    virtualScroll?: boolean;
    customControl?: React.ReactNode;
    asyncProperties?: boolean;
    tokenLimit?: number;
    filteringEmpty?: React.ReactNode;
    filteringLoadingText?: string;
    filteringFinishedText?: string;
    filteringErrorText?: string;
    filteringRecoveryText?: string;
    filteringStatusType?: DropdownStatusProps.StatusType;
}
export declare namespace PropertyFilterProps {
    interface Query {
        tokens: readonly PropertyFilterProps.Token[];
        operation: PropertyFilterProps.JoinOperation;
    }
    type JoinOperation = 'and' | 'or';
    interface LoadItemsDetail {
        filteringProperty?: FilteringProperty;
        filteringOperator?: ComparisonOperator;
        filteringText: string;
        firstPage: boolean;
        samePage: boolean;
    }
    interface I18nStrings {
        filteringAriaLabel: string;
        dismissAriaLabel: string;
        filteringPlaceholder?: string;
        groupValuesText: string;
        groupPropertiesText: string;
        operatorsText: string;
        operationAndText: string;
        operationOrText: string;
        operatorLessText: string;
        operatorLessOrEqualText: string;
        operatorGreaterText: string;
        operatorGreaterOrEqualText: string;
        operatorContainsText: string;
        operatorDoesNotContainText: string;
        operatorEqualsText: string;
        operatorDoesNotEqualText: string;
        editTokenHeader: string;
        propertyText: string;
        operatorText: string;
        valueText: string;
        cancelActionText: string;
        applyActionText: string;
        allPropertiesLabel: string;
        tokenLimitShowMore?: string;
        tokenLimitShowFewer?: string;
        clearFiltersText: string;
        removeTokenButtonAriaLabel: (token: PropertyFilterProps.Token) => string;
        enteredTextLabel: AutosuggestProps.EnteredTextLabel;
    }
    type ComparisonOperator = '<' | '<=' | '>' | '>=' | ':' | '!:' | '=' | '!=';
    interface FilteringProperty {
        key: string;
        groupValuesLabel: string;
        propertyLabel: string;
        operators?: readonly ComparisonOperator[];
        defaultOperator?: ComparisonOperator;
        group?: string;
    }
    interface GroupText {
        properties: string;
        values: string;
        group: string;
    }
    interface FilteringOption {
        propertyKey: string;
        value: string;
    }
    interface FilteringChangeDetail {
        filteringText: string;
        filteringProperty?: FilteringProperty;
    }
    interface Ref {
        focus(): void;
    }
    interface Token {
        value: string;
        propertyKey?: string;
        operator: ComparisonOperator;
    }
}
