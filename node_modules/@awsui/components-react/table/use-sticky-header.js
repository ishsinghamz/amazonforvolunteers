import { useLayoutEffect, useCallback } from 'react';
import { useResizeObserver } from '../internal/hooks/container-queries/use-resize-observer';
import stickyScrolling, { calculateScrollingOffset, scrollUpBy } from './sticky-scrolling';
import { useMobile } from '../internal/hooks/use-mobile';
function syncSizes(from, to) {
    var fromCells = Array.prototype.slice.apply(from.children);
    var toCells = Array.prototype.slice.apply(to.children);
    for (var i = 0; i < fromCells.length; i++) {
        var width = fromCells[i].style.width;
        if (width !== 'auto') {
            width = fromCells[i].offsetWidth + "px";
        }
        toCells[i].style.width = width;
    }
}
export var useStickyHeader = function (theadRef, secondaryTheadRef, secondaryTableRef, tableWrapperRef) {
    var isMobile = useMobile();
    var getPrimaryThead = useCallback(function () { return theadRef.current; }, [theadRef]);
    var syncColumnHeaderWidths = useCallback(function () {
        if (theadRef.current && secondaryTheadRef.current && secondaryTableRef.current && tableWrapperRef.current) {
            syncSizes(theadRef.current, secondaryTheadRef.current);
            secondaryTableRef.current.style.width = theadRef.current.offsetWidth + "px";
            tableWrapperRef.current.style.marginTop = "-" + theadRef.current.offsetHeight + "px";
        }
    }, [theadRef, secondaryTheadRef, secondaryTableRef, tableWrapperRef]);
    useLayoutEffect(function () {
        syncColumnHeaderWidths();
        setTimeout(function () { return syncColumnHeaderWidths(); }, 0);
        var secondaryTable = secondaryTableRef.current;
        var primaryTable = tableWrapperRef.current;
        return function () {
            if (secondaryTable) {
                secondaryTable.style.width = '';
            }
            if (primaryTable) {
                primaryTable.style.marginTop = '';
            }
        };
    });
    useResizeObserver(getPrimaryThead, syncColumnHeaderWidths);
    var scrollToTop = function () {
        if (!isMobile && theadRef.current && secondaryTheadRef.current && tableWrapperRef.current) {
            var scrollDist = calculateScrollingOffset(theadRef.current, secondaryTheadRef.current);
            if (scrollDist > 0) {
                scrollUpBy(scrollDist, tableWrapperRef.current);
            }
        }
    };
    var scrollToItem = stickyScrolling(tableWrapperRef, secondaryTheadRef).scrollToItem;
    var scrollToRow = function (itemNode) {
        if (!isMobile) {
            scrollToItem(itemNode);
        }
    };
    return { scrollToRow: scrollToRow, scrollToTop: scrollToTop };
};
