import { InternalContainerProps } from '../container/internal';
import { TableProps } from './interfaces';
export declare const applyTrackBy: <T>(trackBy: TableProps.TrackBy<T>, item: T) => any;
export declare const getItemKey: <T>(trackBy: TableProps.TrackBy<T> | undefined, item: T, index: number) => any;
export declare const getTrackableValue: <T>(trackBy: TableProps.TrackBy<T> | undefined, item: T) => any;
export declare const getColumnKey: <T>(column: TableProps.ColumnDefinition<T>, index: number) => string | number;
declare type SortingStatus = 'sortable' | 'ascending' | 'descending';
export declare const getSortingStatus: (sortable: boolean, sorted: boolean, descending: boolean, disabled: boolean) => SortingStatus | undefined;
export declare const getSortingIconName: (sortingState: SortingStatus) => "caret-down-filled" | "caret-down" | "caret-up-filled";
export declare const getAriaSort: (sortingState: SortingStatus) => "none" | "ascending" | "descending";
export declare const isSorted: <T>(column: TableProps.ColumnDefinition<T>, sortingColumn: TableProps.SortingColumn<T>) => boolean;
export declare const toContainerVariant: (variant: TableProps.Variant | undefined) => InternalContainerProps['variant'];
export declare function checkSortingState<T>(columnDefinitions: ReadonlyArray<TableProps.ColumnDefinition<T>>, sortingComparator: TableProps.SortingColumn<T>['sortingComparator']): void;
export {};
