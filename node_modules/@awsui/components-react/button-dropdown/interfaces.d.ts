import React from 'react';
import { BaseComponentProps } from '../internal/base-component';
import { BaseNavigationDetail, CancelableEventHandler } from '../internal/events';
import { IconProps } from '../icon/interfaces';
import { InternalBaseComponentProps } from '../internal/hooks/use-base-component';
export interface ButtonDropdownProps extends BaseComponentProps {
    items: ReadonlyArray<ButtonDropdownProps.ItemOrGroup>;
    disabled?: boolean;
    loading?: boolean;
    variant?: ButtonDropdownProps.Variant;
    expandableGroups?: boolean;
    expandToViewport?: boolean;
    ariaLabel?: string;
    children?: React.ReactNode;
    onItemClick?: CancelableEventHandler<ButtonDropdownProps.ItemClickDetails>;
    onItemFollow?: CancelableEventHandler<ButtonDropdownProps.ItemClickDetails>;
}
export declare namespace ButtonDropdownProps {
    type Variant = 'normal' | 'primary' | 'icon';
    interface Item {
        id: string;
        text: string;
        disabled?: boolean;
        disabledReason?: string;
        description?: string;
        href?: string;
        external?: boolean;
        externalIconAriaLabel?: string;
        iconAlt?: string;
        iconName?: IconProps.Name;
        iconUrl?: string;
        iconSvg?: React.ReactNode;
    }
    interface ItemGroup extends Omit<Item, 'id' | 'text'> {
        id?: string;
        text?: string;
        items: Items;
    }
    type ItemOrGroup = Item | ItemGroup;
    type Items = ReadonlyArray<ItemOrGroup>;
    interface ItemClickDetails extends BaseNavigationDetail {
        id: string;
    }
    interface Ref {
        focus(): void;
    }
}
export interface ButtonDropdownSettings {
    hasExpandableGroups: boolean;
    isInRestrictedView?: boolean;
}
export interface HighlightProps {
    targetItem: ButtonDropdownProps.ItemOrGroup | null;
    isHighlighted: (item: ButtonDropdownProps.ItemOrGroup) => boolean;
    isExpanded: (group: ButtonDropdownProps.ItemGroup) => boolean;
    highlightItem: (item: ButtonDropdownProps.ItemOrGroup) => void;
}
export declare type GroupToggle = (item: ButtonDropdownProps.ItemGroup, event: React.SyntheticEvent) => void;
export declare type ItemActivate = (item: ButtonDropdownProps.Item, event: React.MouseEvent | React.KeyboardEvent) => void;
export interface CategoryProps extends HighlightProps {
    item: ButtonDropdownProps.ItemGroup;
    onGroupToggle: GroupToggle;
    onItemActivate: ItemActivate;
    disabled: boolean;
    expandToViewport?: boolean;
    variant?: ItemListProps['variant'];
}
export interface ItemListProps extends HighlightProps {
    items: ButtonDropdownProps.Items;
    onGroupToggle: GroupToggle;
    onItemActivate: ItemActivate;
    categoryDisabled?: boolean;
    hasExpandableGroups?: boolean;
    hasCategoryHeader?: boolean;
    expandToViewport?: boolean;
    variant?: InternalButtonDropdownProps['variant'];
}
export interface LinkItem extends ButtonDropdownProps.Item {
    href: string;
}
export interface ItemProps {
    item: ButtonDropdownProps.Item | LinkItem;
    disabled: boolean;
    highlighted: boolean;
    onItemActivate: ItemActivate;
    highlightItem: (item: ButtonDropdownProps.ItemOrGroup) => void;
    first?: boolean;
    last: boolean;
    hasCategoryHeader: boolean;
    variant?: ItemListProps['variant'];
}
export interface InternalButtonDropdownProps extends Omit<ButtonDropdownProps, 'variant'>, InternalBaseComponentProps {
    customTriggerBuilder?: (clickHandler: () => void, ref: React.Ref<any>, isDisabled: boolean, isExpanded: boolean) => React.ReactNode;
    variant?: ButtonDropdownProps['variant'] | 'navigation';
    title?: string;
    description?: string;
    preferCenter?: boolean;
}
