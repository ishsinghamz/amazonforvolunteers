import React from 'react';
import { TableProps } from '../table/interfaces';
import { PaginationProps } from '../pagination/interfaces';
import { BaseComponentProps } from '../internal/base-component';
import { NonCancelableEventHandler } from '../internal/events';
export interface S3ResourceSelectorProps extends BaseComponentProps {
    alert?: React.ReactNode;
    inputAriaDescribedby?: string;
    selectableItemsTypes?: ReadonlyArray<S3ResourceSelectorProps.SelectableItems>;
    viewHref?: string;
    invalid?: boolean;
    bucketsVisibleColumns?: ReadonlyArray<string>;
    objectsVisibleColumns?: ReadonlyArray<string>;
    versionsVisibleColumns?: ReadonlyArray<string>;
    bucketsIsItemDisabled?: (item: S3ResourceSelectorProps.Bucket) => boolean;
    objectsIsItemDisabled?: (item: S3ResourceSelectorProps.Object) => boolean;
    versionsIsItemDisabled?: (item: S3ResourceSelectorProps.Version) => boolean;
    resource: S3ResourceSelectorProps.Resource;
    i18nStrings?: S3ResourceSelectorProps.I18nStrings;
    fetchBuckets: () => Promise<ReadonlyArray<S3ResourceSelectorProps.Bucket>>;
    fetchObjects: (bucketName: string, pathPrefix: string) => Promise<ReadonlyArray<S3ResourceSelectorProps.Object>>;
    fetchVersions: (bucketName: string, pathPrefix: string) => Promise<ReadonlyArray<S3ResourceSelectorProps.Version>>;
    onChange?: NonCancelableEventHandler<S3ResourceSelectorProps.ChangeDetail>;
}
interface SelectionLabels<T> {
    itemSelectionLabel: (data: TableProps.SelectionState<T>, row: T) => string;
    selectionGroupLabel: string;
}
declare type SortingColumnContainingString = (columnName: string) => string;
export declare namespace S3ResourceSelectorProps {
    interface Bucket {
        Name?: string;
        CreationDate?: string;
        Region?: string;
    }
    interface Object {
        Key?: string;
        LastModified?: string;
        Size?: number;
        IsFolder?: boolean;
    }
    interface Version {
        VersionId?: string;
        LastModified?: string;
        Size?: number;
    }
    interface Resource {
        uri: string;
        versionId?: string;
    }
    type SelectableItems = 'buckets' | 'objects' | 'versions';
    interface I18nStrings {
        inContextInputPlaceholder: string;
        inContextSelectPlaceholder: string;
        inContextBrowseButton: string;
        inContextViewButton: string;
        inContextLoadingText: string;
        inContextUriLabel: string;
        inContextVersionSelectLabel: string;
        modalTitle: string;
        modalCancelButton: string;
        modalSubmitButton: string;
        modalBreadcrumbRootItem: string;
        selectionBuckets: string;
        selectionObjects: string;
        selectionVersions: string;
        selectionBucketsSearchPlaceholder: string;
        selectionObjectsSearchPlaceholder: string;
        selectionVersionsSearchPlaceholder: string;
        selectionBucketsLoading: string;
        selectionBucketsNoItems: string;
        selectionObjectsLoading: string;
        selectionObjectsNoItems: string;
        selectionVersionsLoading: string;
        selectionVersionsNoItems: string;
        filteringCounterText: (count: number) => string;
        filteringNoMatches: string;
        filteringCantFindMatch: string;
        clearFilterButtonText: string;
        columnBucketName: string;
        columnBucketCreationDate?: string;
        columnBucketRegion?: string;
        columnObjectKey: string;
        columnObjectLastModified?: string;
        columnObjectSize?: string;
        columnVersionID: string;
        columnVersionLastModified: string;
        columnVersionSize?: string;
        validationPathMustBegin: string;
        validationBucketLowerCase: string;
        validationBucketMustNotContain: string;
        validationBucketLength: string;
        validationBucketMustComplyDns: string;
        labelSortedDescending: SortingColumnContainingString;
        labelSortedAscending: SortingColumnContainingString;
        labelNotSorted: SortingColumnContainingString;
        labelsPagination: PaginationProps.Labels;
        labelsBucketsSelection: SelectionLabels<Bucket>;
        labelsObjectsSelection: SelectionLabels<S3ResourceSelectorProps.Object>;
        labelsVersionsSelection: SelectionLabels<Version>;
        labelFiltering: (itemsType: string) => string;
        labelRefresh: string;
        labelModalDismiss: string;
        labelBreadcrumbs: string;
    }
    interface ChangeDetail {
        resource: Resource;
        errorText?: string;
    }
    interface Ref {
        focus(): void;
    }
}
export {};
