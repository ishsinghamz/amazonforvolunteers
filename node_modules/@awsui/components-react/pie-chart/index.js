import { __assign, __rest } from "tslib";
import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';
import clsx from 'clsx';
import { getBaseProps } from '../internal/base-component';
import { useControllable } from '../internal/hooks/use-controllable';
import { fireNonCancelableEvent } from '../internal/events';
import Legend from '../internal/components/chart-legend';
import Filter from '../internal/components/chart-filter';
import InternalSpaceBetween from '../space-between/internal';
import InternalBox from '../box/internal';
import InternalPieChart from './pie-chart';
import styles from './styles.css.js';
import { applyDisplayName } from '../internal/utils/apply-display-name';
import useBaseComponent from '../internal/hooks/use-base-component';
import mergeRefs from 'react-merge-refs';
import createCategoryColorScale from '../internal/utils/create-category-color-scale';
import useContainerWidth from '../internal/utils/use-container-width';
import { nodeContains } from '../internal/utils/dom';
var PieChart = function PieChart(_a) {
    var _b;
    var _c = _a.variant, variant = _c === void 0 ? 'pie' : _c, _d = _a.size, size = _d === void 0 ? 'medium' : _d, _e = _a.hideLegend, hideLegend = _e === void 0 ? false : _e, _f = _a.hideFilter, hideFilter = _f === void 0 ? false : _f, _g = _a.statusType, statusType = _g === void 0 ? 'finished' : _g, _h = _a.data, externalData = _h === void 0 ? [] : _h, i18nStrings = _a.i18nStrings, controlledHighlightedSegment = _a.highlightedSegment, controlledVisibleSegments = _a.visibleSegments, controlledOnHighlightChange = _a.onHighlightChange, onFilterChange = _a.onFilterChange, additionalFilters = _a.additionalFilters, legendTitle = _a.legendTitle, _j = _a.detailPopoverSize, detailPopoverSize = _j === void 0 ? 'medium' : _j, props = __rest(_a, ["variant", "size", "hideLegend", "hideFilter", "statusType", "data", "i18nStrings", "highlightedSegment", "visibleSegments", "onHighlightChange", "onFilterChange", "additionalFilters", "legendTitle", "detailPopoverSize"]);
    var _k = useBaseComponent('PieChart').__internalRootRef, __internalRootRef = _k === void 0 ? null : _k;
    var baseProps = getBaseProps(props);
    var isEmpty = !externalData || externalData.length === 0;
    var containerAttr = __assign(__assign({}, baseProps), { className: clsx(baseProps.className, styles.root) });
    var containerRef = useRef(null);
    var _l = useContainerWidth(), containerWidth = _l[0], measureRef = _l[1];
    var data = useMemo(function () {
        var colors = createCategoryColorScale(externalData, undefined, function (it) { return it.color || null; });
        return externalData.map(function (datum, i) { return ({
            index: i,
            color: colors[i],
            datum: datum
        }); });
    }, [externalData]);
    var _m = useControllable(controlledHighlightedSegment, controlledOnHighlightChange, null, {
        componentName: 'PieChart',
        controlledProp: 'highlightedSegment',
        changeHandler: 'onHighlightChange'
    }), _o = _m[0], highlightedSegment = _o === void 0 ? null : _o, setHighlightedSegment = _m[1];
    var _p = useState(highlightedSegment), legendSegment = _p[0], setLegendSegment = _p[1];
    useEffect(function () {
        setLegendSegment(controlledHighlightedSegment || null);
    }, [controlledHighlightedSegment]);
    var _q = useControllable(controlledVisibleSegments, onFilterChange, externalData, {
        componentName: 'PieChart',
        controlledProp: 'visibleSegments',
        changeHandler: 'onFilterChange'
    }), visibleSegments = _q[0], setVisibleSegments = _q[1];
    var _r = useState(null), pinnedSegment = _r[0], setPinnedSegment = _r[1];
    var visibleData = useMemo(function () { return data.filter(function (d) { return (visibleSegments === null || visibleSegments === void 0 ? void 0 : visibleSegments.indexOf(d.datum)) !== -1; }); }, [data, visibleSegments]);
    var filterItems = data === null || data === void 0 ? void 0 : data.map(function (data) { return ({
        label: data.datum.title,
        color: data.color,
        type: 'rectangle',
        datum: data.datum
    }); });
    var legendItems = filterItems.filter(function (d) { return (visibleSegments === null || visibleSegments === void 0 ? void 0 : visibleSegments.indexOf(d.datum)) !== -1; });
    var filterChange = useCallback(function (selectedSeries) {
        setVisibleSegments(selectedSeries);
        fireNonCancelableEvent(onFilterChange, {
            visibleSegments: selectedSeries
        });
    }, [setVisibleSegments, onFilterChange]);
    var onHighlightChange = useCallback(function (segment) {
        if (pinnedSegment !== null) {
            return;
        }
        segment && setLegendSegment(segment);
        setHighlightedSegment(segment);
        fireNonCancelableEvent(controlledOnHighlightChange, { highlightedSegment: segment });
    }, [pinnedSegment, controlledOnHighlightChange, setHighlightedSegment]);
    var onBlur = function (event) {
        if (event.relatedTarget && !nodeContains(containerRef.current, event.relatedTarget)) {
            highlightedSegment && onHighlightChange(null);
            setLegendSegment(null);
        }
    };
    var ref = useMemo(function () { return mergeRefs([containerRef, measureRef, __internalRootRef]); }, [measureRef, __internalRootRef]);
    return (React.createElement("div", __assign({}, containerAttr, { ref: ref, onBlur: onBlur }),
        statusType === 'finished' && !isEmpty && (React.createElement(InternalBox, { className: styles['filter-container'], margin: { bottom: 'l' } },
            React.createElement(InternalSpaceBetween, { size: "l", direction: "horizontal", className: clsx((_b = {},
                    _b[styles['has-default-filter']] = !hideFilter,
                    _b)) },
                !hideFilter && (React.createElement(Filter, { series: filterItems, onChange: filterChange, selectedSeries: visibleSegments, i18nStrings: i18nStrings })),
                additionalFilters))),
        React.createElement(InternalPieChart, __assign({}, props, { variant: variant, size: size, data: externalData, visibleData: visibleData, width: containerWidth, statusType: statusType, hideLegend: hideLegend, hideFilter: hideFilter, additionalFilters: additionalFilters, i18nStrings: i18nStrings, onHighlightChange: onHighlightChange, highlightedSegment: highlightedSegment, legendSegment: legendSegment, pinnedSegment: pinnedSegment, setPinnedSegment: setPinnedSegment, detailPopoverSize: detailPopoverSize })),
        !hideLegend && !isEmpty && statusType === 'finished' && (React.createElement(InternalBox, { margin: { top: 'm' } },
            React.createElement(Legend, { series: legendItems, highlightedSeries: legendSegment, legendTitle: legendTitle, ariaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.legendAriaLabel, onHighlightChange: onHighlightChange })))));
};
applyDisplayName(PieChart, 'PieChart');
export default PieChart;
