import { __assign } from "tslib";
import React from 'react';
import clsx from 'clsx';
import { InternalButton } from '../../button/internal';
import InternalLink from '../../link/internal';
import InternalIcon from '../../icon/internal';
import MenuDropdown from '../../internal/components/menu-dropdown';
import styles from '../styles.css.js';
export default function Utility(_a) {
    var _b;
    var hideText = _a.hideText, definition = _a.definition, offsetRight = _a.offsetRight;
    var hasIcon = !!definition.iconName || !!definition.iconUrl || !!definition.iconAlt || !!definition.iconSvg;
    var shouldHideText = hideText && !definition.disableTextCollapse && hasIcon;
    var ariaLabel = (_b = definition.ariaLabel) !== null && _b !== void 0 ? _b : definition.text;
    if (definition.type === 'button') {
        if (definition.variant === 'primary-button') {
            return (React.createElement("span", { className: styles["offset-right-" + offsetRight] },
                React.createElement(InternalButton, { variant: "primary", href: definition.href, target: definition.external ? '_blank' : undefined, onClick: definition.onClick, ariaLabel: ariaLabel, iconName: definition.iconName, iconUrl: definition.iconUrl, iconAlt: definition.iconAlt, iconSvg: definition.iconSvg }, shouldHideText ? null : (React.createElement(React.Fragment, null,
                    definition.text,
                    definition.external && (React.createElement(React.Fragment, null,
                        ' ',
                        React.createElement("span", { className: clsx(styles['utility-button-external-icon'], styles["offset-right-" + offsetRight]), "aria-label": definition.externalIconAriaLabel, role: definition.externalIconAriaLabel ? 'img' : undefined },
                            React.createElement(InternalIcon, { name: "external" })))))))));
        }
        else {
            return (React.createElement("span", { className: styles["offset-right-" + offsetRight] },
                React.createElement(InternalLink, { variant: "top-navigation", href: definition.href, external: definition.external, externalIconAriaLabel: definition.externalIconAriaLabel, onFollow: definition.onClick, ariaLabel: ariaLabel },
                    hasIcon && (React.createElement(InternalIcon, { name: definition.iconName, url: definition.iconUrl, alt: definition.iconAlt, svg: definition.iconSvg, badge: definition.badge })),
                    !shouldHideText && definition.text && (React.createElement("span", { className: hasIcon ? styles['utility-link-icon'] : undefined }, definition.text)))));
        }
    }
    else if (definition.type === 'menu-dropdown') {
        var title = definition.title || definition.text;
        var shouldShowTitle = shouldHideText || !definition.text;
        return (React.createElement(MenuDropdown, __assign({}, definition, { title: shouldShowTitle ? title : '', ariaLabel: ariaLabel, offsetRight: offsetRight }), !shouldHideText && definition.text));
    }
    return null;
}
